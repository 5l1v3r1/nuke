{
  "$schema": "https://raw.githubusercontent.com/nuke-build/nuke/master/source/Nuke.CodeGeneration/schema.json",
  "license": [
    "Copyright Sebastian Karasek 2017.",
    "Distributed under the MIT License.",
    "https://github.com/arodus/nuke-nswag/blob/master/LICENSE"
  ],
  "references": [
    "https://raw.githubusercontent.com/RSuter/NSwag/master/src/NSwag.Commands/Commands/AspNetCoreToSwaggerCommand.cs",
    "https://raw.githubusercontent.com/RSuter/NSwag/master/src/NSwag.Commands/Commands/Tooling/VersionCommand.cs",
    "https://raw.githubusercontent.com/RSuter/NSwag/master/src/NSwag.Commands/Commands/SwaggerGeneration/ListTypesCommand.cs",
    "https://raw.githubusercontent.com/RSuter/NSwag/master/src/NSwag.Commands/Commands/SwaggerGeneration/ListWebApiControllersCommand.cs",
    "https://raw.githubusercontent.com/RSuter/NSwag/master/src/NSwag.Commands/Commands/SwaggerGeneration/TypesToSwaggerCommand.cs",
    "https://raw.githubusercontent.com/RSuter/NSwag/master/src/NSwag.Commands/Commands/SwaggerGeneration/WebApiToSwaggerCommand.cs",
    "https://raw.githubusercontent.com/RSuter/NSwag/master/src/NSwag.Commands/Commands/Document/CreateDocumentCommand.cs",
    "https://raw.githubusercontent.com/RSuter/NSwag/master/src/NSwag.Commands/Commands/Document/ExecuteDocumentCommand.cs",
    "https://raw.githubusercontent.com/RSuter/NSwag/master/src/NSwag.Commands/Commands/CodeGeneration/JsonSchemaToCSharpCommand.cs",
    "https://raw.githubusercontent.com/RSuter/NSwag/master/src/NSwag.Commands/Commands/CodeGeneration/JsonSchemaToTypeScriptCommand.cs",
    "https://raw.githubusercontent.com/RSuter/NSwag/master/src/NSwag.Commands/Commands/CodeGeneration/SwaggerToCSharpClientCommand.cs",
    "https://raw.githubusercontent.com/RSuter/NSwag/master/src/NSwag.Commands/Commands/CodeGeneration/SwaggerToCSharpControllerCommand.cs",
    "https://raw.githubusercontent.com/RSuter/NSwag/master/src/NSwag.Commands/Commands/CodeGeneration/SwaggerToTypeScriptClientCommand.cs"
  ],
  "name": "NSwag",
  "officialUrl": "https://github.com/RSuter/NSwag",
  "help": "The project combines the functionality of Swashbuckle (Swagger generation) and AutoRest (client generation) in one toolchain. This way a lot of incompatibilites can be avoided and features which are not well described by the Swagger specification or JSON Schema are better supported (e.g. <a href=\"https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance\">inheritance</a>, <a href=\"https://github.com/NJsonSchema/NJsonSchema/wiki/Enums\">enum</a> and reference handling). The NSwag project heavily uses <a href=\"http://njsonschema.org/\">NJsonSchema for .NET</a> for JSON Schema handling and C#/TypeScript class/interface generation.",
  "customExecutable": true,
  "tasks": [
    {
      "help": "Generates a Swagger specification ASP.NET Core Mvc application using ApiExplorer (experimental).",
      "postfix": "AspNetCore2Swagger",
      "settingsClass": {
        "baseClass": "NSwagSettings",
        "properties": [
          {
            "name": "Project",
            "type": "string",
            "format": "/project:\\\"{value}\\\"",
            "help": "The project to use."
          },
          {
            "name": "MSBuildProjectExtensionsPath",
            "type": "string",
            "format": "/mSBuildProjectExtensionsPath:\\\"{value}\\\"",
            "help": "The MSBuild project extensions path. Defaults to \"obj\"."
          },
          {
            "name": "Configuration",
            "type": "string",
            "format": "/configuration:\\\"{value}\\\"",
            "help": "The configuration to use."
          },
          {
            "name": "Runtime",
            "type": "string",
            "format": "/runtime:\\\"{value}\\\"",
            "help": "The runtime to use."
          },
          {
            "name": "TargetFramework",
            "type": "string",
            "format": "/targetFramework:\\\"{value}\\\"",
            "help": "The target framework to use."
          },
          {
            "name": "NoBuild",
            "type": "bool",
            "format": "/noBuild:\\\"{value}\\\"",
            "help": "Don't build the project. Only use this when the build is up-to-date."
          },
          {
            "name": "Verbose",
            "type": "bool",
            "format": "/verbose:\\\"{value}\\\"",
            "help": "Print verbose output."
          },
          {
            "name": "Output",
            "type": "string",
            "format": "/output:\\\"{value}\\\"",
            "help": "The output file."
          },
          {
            "name": "DefaultPropertyNameHandling",
            "type": "PropertyNameHandling",
            "format": "/defaultPropertyNameHandling:\\\"{value}\\\"",
            "help": "The default property name handling ('Default' or 'CamelCase')."
          },
          {
            "name": "DefaultReferenceTypeNullHandling",
            "type": "ReferenceTypeNullHandling",
            "format": "/defaultReferenceTypeNullHandling:\\\"{value}\\\"",
            "help": "The default null handling (if NotNullAttribute and CanBeNullAttribute are missing, default: Null, Null or NotNull)."
          },
          {
            "name": "DefaultEnumHandling",
            "type": "EnumHandling",
            "format": "/defaultEnumHandling:\\\"{value}\\\"",
            "help": "The default enum handling ('String' or 'Integer'), default: Integer."
          },
          {
            "name": "FlattenInheritanceHierarchy",
            "type": "bool",
            "format": "/flattenInheritanceHierarchy:\\\"{value}\\\"",
            "help": "Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false)."
          },
          {
            "name": "GenerateKnownTypes",
            "type": "bool",
            "format": "/generateKnownTypes:\\\"{value}\\\"",
            "help": "Generate schemas for types in KnownTypeAttribute attributes (default: true)."
          },
          {
            "name": "GenerateXmlObjects",
            "type": "bool",
            "format": "/generateXmlObjects:\\\"{value}\\\"",
            "help": "Generate xmlObject representation for definitions (default: false)."
          },
          {
            "name": "GenerateAbstractProperties",
            "type": "bool",
            "format": "/generateAbstractProperties:\\\"{value}\\\"",
            "help": "Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false)."
          },
          {
            "name": "ServiceHost",
            "type": "string",
            "format": "/serviceHost:\\\"{value}\\\"",
            "help": "Overrides the service host of the web service (optional, use '.' to remove the hostname)."
          },
          {
            "name": "ServiceBasePath",
            "type": "string",
            "format": "/serviceBasePath:\\\"{value}\\\"",
            "help": "The basePath of the Swagger specification (optional)."
          },
          {
            "name": "ServiceSchemes",
            "type": "List<String>",
            "format": "/serviceSchemes:\\\"{value}\\\"",
            "separator": ",",
            "help": "Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss')."
          },
          {
            "name": "InfoTitle",
            "type": "string",
            "format": "/infoTitle:\\\"{value}\\\"",
            "help": "Specify the title of the Swagger specification."
          },
          {
            "name": "InfoDescription",
            "type": "string",
            "format": "/infoDescription:\\\"{value}\\\"",
            "help": "Specify the description of the Swagger specification."
          },
          {
            "name": "InfoVersion",
            "type": "string",
            "format": "/infoVersion:\\\"{value}\\\"",
            "help": "Specify the version of the Swagger specification (default: 1.0.0)."
          },
          {
            "name": "DocumentTemplate",
            "type": "string",
            "format": "/documentTemplate:\\\"{value}\\\"",
            "help": "Specifies the Swagger document template (may be a path or JSON, default: none)."
          },
          {
            "name": "DocumentProcessorTypes",
            "type": "List<String>",
            "format": "/documentProcessorTypes:\\\"{value}\\\"",
            "separator": ",",
            "help": "Gets the document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName')."
          },
          {
            "name": "OperationProcessors",
            "type": "List<String>",
            "format": "/operationProcessors:\\\"{value}\\\"",
            "separator": ",",
            "help": "Gets the operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName')."
          }
        ]
      }
    },
    {
      "help": "Prints the toolchain version.",
      "postfix": "Version",
      "settingsClass": {
        "baseClass": "NSwagSettings"
      }
    },
    {
      "help": "List all types for the given assembly and settings.",
      "postfix": "ListTypes",
      "settingsClass": {
        "baseClass": "NSwagSettings",
        "properties": [
          {
            "name": "File",
            "type": "string",
            "format": "/file:\\\"{value}\\\"",
            "help": "The nswag.json configuration file path."
          },
          {
            "name": "Variables",
            "type": "string",
            "format": "/variables:\\\"{value}\\\""
          },
          {
            "name": "Assembly",
            "type": "List<String>",
            "format": "/assembly:\\\"{value}\\\"",
            "separator": ",",
            "help": "The path or paths to the .NET assemblies (comma separated)."
          },
          {
            "name": "AssemblyConfig",
            "type": "string",
            "format": "/assemblyConfig:\\\"{value}\\\"",
            "help": "The path to the assembly App.config or Web.config (optional)."
          },
          {
            "name": "ReferencePaths",
            "type": "List<String>",
            "format": "/referencePaths:\\\"{value}\\\"",
            "separator": ",",
            "help": "The paths to search for referenced assembly files (comma separated)."
          }
        ]
      }
    },
    {
      "help": "List all controllers classes for the given assembly and settings.",
      "postfix": "ListControllers",
      "settingsClass": {
        "baseClass": "NSwagSettings",
        "properties": [
          {
            "name": "File",
            "type": "string",
            "format": "/file:\\\"{value}\\\"",
            "help": "The nswag.json configuration file path."
          },
          {
            "name": "Variables",
            "type": "string",
            "format": "/variables:\\\"{value}\\\""
          },
          {
            "name": "Assembly",
            "type": "List<String>",
            "format": "/assembly:\\\"{value}\\\"",
            "separator": ",",
            "help": "The path or paths to the .NET assemblies (comma separated)."
          },
          {
            "name": "AssemblyConfig",
            "type": "string",
            "format": "/assemblyConfig:\\\"{value}\\\"",
            "help": "The path to the assembly App.config or Web.config (optional)."
          },
          {
            "name": "ReferencePaths",
            "type": "List<String>",
            "format": "/referencePaths:\\\"{value}\\\"",
            "separator": ",",
            "help": "The paths to search for referenced assembly files (comma separated)."
          }
        ]
      }
    },
    {
      "postfix": "Types2Swagger",
      "settingsClass": {
        "baseClass": "NSwagSettings",
        "properties": [
          {
            "name": "ClassNames",
            "type": "List<String>",
            "format": "/classNames:\\\"{value}\\\"",
            "separator": ",",
            "help": "The class names."
          },
          {
            "name": "DefaultPropertyNameHandling",
            "type": "PropertyNameHandling",
            "format": "/defaultPropertyNameHandling:\\\"{value}\\\"",
            "help": "The default property name handling ('Default' or 'CamelCase')."
          },
          {
            "name": "DefaultReferenceTypeNullHandling",
            "type": "ReferenceTypeNullHandling",
            "format": "/defaultReferenceTypeNullHandling:\\\"{value}\\\"",
            "help": "The default null handling (if NotNullAttribute and CanBeNullAttribute are missing, default: Null, Null or NotNull)."
          },
          {
            "name": "DefaultEnumHandling",
            "type": "EnumHandling",
            "format": "/defaultEnumHandling:\\\"{value}\\\"",
            "help": "The default enum handling ('String' or 'Integer'), default: Integer."
          },
          {
            "name": "FlattenInheritanceHierarchy",
            "type": "bool",
            "format": "/flattenInheritanceHierarchy:\\\"{value}\\\"",
            "help": "Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false)."
          },
          {
            "name": "IgnoreObsoleteProperties",
            "type": "bool",
            "format": "/ignoreObsoleteProperties:\\\"{value}\\\"",
            "help": "Ignore properties with the ObsoleteAttribute (default: false)."
          },
          {
            "name": "AllowReferencesWithProperties",
            "type": "bool",
            "format": "/allowReferencesWithProperties:\\\"{value}\\\"",
            "help": "Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false)."
          },
          {
            "name": "GenerateKnownTypes",
            "type": "bool",
            "format": "/generateKnownTypes:\\\"{value}\\\"",
            "help": "Generate schemas for types in KnownTypeAttribute attributes (default: true)."
          },
          {
            "name": "GenerateXmlObjects",
            "type": "bool",
            "format": "/generateXmlObjects:\\\"{value}\\\"",
            "help": "Generate xmlObject representation for definitions (default: false)."
          },
          {
            "name": "Output",
            "type": "string",
            "format": "/output:\\\"{value}\\\"",
            "help": "The output file path (optional)."
          },
          {
            "name": "Assembly",
            "type": "List<String>",
            "format": "/assembly:\\\"{value}\\\"",
            "separator": ",",
            "help": "The path or paths to the .NET assemblies (comma separated)."
          },
          {
            "name": "AssemblyConfig",
            "type": "string",
            "format": "/assemblyConfig:\\\"{value}\\\"",
            "help": "The path to the assembly App.config or Web.config (optional)."
          },
          {
            "name": "ReferencePaths",
            "type": "List<String>",
            "format": "/referencePaths:\\\"{value}\\\"",
            "separator": ",",
            "help": "The paths to search for referenced assembly files (comma separated)."
          }
        ]
      }
    },
    {
      "help": "Generates a Swagger specification for a controller or controlles contained in a .NET Web API assembly.",
      "postfix": "WebApi2Swagger",
      "settingsClass": {
        "baseClass": "NSwagSettings",
        "properties": [
          {
            "name": "Controller",
            "type": "string",
            "format": "/controller:\\\"{value}\\\"",
            "help": "The Web API controller full class name or empty to load all controllers from the assembly."
          },
          {
            "name": "Controllers",
            "type": "List<String>",
            "format": "/controllers:\\\"{value}\\\"",
            "separator": ",",
            "help": "The Web API controller full class names or empty to load all controllers from the assembly (comma separated)."
          },
          {
            "name": "AspNetCore",
            "type": "bool",
            "format": "/aspNetCore:\\\"{value}\\\"",
            "help": "Specifies whether the controllers are hosted by ASP.NET Core."
          },
          {
            "name": "DefaultUrlTemplate",
            "type": "string",
            "format": "/defaultUrlTemplate:\\\"{value}\\\"",
            "help": "The Web API default URL template (default for Web API: 'api/{controller}/{id}'; for MVC projects: '{controller}/{action}/{id?}')."
          },
          {
            "name": "DefaultPropertyNameHandling",
            "type": "PropertyNameHandling",
            "format": "/defaultPropertyNameHandling:\\\"{value}\\\"",
            "help": "The default property name handling ('Default' or 'CamelCase')."
          },
          {
            "name": "DefaultReferenceTypeNullHandling",
            "type": "ReferenceTypeNullHandling",
            "format": "/defaultReferenceTypeNullHandling:\\\"{value}\\\"",
            "help": "The default null handling (if NotNullAttribute and CanBeNullAttribute are missing, default: Null, Null or NotNull)."
          },
          {
            "name": "DefaultEnumHandling",
            "type": "EnumHandling",
            "format": "/defaultEnumHandling:\\\"{value}\\\"",
            "help": "The default enum handling ('String' or 'Integer'), default: Integer."
          },
          {
            "name": "FlattenInheritanceHierarchy",
            "type": "bool",
            "format": "/flattenInheritanceHierarchy:\\\"{value}\\\"",
            "help": "Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false)."
          },
          {
            "name": "GenerateKnownTypes",
            "type": "bool",
            "format": "/generateKnownTypes:\\\"{value}\\\"",
            "help": "Generate schemas for types in KnownTypeAttribute attributes (default: true)."
          },
          {
            "name": "GenerateXmlObjects",
            "type": "bool",
            "format": "/generateXmlObjects:\\\"{value}\\\"",
            "help": "Generate xmlObject representation for definitions (default: false)."
          },
          {
            "name": "GenerateAbstractProperties",
            "type": "bool",
            "format": "/generateAbstractProperties:\\\"{value}\\\"",
            "help": "Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false)."
          },
          {
            "name": "AddMissingPathParameters",
            "type": "bool",
            "format": "/addMissingPathParameters:\\\"{value}\\\"",
            "help": "Specifies whether to add path parameters which are missing in the action method (default: true)."
          },
          {
            "name": "IgnoreObsoleteProperties",
            "type": "bool",
            "format": "/ignoreObsoleteProperties:\\\"{value}\\\"",
            "help": "Ignore properties with the ObsoleteAttribute (default: false)."
          },
          {
            "name": "AllowReferencesWithProperties",
            "type": "bool",
            "format": "/allowReferencesWithProperties:\\\"{value}\\\"",
            "help": "Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false)."
          },
          {
            "name": "ExcludedTypeNames",
            "type": "List<String>",
            "format": "/excludedTypeNames:\\\"{value}\\\"",
            "separator": ",",
            "help": "The excluded type names (same as JsonSchemaIgnoreAttribute)."
          },
          {
            "name": "ServiceHost",
            "type": "string",
            "format": "/serviceHost:\\\"{value}\\\"",
            "help": "Overrides the service host of the web service (optional, use '.' to remove the hostname)."
          },
          {
            "name": "ServiceBasePath",
            "type": "string",
            "format": "/serviceBasePath:\\\"{value}\\\"",
            "help": "The basePath of the Swagger specification (optional)."
          },
          {
            "name": "ServiceSchemes",
            "type": "List<String>",
            "format": "/serviceSchemes:\\\"{value}\\\"",
            "separator": ",",
            "help": "Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss')."
          },
          {
            "name": "InfoTitle",
            "type": "string",
            "format": "/infoTitle:\\\"{value}\\\"",
            "help": "Specify the title of the Swagger specification."
          },
          {
            "name": "InfoDescription",
            "type": "string",
            "format": "/infoDescription:\\\"{value}\\\"",
            "help": "Specify the description of the Swagger specification."
          },
          {
            "name": "InfoVersion",
            "type": "string",
            "format": "/infoVersion:\\\"{value}\\\"",
            "help": "Specify the version of the Swagger specification (default: 1.0.0)."
          },
          {
            "name": "DocumentTemplate",
            "type": "string",
            "format": "/documentTemplate:\\\"{value}\\\"",
            "help": "Specifies the Swagger document template (may be a path or JSON, default: none)."
          },
          {
            "name": "DocumentProcessors",
            "type": "List<String>",
            "format": "/documentProcessors:\\\"{value}\\\"",
            "separator": ",",
            "help": "The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName')."
          },
          {
            "name": "OperationProcessors",
            "type": "List<String>",
            "format": "/operationProcessors:\\\"{value}\\\"",
            "separator": ",",
            "help": "The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName')."
          },
          {
            "name": "TypeNameGenerator",
            "type": "string",
            "format": "/typeNameGenerator:\\\"{value}\\\"",
            "help": "The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName')."
          },
          {
            "name": "SchemaNameGenerator",
            "type": "string",
            "format": "/schemaNameGenerator:\\\"{value}\\\"",
            "help": "The custom ISchemaNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName')."
          },
          {
            "name": "Output",
            "type": "string",
            "format": "/output:\\\"{value}\\\"",
            "help": "The output file path (optional)."
          },
          {
            "name": "Assembly",
            "type": "List<String>",
            "format": "/assembly:\\\"{value}\\\"",
            "separator": ",",
            "help": "The path or paths to the .NET assemblies (comma separated)."
          },
          {
            "name": "AssemblyConfig",
            "type": "string",
            "format": "/assemblyConfig:\\\"{value}\\\"",
            "help": "The path to the assembly App.config or Web.config (optional)."
          },
          {
            "name": "ReferencePaths",
            "type": "List<String>",
            "format": "/referencePaths:\\\"{value}\\\"",
            "separator": ",",
            "help": "The paths to search for referenced assembly files (comma separated)."
          }
        ]
      }
    },
    {
      "help": "Creates a new nswag.json file in the current directory.",
      "postfix": "New",
      "settingsClass": {
        "baseClass": "NSwagSettings"
      }
    },
    {
      "help": "Executes an .nswag file. If 'input' is not specified then all *.nswag files and the nswag.json file is executed.",
      "postfix": "Run",
      "settingsClass": {
        "baseClass": "NSwagSettings",
        "properties": [
          {
            "name": "Input",
            "type": "string",
            "format": "{value}"
          },
          {
            "name": "Variables",
            "type": "string",
            "format": "/variables:\\\"{value}\\\""
          }
        ]
      }
    },
    {
      "help": "Generates CSharp classes from a JSON Schema.",
      "postfix": "JsonSchema2CsClient",
      "settingsClass": {
        "baseClass": "NSwagSettings",
        "properties": [
          {
            "name": "Name",
            "type": "string",
            "format": "/name:\\\"{value}\\\"",
            "help": "The class name of the root schema."
          },
          {
            "name": "TargetNamespace",
            "type": "string",
            "format": "/namespace:\\\"{value}\\\"",
            "help": "The namespace of the generated classes."
          },
          {
            "name": "RequiredPropertiesMustBeDefined",
            "type": "bool",
            "format": "/requiredPropertiesMustBeDefined:\\\"{value}\\\"",
            "help": "Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required)."
          },
          {
            "name": "DateTimeType",
            "type": "string",
            "format": "/dateTimeType:\\\"{value}\\\"",
            "help": "The date time .NET type (default: 'DateTime')."
          },
          {
            "name": "ArrayType",
            "type": "string",
            "format": "/arrayType:\\\"{value}\\\"",
            "help": "The generic array .NET type (default: 'ObservableCollection')."
          },
          {
            "name": "DictionaryType",
            "type": "string",
            "format": "/dictionaryType:\\\"{value}\\\"",
            "help": "The generic dictionary .NET type (default: 'Dictionary')."
          },
          {
            "name": "Input",
            "type": "string",
            "format": "/input:\\\"{value}\\\"",
            "help": "A file path or URL to the data or the JSON data itself."
          },
          {
            "name": "ServiceHost",
            "type": "string",
            "format": "/serviceHost:\\\"{value}\\\"",
            "help": "Overrides the service host of the web document (optional, use '.' to remove the hostname)."
          },
          {
            "name": "ServiceSchemes",
            "type": "List<String>",
            "format": "/serviceSchemes:\\\"{value}\\\"",
            "separator": ",",
            "help": "Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss')."
          },
          {
            "name": "Output",
            "type": "string",
            "format": "/output:\\\"{value}\\\"",
            "help": "The output file path (optional)."
          }
        ]
      }
    },
    {
      "help": "Generates TypeScript interfaces from a JSON Schema.",
      "postfix": "JsonSchema2TsClient",
      "settingsClass": {
        "baseClass": "NSwagSettings",
        "properties": [
          {
            "name": "Name",
            "type": "string",
            "format": "/name:\\\"{value}\\\"",
            "help": "The type name of the root schema."
          },
          {
            "name": "Input",
            "type": "string",
            "format": "/input:\\\"{value}\\\"",
            "help": "A file path or URL to the data or the JSON data itself."
          },
          {
            "name": "ServiceHost",
            "type": "string",
            "format": "/serviceHost:\\\"{value}\\\"",
            "help": "Overrides the service host of the web document (optional, use '.' to remove the hostname)."
          },
          {
            "name": "ServiceSchemes",
            "type": "List<String>",
            "format": "/serviceSchemes:\\\"{value}\\\"",
            "separator": ",",
            "help": "Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss')."
          },
          {
            "name": "Output",
            "type": "string",
            "format": "/output:\\\"{value}\\\"",
            "help": "The output file path (optional)."
          }
        ]
      }
    },
    {
      "help": "Generates CSharp client code from a Swagger specification.",
      "postfix": "Swagger2CsClient",
      "settingsClass": {
        "baseClass": "NSwagSettings",
        "properties": [
          {
            "name": "ClientBaseClass",
            "type": "string",
            "format": "/clientBaseClass:\\\"{value}\\\"",
            "help": "The client base class (empty for no base class)."
          },
          {
            "name": "ConfigurationClass",
            "type": "string",
            "format": "/configurationClass:\\\"{value}\\\"",
            "help": "The configuration class. The setting ClientBaseClass must be set. (empty for no configuration class)."
          },
          {
            "name": "GenerateClientClasses",
            "type": "bool",
            "format": "/generateClientClasses:\\\"{value}\\\"",
            "help": "Specifies whether generate client classes."
          },
          {
            "name": "GenerateClientInterfaces",
            "type": "bool",
            "format": "/generateClientInterfaces:\\\"{value}\\\"",
            "help": "Specifies whether generate interfaces for the client classes."
          },
          {
            "name": "GenerateDtoTypes",
            "type": "bool",
            "format": "/generateDtoTypes:\\\"{value}\\\"",
            "help": "Specifies whether to generate DTO classes."
          },
          {
            "name": "InjectHttpClient",
            "type": "bool",
            "format": "/injectHttpClient:\\\"{value}\\\"",
            "help": "Specifies whether an HttpClient instance is injected."
          },
          {
            "name": "DisposeHttpClient",
            "type": "bool",
            "format": "/disposeHttpClient:\\\"{value}\\\"",
            "help": "Specifies whether to dispose the HttpClient (injected HttpClient is never disposed)."
          },
          {
            "name": "ProtectedMethods",
            "type": "List<String>",
            "format": "/protectedMethods:\\\"{value}\\\"",
            "separator": ",",
            "help": "List of methods with a protected access modifier ('classname.methodname')."
          },
          {
            "name": "GenerateExceptionClasses",
            "type": "bool",
            "format": "/generateExceptionClasses:\\\"{value}\\\"",
            "help": "Specifies whether to generate exception classes (default: true)."
          },
          {
            "name": "ExceptionClass",
            "type": "string",
            "format": "/exceptionClass:\\\"{value}\\\"",
            "help": "The exception class (default 'SwaggerException', may use '{controller}' placeholder)."
          },
          {
            "name": "WrapDtoExceptions",
            "type": "bool",
            "format": "/wrapDtoExceptions:\\\"{value}\\\"",
            "help": "Specifies whether DTO exceptions are wrapped in a SwaggerException instance (default: true)."
          },
          {
            "name": "UseHttpClientCreationMethod",
            "type": "bool",
            "format": "/useHttpClientCreationMethod:\\\"{value}\\\"",
            "help": "Specifies whether to call CreateHttpClientAsync on the base class to create a new HttpClient."
          },
          {
            "name": "HttpClientType",
            "type": "string",
            "format": "/httpClientType:\\\"{value}\\\"",
            "help": "Specifies the HttpClient type. By default the 'System.Net.Http.HttpClient' is used."
          },
          {
            "name": "UseHttpRequestMessageCreationMethod",
            "type": "bool",
            "format": "/useHttpRequestMessageCreationMethod:\\\"{value}\\\"",
            "help": "Specifies whether to call CreateHttpRequestMessageAsync on the base class to create a new HttpRequestMethod."
          },
          {
            "name": "UseBaseUrl",
            "type": "bool",
            "format": "/useBaseUrl:\\\"{value}\\\"",
            "help": "Specifies whether to use and expose the base URL (default: true)."
          },
          {
            "name": "GenerateBaseUrlProperty",
            "type": "bool",
            "format": "/generateBaseUrlProperty:\\\"{value}\\\"",
            "help": "Specifies whether to generate the BaseUrl property, must be defined on the base class otherwise (default: true)."
          },
          {
            "name": "GenerateSyncMethods",
            "type": "bool",
            "format": "/generateSyncMethods:\\\"{value}\\\"",
            "help": "Specifies whether to generate synchronous methods (not recommended, default: false)."
          },
          {
            "name": "ClientClassAccessModifier",
            "type": "string",
            "format": "/clientClassAccessModifier:\\\"{value}\\\"",
            "help": "The client class access modifier (default: public)."
          },
          {
            "name": "TypeAccessModifier",
            "type": "string",
            "format": "/typeAccessModifier:\\\"{value}\\\"",
            "help": "The DTO class/enum access modifier (default: public)."
          },
          {
            "name": "GenerateContractsOutput",
            "type": "bool",
            "format": "/generateContractsOutput:\\\"{value}\\\"",
            "help": "Specifies whether to generate contracts output (interface and models in a separate file set with the ContractsOutput parameter)."
          },
          {
            "name": "ContractsTargetNamespace",
            "type": "string",
            "format": "/contractsNamespace:\\\"{value}\\\"",
            "help": "The contracts .NET namespace."
          },
          {
            "name": "ContractsOutput",
            "type": "string",
            "format": "/contractsOutput:\\\"{value}\\\"",
            "help": "The contracts output file path (optional, if no path is set then a single file with the implementation and contracts is generated)."
          },
          {
            "name": "ParameterDateTimeFormat",
            "type": "string",
            "format": "/parameterDateTimeFormat:\\\"{value}\\\"",
            "help": "Specifies the format for DateTime type method parameters (default: s)."
          },
          {
            "name": "GenerateUpdateJsonSerializerSettingsMethod",
            "type": "bool",
            "format": "/generateUpdateJsonSerializerSettingsMethod:\\\"{value}\\\"",
            "help": "Generate the UpdateJsonSerializerSettings method (must be implemented in the base class otherwise, default: true)."
          },
          {
            "name": "SerializeTypeInformation",
            "type": "bool",
            "format": "/serializeTypeInformation:\\\"{value}\\\"",
            "help": "Serialize the type information in a $type property (not recommended, also sets TypeNameHandling = Auto, default: true)."
          },
          {
            "name": "QueryNullValue",
            "type": "string",
            "format": "/queryNullValue:\\\"{value}\\\"",
            "help": "The null value used for query parameters which are null (default: '')."
          },
          {
            "name": "ClassName",
            "type": "string",
            "format": "/className:\\\"{value}\\\"",
            "help": "The class name of the generated client."
          },
          {
            "name": "OperationGenerationMode",
            "type": "OperationGenerationMode",
            "format": "/operationGenerationMode:\\\"{value}\\\"",
            "help": "The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments')."
          },
          {
            "name": "AdditionalTargetNamespaceUsages",
            "type": "List<String>",
            "format": "/additionalNamespaceUsages:\\\"{value}\\\"",
            "separator": ",",
            "help": "The additional namespace usages."
          },
          {
            "name": "AdditionalContractTargetNamespaceUsages",
            "type": "List<String>",
            "format": "/additionalContractNamespaceUsages:\\\"{value}\\\"",
            "separator": ",",
            "help": "The additional contract namespace usages."
          },
          {
            "name": "GenerateOptionalParameters",
            "type": "bool",
            "format": "/generateOptionalParameters:\\\"{value}\\\"",
            "help": "Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false)."
          },
          {
            "name": "ParameterArrayType",
            "type": "string",
            "format": "/parameterArrayType:\\\"{value}\\\"",
            "help": "The generic array .NET type of operation parameters (default: 'IEnumerable')."
          },
          {
            "name": "ParameterDictionaryType",
            "type": "string",
            "format": "/parameterDictionaryType:\\\"{value}\\\"",
            "help": "The generic dictionary .NET type of operation parameters (default: 'IReadOnlyDictionary')."
          },
          {
            "name": "ResponseArrayType",
            "type": "string",
            "format": "/responseArrayType:\\\"{value}\\\"",
            "help": "The generic array .NET type of operation responses (default: 'ICollection')."
          },
          {
            "name": "ResponseDictionaryType",
            "type": "string",
            "format": "/responseDictionaryType:\\\"{value}\\\"",
            "help": "The generic dictionary .NET type of operation responses (default: 'IDictionary')."
          },
          {
            "name": "WrapResponses",
            "type": "bool",
            "format": "/wrapResponses:\\\"{value}\\\"",
            "help": "Specifies whether to wrap success responses to allow full response access."
          },
          {
            "name": "WrapResponseMethods",
            "type": "List<String>",
            "format": "/wrapResponseMethods:\\\"{value}\\\"",
            "separator": ",",
            "help": "List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true)."
          },
          {
            "name": "GenerateResponseClasses",
            "type": "bool",
            "format": "/generateResponseClasses:\\\"{value}\\\"",
            "help": "Specifies whether to generate response classes (default: true)."
          },
          {
            "name": "ResponseClass",
            "type": "string",
            "format": "/responseClass:\\\"{value}\\\"",
            "help": "The response class (default 'SwaggerResponse', may use '{controller}' placeholder)."
          },
          {
            "name": "TargetNamespace",
            "type": "string",
            "format": "/namespace:\\\"{value}\\\"",
            "help": "The namespace of the generated classes."
          },
          {
            "name": "RequiredPropertiesMustBeDefined",
            "type": "bool",
            "format": "/requiredPropertiesMustBeDefined:\\\"{value}\\\"",
            "help": "Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required)."
          },
          {
            "name": "DateType",
            "type": "string",
            "format": "/dateType:\\\"{value}\\\"",
            "help": "The date .NET type (default: 'DateTime')."
          },
          {
            "name": "JsonConverters",
            "type": "List<String>",
            "format": "/jsonConverters:\\\"{value}\\\"",
            "separator": ",",
            "help": "Specifies the custom Json.NET converter types (optional, comma separated)."
          },
          {
            "name": "DateTimeType",
            "type": "string",
            "format": "/dateTimeType:\\\"{value}\\\"",
            "help": "The date time .NET type (default: 'DateTime')."
          },
          {
            "name": "TimeType",
            "type": "string",
            "format": "/timeType:\\\"{value}\\\"",
            "help": "The time .NET type (default: 'TimeSpan')."
          },
          {
            "name": "TimeSpanType",
            "type": "string",
            "format": "/timeSpanType:\\\"{value}\\\"",
            "help": "The time span .NET type (default: 'TimeSpan')."
          },
          {
            "name": "ArrayType",
            "type": "string",
            "format": "/arrayType:\\\"{value}\\\"",
            "help": "The generic array .NET type (default: 'ObservableCollection')."
          },
          {
            "name": "DictionaryType",
            "type": "string",
            "format": "/dictionaryType:\\\"{value}\\\"",
            "help": "The generic dictionary .NET type (default: 'Dictionary')."
          },
          {
            "name": "ArrayBaseType",
            "type": "string",
            "format": "/arrayBaseType:\\\"{value}\\\"",
            "help": "The generic array .NET type (default: 'ObservableCollection')."
          },
          {
            "name": "DictionaryBaseType",
            "type": "string",
            "format": "/dictionaryBaseType:\\\"{value}\\\"",
            "help": "The generic dictionary .NET type (default: 'Dictionary')."
          },
          {
            "name": "ClassStyle",
            "type": "CSharpClassStyle",
            "format": "/classStyle:\\\"{value}\\\"",
            "help": "The CSharp class style, 'Poco' or 'Inpc' (default: 'Inpc')."
          },
          {
            "name": "GenerateDefaultValues",
            "type": "bool",
            "format": "/generateDefaultValues:\\\"{value}\\\"",
            "help": "Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true)."
          },
          {
            "name": "GenerateDataAnnotations",
            "type": "bool",
            "format": "/generateDataAnnotations:\\\"{value}\\\"",
            "help": "Specifies whether to generate data annotation attributes on DTO classes (default: true)."
          },
          {
            "name": "ExcludedTypeNames",
            "type": "List<String>",
            "format": "/excludedTypeNames:\\\"{value}\\\"",
            "separator": ",",
            "help": "The excluded DTO type names (must be defined in an import or other namespace)."
          },
          {
            "name": "HandleReferences",
            "type": "bool",
            "format": "/handleReferences:\\\"{value}\\\"",
            "help": "Use preserve references handling (All) in the JSON serializer (default: false)."
          },
          {
            "name": "GenerateImmutableArrayProperties",
            "type": "bool",
            "format": "/generateImmutableArrayProperties:\\\"{value}\\\"",
            "help": "Specifies whether to remove the setter for non-nullable array properties (default: false)."
          },
          {
            "name": "GenerateImmutableDictionaryProperties",
            "type": "bool",
            "format": "/generateImmutableDictionaryProperties:\\\"{value}\\\"",
            "help": "Specifies whether to remove the setter for non-nullable dictionary properties (default: false)."
          },
          {
            "name": "JsonSerializerSettingsTransformationMethod",
            "type": "string",
            "format": "/jsonSerializerSettingsTransformationMethod:\\\"{value}\\\"",
            "help": "The name of a static method which is called to transform the JsonSerializerSettings used in the generated ToJson()/FromJson() methods (default: none)."
          },
          {
            "name": "TemplateDirectory",
            "type": "string",
            "format": "/templateDirectory:\\\"{value}\\\"",
            "help": "The Liquid template directory (experimental)."
          },
          {
            "name": "Input",
            "type": "string",
            "format": "/input:\\\"{value}\\\"",
            "help": "A file path or URL to the data or the JSON data itself."
          },
          {
            "name": "ServiceHost",
            "type": "string",
            "format": "/serviceHost:\\\"{value}\\\"",
            "help": "Overrides the service host of the web document (optional, use '.' to remove the hostname)."
          },
          {
            "name": "ServiceSchemes",
            "type": "List<String>",
            "format": "/serviceSchemes:\\\"{value}\\\"",
            "separator": ",",
            "help": "Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss')."
          },
          {
            "name": "Output",
            "type": "string",
            "format": "/output:\\\"{value}\\\"",
            "help": "The output file path (optional)."
          }
        ]
      }
    },
    {
      "help": "Generates CSharp Web API controller code from a Swagger specification.",
      "postfix": "Swagger2Cscontroller",
      "settingsClass": {
        "baseClass": "NSwagSettings",
        "properties": [
          {
            "name": "ControllerBaseClass",
            "type": "string",
            "format": "/controllerBaseClass:\\\"{value}\\\"",
            "help": "The controller base class (empty for 'ApiController')."
          },
          {
            "name": "ControllerStyle",
            "type": "CSharpControllerStyle",
            "format": "/controllerStyle:\\\"{value}\\\"",
            "help": "The controller generation style (partial, abstract; default: partial)."
          },
          {
            "name": "UseCancellationToken",
            "type": "bool",
            "format": "/useCancellationToken:\\\"{value}\\\"",
            "help": "Add a cancellation token parameter (default: false)."
          },
          {
            "name": "AspNetTargetNamespace",
            "type": "string",
            "format": "/aspNetNamespace:\\\"{value}\\\"",
            "help": "The ASP.NET (Core) framework namespace (default: 'System.Web.Http')."
          },
          {
            "name": "ClassName",
            "type": "string",
            "format": "/className:\\\"{value}\\\"",
            "help": "The class name of the generated client."
          },
          {
            "name": "OperationGenerationMode",
            "type": "OperationGenerationMode",
            "format": "/operationGenerationMode:\\\"{value}\\\"",
            "help": "The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments')."
          },
          {
            "name": "AdditionalTargetNamespaceUsages",
            "type": "List<String>",
            "format": "/additionalNamespaceUsages:\\\"{value}\\\"",
            "separator": ",",
            "help": "The additional namespace usages."
          },
          {
            "name": "AdditionalContractTargetNamespaceUsages",
            "type": "List<String>",
            "format": "/additionalContractNamespaceUsages:\\\"{value}\\\"",
            "separator": ",",
            "help": "The additional contract namespace usages."
          },
          {
            "name": "GenerateOptionalParameters",
            "type": "bool",
            "format": "/generateOptionalParameters:\\\"{value}\\\"",
            "help": "Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false)."
          },
          {
            "name": "ParameterArrayType",
            "type": "string",
            "format": "/parameterArrayType:\\\"{value}\\\"",
            "help": "The generic array .NET type of operation parameters (default: 'IEnumerable')."
          },
          {
            "name": "ParameterDictionaryType",
            "type": "string",
            "format": "/parameterDictionaryType:\\\"{value}\\\"",
            "help": "The generic dictionary .NET type of operation parameters (default: 'IReadOnlyDictionary')."
          },
          {
            "name": "ResponseArrayType",
            "type": "string",
            "format": "/responseArrayType:\\\"{value}\\\"",
            "help": "The generic array .NET type of operation responses (default: 'ICollection')."
          },
          {
            "name": "ResponseDictionaryType",
            "type": "string",
            "format": "/responseDictionaryType:\\\"{value}\\\"",
            "help": "The generic dictionary .NET type of operation responses (default: 'IDictionary')."
          },
          {
            "name": "WrapResponses",
            "type": "bool",
            "format": "/wrapResponses:\\\"{value}\\\"",
            "help": "Specifies whether to wrap success responses to allow full response access."
          },
          {
            "name": "WrapResponseMethods",
            "type": "List<String>",
            "format": "/wrapResponseMethods:\\\"{value}\\\"",
            "separator": ",",
            "help": "List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true)."
          },
          {
            "name": "GenerateResponseClasses",
            "type": "bool",
            "format": "/generateResponseClasses:\\\"{value}\\\"",
            "help": "Specifies whether to generate response classes (default: true)."
          },
          {
            "name": "ResponseClass",
            "type": "string",
            "format": "/responseClass:\\\"{value}\\\"",
            "help": "The response class (default 'SwaggerResponse', may use '{controller}' placeholder)."
          },
          {
            "name": "TargetNamespace",
            "type": "string",
            "format": "/namespace:\\\"{value}\\\"",
            "help": "The namespace of the generated classes."
          },
          {
            "name": "RequiredPropertiesMustBeDefined",
            "type": "bool",
            "format": "/requiredPropertiesMustBeDefined:\\\"{value}\\\"",
            "help": "Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required)."
          },
          {
            "name": "DateType",
            "type": "string",
            "format": "/dateType:\\\"{value}\\\"",
            "help": "The date .NET type (default: 'DateTime')."
          },
          {
            "name": "JsonConverters",
            "type": "List<String>",
            "format": "/jsonConverters:\\\"{value}\\\"",
            "separator": ",",
            "help": "Specifies the custom Json.NET converter types (optional, comma separated)."
          },
          {
            "name": "DateTimeType",
            "type": "string",
            "format": "/dateTimeType:\\\"{value}\\\"",
            "help": "The date time .NET type (default: 'DateTime')."
          },
          {
            "name": "TimeType",
            "type": "string",
            "format": "/timeType:\\\"{value}\\\"",
            "help": "The time .NET type (default: 'TimeSpan')."
          },
          {
            "name": "TimeSpanType",
            "type": "string",
            "format": "/timeSpanType:\\\"{value}\\\"",
            "help": "The time span .NET type (default: 'TimeSpan')."
          },
          {
            "name": "ArrayType",
            "type": "string",
            "format": "/arrayType:\\\"{value}\\\"",
            "help": "The generic array .NET type (default: 'ObservableCollection')."
          },
          {
            "name": "DictionaryType",
            "type": "string",
            "format": "/dictionaryType:\\\"{value}\\\"",
            "help": "The generic dictionary .NET type (default: 'Dictionary')."
          },
          {
            "name": "ArrayBaseType",
            "type": "string",
            "format": "/arrayBaseType:\\\"{value}\\\"",
            "help": "The generic array .NET type (default: 'ObservableCollection')."
          },
          {
            "name": "DictionaryBaseType",
            "type": "string",
            "format": "/dictionaryBaseType:\\\"{value}\\\"",
            "help": "The generic dictionary .NET type (default: 'Dictionary')."
          },
          {
            "name": "ClassStyle",
            "type": "CSharpClassStyle",
            "format": "/classStyle:\\\"{value}\\\"",
            "help": "The CSharp class style, 'Poco' or 'Inpc' (default: 'Inpc')."
          },
          {
            "name": "GenerateDefaultValues",
            "type": "bool",
            "format": "/generateDefaultValues:\\\"{value}\\\"",
            "help": "Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true)."
          },
          {
            "name": "GenerateDataAnnotations",
            "type": "bool",
            "format": "/generateDataAnnotations:\\\"{value}\\\"",
            "help": "Specifies whether to generate data annotation attributes on DTO classes (default: true)."
          },
          {
            "name": "ExcludedTypeNames",
            "type": "List<String>",
            "format": "/excludedTypeNames:\\\"{value}\\\"",
            "separator": ",",
            "help": "The excluded DTO type names (must be defined in an import or other namespace)."
          },
          {
            "name": "HandleReferences",
            "type": "bool",
            "format": "/handleReferences:\\\"{value}\\\"",
            "help": "Use preserve references handling (All) in the JSON serializer (default: false)."
          },
          {
            "name": "GenerateImmutableArrayProperties",
            "type": "bool",
            "format": "/generateImmutableArrayProperties:\\\"{value}\\\"",
            "help": "Specifies whether to remove the setter for non-nullable array properties (default: false)."
          },
          {
            "name": "GenerateImmutableDictionaryProperties",
            "type": "bool",
            "format": "/generateImmutableDictionaryProperties:\\\"{value}\\\"",
            "help": "Specifies whether to remove the setter for non-nullable dictionary properties (default: false)."
          },
          {
            "name": "JsonSerializerSettingsTransformationMethod",
            "type": "string",
            "format": "/jsonSerializerSettingsTransformationMethod:\\\"{value}\\\"",
            "help": "The name of a static method which is called to transform the JsonSerializerSettings used in the generated ToJson()/FromJson() methods (default: none)."
          },
          {
            "name": "TemplateDirectory",
            "type": "string",
            "format": "/templateDirectory:\\\"{value}\\\"",
            "help": "The Liquid template directory (experimental)."
          },
          {
            "name": "Input",
            "type": "string",
            "format": "/input:\\\"{value}\\\"",
            "help": "A file path or URL to the data or the JSON data itself."
          },
          {
            "name": "ServiceHost",
            "type": "string",
            "format": "/serviceHost:\\\"{value}\\\"",
            "help": "Overrides the service host of the web document (optional, use '.' to remove the hostname)."
          },
          {
            "name": "ServiceSchemes",
            "type": "List<String>",
            "format": "/serviceSchemes:\\\"{value}\\\"",
            "separator": ",",
            "help": "Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss')."
          },
          {
            "name": "Output",
            "type": "string",
            "format": "/output:\\\"{value}\\\"",
            "help": "The output file path (optional)."
          }
        ]
      }
    },
    {
      "help": "Generates TypeScript client code from a Swagger specification.",
      "postfix": "Swagger2TsClient",
      "settingsClass": {
        "baseClass": "NSwagSettings",
        "properties": [
          {
            "name": "ClassName",
            "type": "string",
            "format": "/className:\\\"{value}\\\"",
            "help": "The class name of the generated client."
          },
          {
            "name": "ModuleName",
            "type": "string",
            "format": "/moduleName:\\\"{value}\\\"",
            "help": "The TypeScript module name (default: '', no module)."
          },
          {
            "name": "TargetNamespace",
            "type": "string",
            "format": "/namespace:\\\"{value}\\\"",
            "help": "The TypeScript namespace (default: '', no namespace)."
          },
          {
            "name": "TypeScriptVersion",
            "type": "string",
            "format": "/typeScriptVersion:\\\"{value}\\\"",
            "help": "The target TypeScript version (default: 1.8)."
          },
          {
            "name": "Template",
            "type": "TypeScriptTemplate",
            "format": "/template:\\\"{value}\\\"",
            "help": "The type of the asynchronism handling ('JQueryCallbacks', 'JQueryPromises', 'AngularJS', 'Angular', 'Fetch', 'Aurelia')."
          },
          {
            "name": "PromiseType",
            "type": "PromiseType",
            "format": "/promiseType:\\\"{value}\\\"",
            "help": "The promise type ('Promise' or 'QPromise')."
          },
          {
            "name": "HttpClass",
            "type": "HttpClass",
            "format": "/httpClass:\\\"{value}\\\"",
            "help": "The Angular HTTP service class (default 'Http', 'HttpClient')."
          },
          {
            "name": "InjectionTokenType",
            "type": "InjectionTokenType",
            "format": "/injectionTokenType:\\\"{value}\\\"",
            "help": "The Angular injection token type (default 'OpaqueToken', 'InjectionToken')."
          },
          {
            "name": "DateTimeType",
            "type": "TypeScriptDateTimeType",
            "format": "/dateTimeType:\\\"{value}\\\"",
            "help": "The date time type ('Date', 'MomentJS', 'OffsetMomentJS', 'string')."
          },
          {
            "name": "NullValue",
            "type": "TypeScriptNullValue",
            "format": "/nullValue:\\\"{value}\\\"",
            "help": "The null value used in object initializers (default 'Undefined', 'Null')."
          },
          {
            "name": "GenerateClientClasses",
            "type": "bool",
            "format": "/generateClientClasses:\\\"{value}\\\"",
            "help": "Specifies whether generate client classes."
          },
          {
            "name": "GenerateClientInterfaces",
            "type": "bool",
            "format": "/generateClientInterfaces:\\\"{value}\\\"",
            "help": "Specifies whether generate interfaces for the client classes (default: false)."
          },
          {
            "name": "GenerateOptionalParameters",
            "type": "bool",
            "format": "/generateOptionalParameters:\\\"{value}\\\"",
            "help": "Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false)."
          },
          {
            "name": "WrapDtoExceptions",
            "type": "bool",
            "format": "/wrapDtoExceptions:\\\"{value}\\\"",
            "help": "Specifies whether DTO exceptions are wrapped in a SwaggerException instance (default: false)."
          },
          {
            "name": "ClientBaseClass",
            "type": "string",
            "format": "/clientBaseClass:\\\"{value}\\\"",
            "help": "The base class of the generated client classes (optional, must be imported or implemented in the extension code)."
          },
          {
            "name": "WrapResponses",
            "type": "bool",
            "format": "/wrapResponses:\\\"{value}\\\"",
            "help": "Specifies whether to wrap success responses to allow full response access (experimental)."
          },
          {
            "name": "WrapResponseMethods",
            "type": "List<String>",
            "format": "/wrapResponseMethods:\\\"{value}\\\"",
            "separator": ",",
            "help": "List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true)."
          },
          {
            "name": "GenerateResponseClasses",
            "type": "bool",
            "format": "/generateResponseClasses:\\\"{value}\\\"",
            "help": "Specifies whether to generate response classes (default: true)."
          },
          {
            "name": "ResponseClass",
            "type": "string",
            "format": "/responseClass:\\\"{value}\\\"",
            "help": "The response class (default 'SwaggerResponse', may use '{controller}' placeholder)."
          },
          {
            "name": "ProtectedMethods",
            "type": "List<String>",
            "format": "/protectedMethods:\\\"{value}\\\"",
            "separator": ",",
            "help": "List of methods with a protected access modifier ('classname.methodname')."
          },
          {
            "name": "ConfigurationClass",
            "type": "string",
            "format": "/configurationClass:\\\"{value}\\\"",
            "help": "The configuration class. The setting ClientBaseClass must be set. (empty for no configuration class)."
          },
          {
            "name": "UseTransformOptionsMethod",
            "type": "bool",
            "format": "/useTransformOptionsMethod:\\\"{value}\\\"",
            "help": "Call 'transformOptions' on the base class or extension class (default: false)."
          },
          {
            "name": "UseTransformResultMethod",
            "type": "bool",
            "format": "/useTransformResultMethod:\\\"{value}\\\"",
            "help": "Call 'transformResult' on the base class or extension class (default: false)."
          },
          {
            "name": "GenerateDtoTypes",
            "type": "bool",
            "format": "/generateDtoTypes:\\\"{value}\\\"",
            "help": "Specifies whether to generate DTO classes."
          },
          {
            "name": "OperationGenerationMode",
            "type": "OperationGenerationMode",
            "format": "/operationGenerationMode:\\\"{value}\\\"",
            "help": "The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments')."
          },
          {
            "name": "MarkOptionalProperties",
            "type": "bool",
            "format": "/markOptionalProperties:\\\"{value}\\\"",
            "help": "Specifies whether to mark optional properties with ? (default: false)."
          },
          {
            "name": "GenerateCloneMethod",
            "type": "bool",
            "format": "/generateCloneMethod:\\\"{value}\\\"",
            "help": "Specifies whether a clone() method should be generated in the DTO classes (default: false)."
          },
          {
            "name": "TypeStyle",
            "type": "TypeScriptTypeStyle",
            "format": "/typeStyle:\\\"{value}\\\"",
            "help": "The type style (default: Class)."
          },
          {
            "name": "ClassTypes",
            "type": "List<String>",
            "format": "/classTypes:\\\"{value}\\\"",
            "separator": ",",
            "help": "The type names which always generate plain TypeScript classes."
          },
          {
            "name": "ExtendedClasses",
            "type": "List<String>",
            "format": "/extendedClasses:\\\"{value}\\\"",
            "separator": ",",
            "help": "The list of extended classes."
          },
          {
            "name": "ExtensionCode",
            "type": "string",
            "format": "/extensionCode:\\\"{value}\\\"",
            "help": "The extension code (string or file path)."
          },
          {
            "name": "GenerateDefaultValues",
            "type": "bool",
            "format": "/generateDefaultValues:\\\"{value}\\\"",
            "help": "Specifies whether to generate default values for properties (default: true)."
          },
          {
            "name": "ExcludedTypeNames",
            "type": "List<String>",
            "format": "/excludedTypeNames:\\\"{value}\\\"",
            "separator": ",",
            "help": "The excluded DTO type names (must be defined in an import or other namespace)."
          },
          {
            "name": "HandleReferences",
            "type": "bool",
            "format": "/handleReferences:\\\"{value}\\\"",
            "help": "Handle JSON references (default: false)."
          },
          {
            "name": "GenerateConstructorInterface",
            "type": "bool",
            "format": "/generateConstructorInterface:\\\"{value}\\\"",
            "help": "Generate an class interface which is used in the constructor to initialize the class (only available when TypeStyle is Class, default: true)."
          },
          {
            "name": "ConvertConstructorInterfaceData",
            "type": "bool",
            "format": "/convertConstructorInterfaceData:\\\"{value}\\\"",
            "help": "Convert POJO objects in the constructor data to DTO instances (GenerateConstructorInterface must be enabled, default: false)."
          },
          {
            "name": "ImportRequiredTypes",
            "type": "bool",
            "format": "/importRequiredTypes:\\\"{value}\\\"",
            "help": "Specifies whether required types should be imported (default: true)."
          },
          {
            "name": "UseGetBaseUrlMethod",
            "type": "bool",
            "format": "/useGetBaseUrlMethod:\\\"{value}\\\"",
            "help": "Specifies whether to use the 'getBaseUrl(defaultUrl: string)' method from the base class (default: false)."
          },
          {
            "name": "BaseUrlTokenName",
            "type": "string",
            "format": "/baseUrlTokenName:\\\"{value}\\\"",
            "help": "The token name for injecting the API base URL string (used in the Angular template, default: 'API_BASE_URL')."
          },
          {
            "name": "QueryNullValue",
            "type": "string",
            "format": "/queryNullValue:\\\"{value}\\\"",
            "help": "The null value used for query parameters which are null (default: '')."
          },
          {
            "name": "TemplateDirectory",
            "type": "string",
            "format": "/templateDirectory:\\\"{value}\\\"",
            "help": "The Liquid template directory (experimental)."
          },
          {
            "name": "Input",
            "type": "string",
            "format": "/input:\\\"{value}\\\"",
            "help": "A file path or URL to the data or the JSON data itself."
          },
          {
            "name": "ServiceHost",
            "type": "string",
            "format": "/serviceHost:\\\"{value}\\\"",
            "help": "Overrides the service host of the web document (optional, use '.' to remove the hostname)."
          },
          {
            "name": "ServiceSchemes",
            "type": "List<String>",
            "format": "/serviceSchemes:\\\"{value}\\\"",
            "separator": ",",
            "help": "Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss')."
          },
          {
            "name": "Output",
            "type": "string",
            "format": "/output:\\\"{value}\\\"",
            "help": "The output file path (optional)."
          }
        ]
      }
    }
  ],
  "enumerations": [
    {
      "name": "PropertyNameHandling",
      "values": [
        "Default",
        "CamelCase",
        "SnakeCase"
      ]
    },
    {
      "name": "ReferenceTypeNullHandling",
      "values": [
        "Null",
        "NotNull"
      ]
    },
    {
      "name": "EnumHandling",
      "values": [
        "Integer",
        "String"
      ]
    },
    {
      "name": "OperationGenerationMode",
      "values": [
        "MultipleClientsFromOperationId",
        "MultipleClientsFromPathSegments",
        "SingleClientFromOperationId",
        "SingleClientFromPathSegments"
      ]
    },
    {
      "name": "CSharpClassStyle",
      "values": [
        "Poco",
        "Inpc"
      ]
    },
    {
      "name": "CSharpControllerStyle",
      "values": [
        "Partial",
        "Abstract"
      ]
    },
    {
      "name": "TypeScriptTemplate",
      "values": [
        "JQueryCallbacks",
        "JQueryPromises",
        "AngularJS",
        "Angular",
        "Fetch",
        "Aurelia"
      ]
    },
    {
      "name": "PromiseType",
      "values": [
        "Promise",
        "QPromise"
      ]
    },
    {
      "name": "HttpClass",
      "values": [
        "Http",
        "HttpClient"
      ]
    },
    {
      "name": "InjectionTokenType",
      "values": [
        "OpaqueToken",
        "InjectionToken"
      ]
    },
    {
      "name": "TypeScriptDateTimeType",
      "values": [
        "Date",
        "MomentJS",
        "String",
        "OffsetMomentJS"
      ]
    },
    {
      "name": "TypeScriptNullValue",
      "values": [
        "Null",
        "Undefined"
      ]
    },
    {
      "name": "TypeScriptTypeStyle",
      "values": [
        "Interface",
        "Class",
        "KnockoutClass"
      ]
    }
  ]
}