// Generated from https://github.com/nuke-build/nuke/blob/master/build/specifications/NSwag.json

using JetBrains.Annotations;
using Newtonsoft.Json;
using Nuke.Common;
using Nuke.Common.Execution;
using Nuke.Common.Tooling;
using Nuke.Common.Tools;
using Nuke.Common.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;

namespace Nuke.Common.Tools.NSwag
{
    /// <summary>
    ///   <p>The project combines the functionality of Swashbuckle (Swagger generation) and AutoRest (client generation) in one toolchain. This way a lot of incompatibilites can be avoided and features which are not well described by the Swagger specification or JSON Schema are better supported (e.g. <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance">inheritance</a>, <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Enums">enum</a> and reference handling). The NSwag project heavily uses <a href="http://njsonschema.org/">NJsonSchema for .NET</a> for JSON Schema handling and C#/TypeScript class/interface generation.</p>
    ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagTasks
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public static string NSwagPath =>
            ToolPathResolver.TryGetEnvironmentExecutable("NSWAG_EXE") ??
            GetToolPath();
        public static Action<OutputType, string> NSwagLogger { get; set; } = ProcessTasks.DefaultLogger;
        /// <summary>
        ///   <p>The project combines the functionality of Swashbuckle (Swagger generation) and AutoRest (client generation) in one toolchain. This way a lot of incompatibilites can be avoided and features which are not well described by the Swagger specification or JSON Schema are better supported (e.g. <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance">inheritance</a>, <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Enums">enum</a> and reference handling). The NSwag project heavily uses <a href="http://njsonschema.org/">NJsonSchema for .NET</a> for JSON Schema handling and C#/TypeScript class/interface generation.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> NSwag(string arguments, string workingDirectory = null, IReadOnlyDictionary<string, string> environmentVariables = null, int? timeout = null, bool? logOutput = null, bool? logInvocation = null, Func<string, string> outputFilter = null)
        {
            var process = ProcessTasks.StartProcess(NSwagPath, arguments, workingDirectory, environmentVariables, timeout, logOutput, logInvocation, NSwagLogger, outputFilter);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Prints the toolchain version.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagVersionSettings.NSwagRuntime"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagVersion(NSwagVersionSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagVersionSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Prints the toolchain version.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagVersionSettings.NSwagRuntime"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagVersion(Configure<NSwagVersionSettings> configurator)
        {
            return NSwagVersion(configurator(new NSwagVersionSettings()));
        }
        /// <summary>
        ///   <p>Prints the toolchain version.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagVersionSettings.NSwagRuntime"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagVersionSettings Settings, IReadOnlyCollection<Output> Output)> NSwagVersion(CombinatorialConfigure<NSwagVersionSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagVersion, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List all types for the given assembly and settings.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagListTypesSettings.NSwagRuntime"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagListTypesSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagListTypesSettings.AssemblyConfig"/></li>
        ///     <li><c>/File</c> via <see cref="NSwagListTypesSettings.File"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagListTypesSettings.ReferencePaths"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagListTypesSettings.UseNuGetCache"/></li>
        ///     <li><c>/Variables</c> via <see cref="NSwagListTypesSettings.Variables"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagListTypes(NSwagListTypesSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagListTypesSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List all types for the given assembly and settings.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagListTypesSettings.NSwagRuntime"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagListTypesSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagListTypesSettings.AssemblyConfig"/></li>
        ///     <li><c>/File</c> via <see cref="NSwagListTypesSettings.File"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagListTypesSettings.ReferencePaths"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagListTypesSettings.UseNuGetCache"/></li>
        ///     <li><c>/Variables</c> via <see cref="NSwagListTypesSettings.Variables"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagListTypes(Configure<NSwagListTypesSettings> configurator)
        {
            return NSwagListTypes(configurator(new NSwagListTypesSettings()));
        }
        /// <summary>
        ///   <p>List all types for the given assembly and settings.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagListTypesSettings.NSwagRuntime"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagListTypesSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagListTypesSettings.AssemblyConfig"/></li>
        ///     <li><c>/File</c> via <see cref="NSwagListTypesSettings.File"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagListTypesSettings.ReferencePaths"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagListTypesSettings.UseNuGetCache"/></li>
        ///     <li><c>/Variables</c> via <see cref="NSwagListTypesSettings.Variables"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagListTypesSettings Settings, IReadOnlyCollection<Output> Output)> NSwagListTypes(CombinatorialConfigure<NSwagListTypesSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagListTypes, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List all controllers classes for the given assembly and settings.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagListWebApiControllersSettings.NSwagRuntime"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagListWebApiControllersSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagListWebApiControllersSettings.AssemblyConfig"/></li>
        ///     <li><c>/File</c> via <see cref="NSwagListWebApiControllersSettings.File"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagListWebApiControllersSettings.ReferencePaths"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagListWebApiControllersSettings.UseNuGetCache"/></li>
        ///     <li><c>/Variables</c> via <see cref="NSwagListWebApiControllersSettings.Variables"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagListWebApiControllers(NSwagListWebApiControllersSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagListWebApiControllersSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List all controllers classes for the given assembly and settings.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagListWebApiControllersSettings.NSwagRuntime"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagListWebApiControllersSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagListWebApiControllersSettings.AssemblyConfig"/></li>
        ///     <li><c>/File</c> via <see cref="NSwagListWebApiControllersSettings.File"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagListWebApiControllersSettings.ReferencePaths"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagListWebApiControllersSettings.UseNuGetCache"/></li>
        ///     <li><c>/Variables</c> via <see cref="NSwagListWebApiControllersSettings.Variables"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagListWebApiControllers(Configure<NSwagListWebApiControllersSettings> configurator)
        {
            return NSwagListWebApiControllers(configurator(new NSwagListWebApiControllersSettings()));
        }
        /// <summary>
        ///   <p>List all controllers classes for the given assembly and settings.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagListWebApiControllersSettings.NSwagRuntime"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagListWebApiControllersSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagListWebApiControllersSettings.AssemblyConfig"/></li>
        ///     <li><c>/File</c> via <see cref="NSwagListWebApiControllersSettings.File"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagListWebApiControllersSettings.ReferencePaths"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagListWebApiControllersSettings.UseNuGetCache"/></li>
        ///     <li><c>/Variables</c> via <see cref="NSwagListWebApiControllersSettings.Variables"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagListWebApiControllersSettings Settings, IReadOnlyCollection<Output> Output)> NSwagListWebApiControllers(CombinatorialConfigure<NSwagListWebApiControllersSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagListWebApiControllers, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>The project combines the functionality of Swashbuckle (Swagger generation) and AutoRest (client generation) in one toolchain. This way a lot of incompatibilites can be avoided and features which are not well described by the Swagger specification or JSON Schema are better supported (e.g. <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance">inheritance</a>, <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Enums">enum</a> and reference handling). The NSwag project heavily uses <a href="http://njsonschema.org/">NJsonSchema for .NET</a> for JSON Schema handling and C#/TypeScript class/interface generation.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagTypesToOpenApiSettings.NSwagRuntime"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagTypesToOpenApiSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagTypesToOpenApiSettings.AssemblyConfig"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagTypesToOpenApiSettings.Output"/></li>
        ///     <li><c>/OutputType</c> via <see cref="NSwagTypesToOpenApiSettings.OutputType"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagTypesToOpenApiSettings.ReferencePaths"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagTypesToOpenApiSettings.UseNuGetCache"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagTypesToOpenApi(NSwagTypesToOpenApiSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagTypesToOpenApiSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>The project combines the functionality of Swashbuckle (Swagger generation) and AutoRest (client generation) in one toolchain. This way a lot of incompatibilites can be avoided and features which are not well described by the Swagger specification or JSON Schema are better supported (e.g. <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance">inheritance</a>, <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Enums">enum</a> and reference handling). The NSwag project heavily uses <a href="http://njsonschema.org/">NJsonSchema for .NET</a> for JSON Schema handling and C#/TypeScript class/interface generation.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagTypesToOpenApiSettings.NSwagRuntime"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagTypesToOpenApiSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagTypesToOpenApiSettings.AssemblyConfig"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagTypesToOpenApiSettings.Output"/></li>
        ///     <li><c>/OutputType</c> via <see cref="NSwagTypesToOpenApiSettings.OutputType"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagTypesToOpenApiSettings.ReferencePaths"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagTypesToOpenApiSettings.UseNuGetCache"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagTypesToOpenApi(Configure<NSwagTypesToOpenApiSettings> configurator)
        {
            return NSwagTypesToOpenApi(configurator(new NSwagTypesToOpenApiSettings()));
        }
        /// <summary>
        ///   <p>The project combines the functionality of Swashbuckle (Swagger generation) and AutoRest (client generation) in one toolchain. This way a lot of incompatibilites can be avoided and features which are not well described by the Swagger specification or JSON Schema are better supported (e.g. <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance">inheritance</a>, <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Enums">enum</a> and reference handling). The NSwag project heavily uses <a href="http://njsonschema.org/">NJsonSchema for .NET</a> for JSON Schema handling and C#/TypeScript class/interface generation.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagTypesToOpenApiSettings.NSwagRuntime"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagTypesToOpenApiSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagTypesToOpenApiSettings.AssemblyConfig"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagTypesToOpenApiSettings.Output"/></li>
        ///     <li><c>/OutputType</c> via <see cref="NSwagTypesToOpenApiSettings.OutputType"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagTypesToOpenApiSettings.ReferencePaths"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagTypesToOpenApiSettings.UseNuGetCache"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagTypesToOpenApiSettings Settings, IReadOnlyCollection<Output> Output)> NSwagTypesToOpenApi(CombinatorialConfigure<NSwagTypesToOpenApiSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagTypesToOpenApi, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>The project combines the functionality of Swashbuckle (Swagger generation) and AutoRest (client generation) in one toolchain. This way a lot of incompatibilites can be avoided and features which are not well described by the Swagger specification or JSON Schema are better supported (e.g. <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance">inheritance</a>, <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Enums">enum</a> and reference handling). The NSwag project heavily uses <a href="http://njsonschema.org/">NJsonSchema for .NET</a> for JSON Schema handling and C#/TypeScript class/interface generation.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagTypesToSwaggerSettings.NSwagRuntime"/></li>
        ///     <li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagTypesToSwaggerSettings.AllowReferencesWithProperties"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagTypesToSwaggerSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagTypesToSwaggerSettings.AssemblyConfig"/></li>
        ///     <li><c>/ClassNames</c> via <see cref="NSwagTypesToSwaggerSettings.ClassNames"/></li>
        ///     <li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultEnumHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultEnumHandling"/></li>
        ///     <li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultPropertyNameHandling"/></li>
        ///     <li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultReferenceTypeNullHandling"/></li>
        ///     <li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy"/></li>
        ///     <li><c>/GenerateKnownTypes</c> via <see cref="NSwagTypesToSwaggerSettings.GenerateKnownTypes"/></li>
        ///     <li><c>/GenerateXmlObjects</c> via <see cref="NSwagTypesToSwaggerSettings.GenerateXmlObjects"/></li>
        ///     <li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagTypesToSwaggerSettings.Output"/></li>
        ///     <li><c>/OutputType</c> via <see cref="NSwagTypesToSwaggerSettings.OutputType"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagTypesToSwaggerSettings.ReferencePaths"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagTypesToSwaggerSettings.UseNuGetCache"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagTypesToSwagger(NSwagTypesToSwaggerSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagTypesToSwaggerSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>The project combines the functionality of Swashbuckle (Swagger generation) and AutoRest (client generation) in one toolchain. This way a lot of incompatibilites can be avoided and features which are not well described by the Swagger specification or JSON Schema are better supported (e.g. <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance">inheritance</a>, <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Enums">enum</a> and reference handling). The NSwag project heavily uses <a href="http://njsonschema.org/">NJsonSchema for .NET</a> for JSON Schema handling and C#/TypeScript class/interface generation.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagTypesToSwaggerSettings.NSwagRuntime"/></li>
        ///     <li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagTypesToSwaggerSettings.AllowReferencesWithProperties"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagTypesToSwaggerSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagTypesToSwaggerSettings.AssemblyConfig"/></li>
        ///     <li><c>/ClassNames</c> via <see cref="NSwagTypesToSwaggerSettings.ClassNames"/></li>
        ///     <li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultEnumHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultEnumHandling"/></li>
        ///     <li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultPropertyNameHandling"/></li>
        ///     <li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultReferenceTypeNullHandling"/></li>
        ///     <li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy"/></li>
        ///     <li><c>/GenerateKnownTypes</c> via <see cref="NSwagTypesToSwaggerSettings.GenerateKnownTypes"/></li>
        ///     <li><c>/GenerateXmlObjects</c> via <see cref="NSwagTypesToSwaggerSettings.GenerateXmlObjects"/></li>
        ///     <li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagTypesToSwaggerSettings.Output"/></li>
        ///     <li><c>/OutputType</c> via <see cref="NSwagTypesToSwaggerSettings.OutputType"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagTypesToSwaggerSettings.ReferencePaths"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagTypesToSwaggerSettings.UseNuGetCache"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagTypesToSwagger(Configure<NSwagTypesToSwaggerSettings> configurator)
        {
            return NSwagTypesToSwagger(configurator(new NSwagTypesToSwaggerSettings()));
        }
        /// <summary>
        ///   <p>The project combines the functionality of Swashbuckle (Swagger generation) and AutoRest (client generation) in one toolchain. This way a lot of incompatibilites can be avoided and features which are not well described by the Swagger specification or JSON Schema are better supported (e.g. <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance">inheritance</a>, <a href="https://github.com/NJsonSchema/NJsonSchema/wiki/Enums">enum</a> and reference handling). The NSwag project heavily uses <a href="http://njsonschema.org/">NJsonSchema for .NET</a> for JSON Schema handling and C#/TypeScript class/interface generation.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagTypesToSwaggerSettings.NSwagRuntime"/></li>
        ///     <li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagTypesToSwaggerSettings.AllowReferencesWithProperties"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagTypesToSwaggerSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagTypesToSwaggerSettings.AssemblyConfig"/></li>
        ///     <li><c>/ClassNames</c> via <see cref="NSwagTypesToSwaggerSettings.ClassNames"/></li>
        ///     <li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultEnumHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultEnumHandling"/></li>
        ///     <li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultPropertyNameHandling"/></li>
        ///     <li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagTypesToSwaggerSettings.DefaultReferenceTypeNullHandling"/></li>
        ///     <li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy"/></li>
        ///     <li><c>/GenerateKnownTypes</c> via <see cref="NSwagTypesToSwaggerSettings.GenerateKnownTypes"/></li>
        ///     <li><c>/GenerateXmlObjects</c> via <see cref="NSwagTypesToSwaggerSettings.GenerateXmlObjects"/></li>
        ///     <li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagTypesToSwaggerSettings.Output"/></li>
        ///     <li><c>/OutputType</c> via <see cref="NSwagTypesToSwaggerSettings.OutputType"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagTypesToSwaggerSettings.ReferencePaths"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagTypesToSwaggerSettings.UseNuGetCache"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagTypesToSwaggerSettings Settings, IReadOnlyCollection<Output> Output)> NSwagTypesToSwagger(CombinatorialConfigure<NSwagTypesToSwaggerSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagTypesToSwagger, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Generates a Swagger/OpenAPI specification for a controller or controlles contained in a .NET Web API assembly.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagWebApiToOpenApiSettings.NSwagRuntime"/></li>
        ///     <li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters"/></li>
        ///     <li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties"/></li>
        ///     <li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagWebApiToOpenApiSettings.AspNetCoreEnvironment"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagWebApiToOpenApiSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagWebApiToOpenApiSettings.AssemblyConfig"/></li>
        ///     <li><c>/ContractResolver</c> via <see cref="NSwagWebApiToOpenApiSettings.ContractResolver"/></li>
        ///     <li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagWebApiToOpenApiSettings.CreateWebHostBuilderMethod"/></li>
        ///     <li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultEnumHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultEnumHandling"/></li>
        ///     <li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultPropertyNameHandling"/></li>
        ///     <li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/></li>
        ///     <li><c>/DocumentName</c> via <see cref="NSwagWebApiToOpenApiSettings.DocumentName"/></li>
        ///     <li><c>/DocumentProcessors</c> via <see cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/></li>
        ///     <li><c>/DocumentTemplate</c> via <see cref="NSwagWebApiToOpenApiSettings.DocumentTemplate"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy"/></li>
        ///     <li><c>/GenerateAbstractProperties</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractProperties"/></li>
        ///     <li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas"/></li>
        ///     <li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription"/></li>
        ///     <li><c>/GenerateKnownTypes</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateKnownTypes"/></li>
        ///     <li><c>/GenerateXmlObjects</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateXmlObjects"/></li>
        ///     <li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties"/></li>
        ///     <li><c>/InfoDescription</c> via <see cref="NSwagWebApiToOpenApiSettings.InfoDescription"/></li>
        ///     <li><c>/InfoTitle</c> via <see cref="NSwagWebApiToOpenApiSettings.InfoTitle"/></li>
        ///     <li><c>/InfoVersion</c> via <see cref="NSwagWebApiToOpenApiSettings.InfoVersion"/></li>
        ///     <li><c>/OperationProcessors</c> via <see cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagWebApiToOpenApiSettings.Output"/></li>
        ///     <li><c>/OutputType</c> via <see cref="NSwagWebApiToOpenApiSettings.OutputType"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/></li>
        ///     <li><c>/SchemaNameGenerator</c> via <see cref="NSwagWebApiToOpenApiSettings.SchemaNameGenerator"/></li>
        ///     <li><c>/SerializerSettings</c> via <see cref="NSwagWebApiToOpenApiSettings.SerializerSettings"/></li>
        ///     <li><c>/ServiceBasePath</c> via <see cref="NSwagWebApiToOpenApiSettings.ServiceBasePath"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagWebApiToOpenApiSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/></li>
        ///     <li><c>/Startup</c> via <see cref="NSwagWebApiToOpenApiSettings.Startup"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagWebApiToOpenApiSettings.TypeNameGenerator"/></li>
        ///     <li><c>/UseDocumentProvider</c> via <see cref="NSwagWebApiToOpenApiSettings.UseDocumentProvider"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagWebApiToOpenApiSettings.UseNuGetCache"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagWebApiToOpenApi(NSwagWebApiToOpenApiSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagWebApiToOpenApiSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Generates a Swagger/OpenAPI specification for a controller or controlles contained in a .NET Web API assembly.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagWebApiToOpenApiSettings.NSwagRuntime"/></li>
        ///     <li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters"/></li>
        ///     <li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties"/></li>
        ///     <li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagWebApiToOpenApiSettings.AspNetCoreEnvironment"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagWebApiToOpenApiSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagWebApiToOpenApiSettings.AssemblyConfig"/></li>
        ///     <li><c>/ContractResolver</c> via <see cref="NSwagWebApiToOpenApiSettings.ContractResolver"/></li>
        ///     <li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagWebApiToOpenApiSettings.CreateWebHostBuilderMethod"/></li>
        ///     <li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultEnumHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultEnumHandling"/></li>
        ///     <li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultPropertyNameHandling"/></li>
        ///     <li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/></li>
        ///     <li><c>/DocumentName</c> via <see cref="NSwagWebApiToOpenApiSettings.DocumentName"/></li>
        ///     <li><c>/DocumentProcessors</c> via <see cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/></li>
        ///     <li><c>/DocumentTemplate</c> via <see cref="NSwagWebApiToOpenApiSettings.DocumentTemplate"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy"/></li>
        ///     <li><c>/GenerateAbstractProperties</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractProperties"/></li>
        ///     <li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas"/></li>
        ///     <li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription"/></li>
        ///     <li><c>/GenerateKnownTypes</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateKnownTypes"/></li>
        ///     <li><c>/GenerateXmlObjects</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateXmlObjects"/></li>
        ///     <li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties"/></li>
        ///     <li><c>/InfoDescription</c> via <see cref="NSwagWebApiToOpenApiSettings.InfoDescription"/></li>
        ///     <li><c>/InfoTitle</c> via <see cref="NSwagWebApiToOpenApiSettings.InfoTitle"/></li>
        ///     <li><c>/InfoVersion</c> via <see cref="NSwagWebApiToOpenApiSettings.InfoVersion"/></li>
        ///     <li><c>/OperationProcessors</c> via <see cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagWebApiToOpenApiSettings.Output"/></li>
        ///     <li><c>/OutputType</c> via <see cref="NSwagWebApiToOpenApiSettings.OutputType"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/></li>
        ///     <li><c>/SchemaNameGenerator</c> via <see cref="NSwagWebApiToOpenApiSettings.SchemaNameGenerator"/></li>
        ///     <li><c>/SerializerSettings</c> via <see cref="NSwagWebApiToOpenApiSettings.SerializerSettings"/></li>
        ///     <li><c>/ServiceBasePath</c> via <see cref="NSwagWebApiToOpenApiSettings.ServiceBasePath"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagWebApiToOpenApiSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/></li>
        ///     <li><c>/Startup</c> via <see cref="NSwagWebApiToOpenApiSettings.Startup"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagWebApiToOpenApiSettings.TypeNameGenerator"/></li>
        ///     <li><c>/UseDocumentProvider</c> via <see cref="NSwagWebApiToOpenApiSettings.UseDocumentProvider"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagWebApiToOpenApiSettings.UseNuGetCache"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagWebApiToOpenApi(Configure<NSwagWebApiToOpenApiSettings> configurator)
        {
            return NSwagWebApiToOpenApi(configurator(new NSwagWebApiToOpenApiSettings()));
        }
        /// <summary>
        ///   <p>Generates a Swagger/OpenAPI specification for a controller or controlles contained in a .NET Web API assembly.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagWebApiToOpenApiSettings.NSwagRuntime"/></li>
        ///     <li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters"/></li>
        ///     <li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties"/></li>
        ///     <li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagWebApiToOpenApiSettings.AspNetCoreEnvironment"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagWebApiToOpenApiSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagWebApiToOpenApiSettings.AssemblyConfig"/></li>
        ///     <li><c>/ContractResolver</c> via <see cref="NSwagWebApiToOpenApiSettings.ContractResolver"/></li>
        ///     <li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagWebApiToOpenApiSettings.CreateWebHostBuilderMethod"/></li>
        ///     <li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultEnumHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultEnumHandling"/></li>
        ///     <li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultPropertyNameHandling"/></li>
        ///     <li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/></li>
        ///     <li><c>/DocumentName</c> via <see cref="NSwagWebApiToOpenApiSettings.DocumentName"/></li>
        ///     <li><c>/DocumentProcessors</c> via <see cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/></li>
        ///     <li><c>/DocumentTemplate</c> via <see cref="NSwagWebApiToOpenApiSettings.DocumentTemplate"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy"/></li>
        ///     <li><c>/GenerateAbstractProperties</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractProperties"/></li>
        ///     <li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas"/></li>
        ///     <li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription"/></li>
        ///     <li><c>/GenerateKnownTypes</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateKnownTypes"/></li>
        ///     <li><c>/GenerateXmlObjects</c> via <see cref="NSwagWebApiToOpenApiSettings.GenerateXmlObjects"/></li>
        ///     <li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties"/></li>
        ///     <li><c>/InfoDescription</c> via <see cref="NSwagWebApiToOpenApiSettings.InfoDescription"/></li>
        ///     <li><c>/InfoTitle</c> via <see cref="NSwagWebApiToOpenApiSettings.InfoTitle"/></li>
        ///     <li><c>/InfoVersion</c> via <see cref="NSwagWebApiToOpenApiSettings.InfoVersion"/></li>
        ///     <li><c>/OperationProcessors</c> via <see cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagWebApiToOpenApiSettings.Output"/></li>
        ///     <li><c>/OutputType</c> via <see cref="NSwagWebApiToOpenApiSettings.OutputType"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/></li>
        ///     <li><c>/SchemaNameGenerator</c> via <see cref="NSwagWebApiToOpenApiSettings.SchemaNameGenerator"/></li>
        ///     <li><c>/SerializerSettings</c> via <see cref="NSwagWebApiToOpenApiSettings.SerializerSettings"/></li>
        ///     <li><c>/ServiceBasePath</c> via <see cref="NSwagWebApiToOpenApiSettings.ServiceBasePath"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagWebApiToOpenApiSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/></li>
        ///     <li><c>/Startup</c> via <see cref="NSwagWebApiToOpenApiSettings.Startup"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagWebApiToOpenApiSettings.TypeNameGenerator"/></li>
        ///     <li><c>/UseDocumentProvider</c> via <see cref="NSwagWebApiToOpenApiSettings.UseDocumentProvider"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagWebApiToOpenApiSettings.UseNuGetCache"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagWebApiToOpenApiSettings Settings, IReadOnlyCollection<Output> Output)> NSwagWebApiToOpenApi(CombinatorialConfigure<NSwagWebApiToOpenApiSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagWebApiToOpenApi, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Generates a Swagger/OpenAPI specification for a controller or controlles contained in a .NET Web API assembly (obsolete: use webapi2openapi instead).</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagWebApiToSwaggerSettings.NSwagRuntime"/></li>
        ///     <li><c>/AddMissingPathParameters</c> via <see cref="NSwagWebApiToSwaggerSettings.AddMissingPathParameters"/></li>
        ///     <li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters"/></li>
        ///     <li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties"/></li>
        ///     <li><c>/AspNetCore</c> via <see cref="NSwagWebApiToSwaggerSettings.AspNetCore"/></li>
        ///     <li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagWebApiToSwaggerSettings.AspNetCoreEnvironment"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagWebApiToSwaggerSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagWebApiToSwaggerSettings.AssemblyConfig"/></li>
        ///     <li><c>/ContractResolver</c> via <see cref="NSwagWebApiToSwaggerSettings.ContractResolver"/></li>
        ///     <li><c>/Controller</c> via <see cref="NSwagWebApiToSwaggerSettings.Controller"/></li>
        ///     <li><c>/Controllers</c> via <see cref="NSwagWebApiToSwaggerSettings.Controllers"/></li>
        ///     <li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagWebApiToSwaggerSettings.CreateWebHostBuilderMethod"/></li>
        ///     <li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultEnumHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultEnumHandling"/></li>
        ///     <li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultPropertyNameHandling"/></li>
        ///     <li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultUrlTemplate</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultUrlTemplate"/></li>
        ///     <li><c>/DocumentName</c> via <see cref="NSwagWebApiToSwaggerSettings.DocumentName"/></li>
        ///     <li><c>/DocumentProcessors</c> via <see cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/></li>
        ///     <li><c>/DocumentTemplate</c> via <see cref="NSwagWebApiToSwaggerSettings.DocumentTemplate"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy"/></li>
        ///     <li><c>/GenerateAbstractProperties</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractProperties"/></li>
        ///     <li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas"/></li>
        ///     <li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription"/></li>
        ///     <li><c>/GenerateKnownTypes</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateKnownTypes"/></li>
        ///     <li><c>/GenerateXmlObjects</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateXmlObjects"/></li>
        ///     <li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties"/></li>
        ///     <li><c>/IncludedVersions</c> via <see cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/></li>
        ///     <li><c>/InfoDescription</c> via <see cref="NSwagWebApiToSwaggerSettings.InfoDescription"/></li>
        ///     <li><c>/InfoTitle</c> via <see cref="NSwagWebApiToSwaggerSettings.InfoTitle"/></li>
        ///     <li><c>/InfoVersion</c> via <see cref="NSwagWebApiToSwaggerSettings.InfoVersion"/></li>
        ///     <li><c>/OperationProcessors</c> via <see cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagWebApiToSwaggerSettings.Output"/></li>
        ///     <li><c>/OutputType</c> via <see cref="NSwagWebApiToSwaggerSettings.OutputType"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/></li>
        ///     <li><c>/ResolveJsonOptions</c> via <see cref="NSwagWebApiToSwaggerSettings.ResolveJsonOptions"/></li>
        ///     <li><c>/SchemaNameGenerator</c> via <see cref="NSwagWebApiToSwaggerSettings.SchemaNameGenerator"/></li>
        ///     <li><c>/SerializerSettings</c> via <see cref="NSwagWebApiToSwaggerSettings.SerializerSettings"/></li>
        ///     <li><c>/ServiceBasePath</c> via <see cref="NSwagWebApiToSwaggerSettings.ServiceBasePath"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagWebApiToSwaggerSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/></li>
        ///     <li><c>/Startup</c> via <see cref="NSwagWebApiToSwaggerSettings.Startup"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagWebApiToSwaggerSettings.TypeNameGenerator"/></li>
        ///     <li><c>/UseDocumentProvider</c> via <see cref="NSwagWebApiToSwaggerSettings.UseDocumentProvider"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagWebApiToSwaggerSettings.UseNuGetCache"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagWebApiToSwagger(NSwagWebApiToSwaggerSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagWebApiToSwaggerSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Generates a Swagger/OpenAPI specification for a controller or controlles contained in a .NET Web API assembly (obsolete: use webapi2openapi instead).</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagWebApiToSwaggerSettings.NSwagRuntime"/></li>
        ///     <li><c>/AddMissingPathParameters</c> via <see cref="NSwagWebApiToSwaggerSettings.AddMissingPathParameters"/></li>
        ///     <li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters"/></li>
        ///     <li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties"/></li>
        ///     <li><c>/AspNetCore</c> via <see cref="NSwagWebApiToSwaggerSettings.AspNetCore"/></li>
        ///     <li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagWebApiToSwaggerSettings.AspNetCoreEnvironment"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagWebApiToSwaggerSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagWebApiToSwaggerSettings.AssemblyConfig"/></li>
        ///     <li><c>/ContractResolver</c> via <see cref="NSwagWebApiToSwaggerSettings.ContractResolver"/></li>
        ///     <li><c>/Controller</c> via <see cref="NSwagWebApiToSwaggerSettings.Controller"/></li>
        ///     <li><c>/Controllers</c> via <see cref="NSwagWebApiToSwaggerSettings.Controllers"/></li>
        ///     <li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagWebApiToSwaggerSettings.CreateWebHostBuilderMethod"/></li>
        ///     <li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultEnumHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultEnumHandling"/></li>
        ///     <li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultPropertyNameHandling"/></li>
        ///     <li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultUrlTemplate</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultUrlTemplate"/></li>
        ///     <li><c>/DocumentName</c> via <see cref="NSwagWebApiToSwaggerSettings.DocumentName"/></li>
        ///     <li><c>/DocumentProcessors</c> via <see cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/></li>
        ///     <li><c>/DocumentTemplate</c> via <see cref="NSwagWebApiToSwaggerSettings.DocumentTemplate"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy"/></li>
        ///     <li><c>/GenerateAbstractProperties</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractProperties"/></li>
        ///     <li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas"/></li>
        ///     <li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription"/></li>
        ///     <li><c>/GenerateKnownTypes</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateKnownTypes"/></li>
        ///     <li><c>/GenerateXmlObjects</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateXmlObjects"/></li>
        ///     <li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties"/></li>
        ///     <li><c>/IncludedVersions</c> via <see cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/></li>
        ///     <li><c>/InfoDescription</c> via <see cref="NSwagWebApiToSwaggerSettings.InfoDescription"/></li>
        ///     <li><c>/InfoTitle</c> via <see cref="NSwagWebApiToSwaggerSettings.InfoTitle"/></li>
        ///     <li><c>/InfoVersion</c> via <see cref="NSwagWebApiToSwaggerSettings.InfoVersion"/></li>
        ///     <li><c>/OperationProcessors</c> via <see cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagWebApiToSwaggerSettings.Output"/></li>
        ///     <li><c>/OutputType</c> via <see cref="NSwagWebApiToSwaggerSettings.OutputType"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/></li>
        ///     <li><c>/ResolveJsonOptions</c> via <see cref="NSwagWebApiToSwaggerSettings.ResolveJsonOptions"/></li>
        ///     <li><c>/SchemaNameGenerator</c> via <see cref="NSwagWebApiToSwaggerSettings.SchemaNameGenerator"/></li>
        ///     <li><c>/SerializerSettings</c> via <see cref="NSwagWebApiToSwaggerSettings.SerializerSettings"/></li>
        ///     <li><c>/ServiceBasePath</c> via <see cref="NSwagWebApiToSwaggerSettings.ServiceBasePath"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagWebApiToSwaggerSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/></li>
        ///     <li><c>/Startup</c> via <see cref="NSwagWebApiToSwaggerSettings.Startup"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagWebApiToSwaggerSettings.TypeNameGenerator"/></li>
        ///     <li><c>/UseDocumentProvider</c> via <see cref="NSwagWebApiToSwaggerSettings.UseDocumentProvider"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagWebApiToSwaggerSettings.UseNuGetCache"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagWebApiToSwagger(Configure<NSwagWebApiToSwaggerSettings> configurator)
        {
            return NSwagWebApiToSwagger(configurator(new NSwagWebApiToSwaggerSettings()));
        }
        /// <summary>
        ///   <p>Generates a Swagger/OpenAPI specification for a controller or controlles contained in a .NET Web API assembly (obsolete: use webapi2openapi instead).</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagWebApiToSwaggerSettings.NSwagRuntime"/></li>
        ///     <li><c>/AddMissingPathParameters</c> via <see cref="NSwagWebApiToSwaggerSettings.AddMissingPathParameters"/></li>
        ///     <li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters"/></li>
        ///     <li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties"/></li>
        ///     <li><c>/AspNetCore</c> via <see cref="NSwagWebApiToSwaggerSettings.AspNetCore"/></li>
        ///     <li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagWebApiToSwaggerSettings.AspNetCoreEnvironment"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagWebApiToSwaggerSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagWebApiToSwaggerSettings.AssemblyConfig"/></li>
        ///     <li><c>/ContractResolver</c> via <see cref="NSwagWebApiToSwaggerSettings.ContractResolver"/></li>
        ///     <li><c>/Controller</c> via <see cref="NSwagWebApiToSwaggerSettings.Controller"/></li>
        ///     <li><c>/Controllers</c> via <see cref="NSwagWebApiToSwaggerSettings.Controllers"/></li>
        ///     <li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagWebApiToSwaggerSettings.CreateWebHostBuilderMethod"/></li>
        ///     <li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultEnumHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultEnumHandling"/></li>
        ///     <li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultPropertyNameHandling"/></li>
        ///     <li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultUrlTemplate</c> via <see cref="NSwagWebApiToSwaggerSettings.DefaultUrlTemplate"/></li>
        ///     <li><c>/DocumentName</c> via <see cref="NSwagWebApiToSwaggerSettings.DocumentName"/></li>
        ///     <li><c>/DocumentProcessors</c> via <see cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/></li>
        ///     <li><c>/DocumentTemplate</c> via <see cref="NSwagWebApiToSwaggerSettings.DocumentTemplate"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy"/></li>
        ///     <li><c>/GenerateAbstractProperties</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractProperties"/></li>
        ///     <li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas"/></li>
        ///     <li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription"/></li>
        ///     <li><c>/GenerateKnownTypes</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateKnownTypes"/></li>
        ///     <li><c>/GenerateXmlObjects</c> via <see cref="NSwagWebApiToSwaggerSettings.GenerateXmlObjects"/></li>
        ///     <li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties"/></li>
        ///     <li><c>/IncludedVersions</c> via <see cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/></li>
        ///     <li><c>/InfoDescription</c> via <see cref="NSwagWebApiToSwaggerSettings.InfoDescription"/></li>
        ///     <li><c>/InfoTitle</c> via <see cref="NSwagWebApiToSwaggerSettings.InfoTitle"/></li>
        ///     <li><c>/InfoVersion</c> via <see cref="NSwagWebApiToSwaggerSettings.InfoVersion"/></li>
        ///     <li><c>/OperationProcessors</c> via <see cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagWebApiToSwaggerSettings.Output"/></li>
        ///     <li><c>/OutputType</c> via <see cref="NSwagWebApiToSwaggerSettings.OutputType"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/></li>
        ///     <li><c>/ResolveJsonOptions</c> via <see cref="NSwagWebApiToSwaggerSettings.ResolveJsonOptions"/></li>
        ///     <li><c>/SchemaNameGenerator</c> via <see cref="NSwagWebApiToSwaggerSettings.SchemaNameGenerator"/></li>
        ///     <li><c>/SerializerSettings</c> via <see cref="NSwagWebApiToSwaggerSettings.SerializerSettings"/></li>
        ///     <li><c>/ServiceBasePath</c> via <see cref="NSwagWebApiToSwaggerSettings.ServiceBasePath"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagWebApiToSwaggerSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/></li>
        ///     <li><c>/Startup</c> via <see cref="NSwagWebApiToSwaggerSettings.Startup"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagWebApiToSwaggerSettings.TypeNameGenerator"/></li>
        ///     <li><c>/UseDocumentProvider</c> via <see cref="NSwagWebApiToSwaggerSettings.UseDocumentProvider"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagWebApiToSwaggerSettings.UseNuGetCache"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagWebApiToSwaggerSettings Settings, IReadOnlyCollection<Output> Output)> NSwagWebApiToSwagger(CombinatorialConfigure<NSwagWebApiToSwaggerSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagWebApiToSwagger, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Generates a Swagger specification ASP.NET Core Mvc application using ApiExplorer.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.NSwagRuntime"/></li>
        ///     <li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters"/></li>
        ///     <li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties"/></li>
        ///     <li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AspNetCoreEnvironment"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AssemblyConfig"/></li>
        ///     <li><c>/ContractResolver</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ContractResolver"/></li>
        ///     <li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.CreateWebHostBuilderMethod"/></li>
        ///     <li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultEnumHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultEnumHandling"/></li>
        ///     <li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultPropertyNameHandling"/></li>
        ///     <li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/></li>
        ///     <li><c>/DocumentName</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentName"/></li>
        ///     <li><c>/DocumentProcessors</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/></li>
        ///     <li><c>/DocumentTemplate</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentTemplate"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy"/></li>
        ///     <li><c>/GenerateAbstractProperties</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties"/></li>
        ///     <li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas"/></li>
        ///     <li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription"/></li>
        ///     <li><c>/GenerateKnownTypes</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes"/></li>
        ///     <li><c>/GenerateXmlObjects</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects"/></li>
        ///     <li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties"/></li>
        ///     <li><c>/InfoDescription</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.InfoDescription"/></li>
        ///     <li><c>/InfoTitle</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.InfoTitle"/></li>
        ///     <li><c>/InfoVersion</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.InfoVersion"/></li>
        ///     <li><c>/OperationProcessors</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.Output"/></li>
        ///     <li><c>/OutputType</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.OutputType"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/></li>
        ///     <li><c>/SchemaNameGenerator</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.SchemaNameGenerator"/></li>
        ///     <li><c>/SerializerSettings</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.SerializerSettings"/></li>
        ///     <li><c>/ServiceBasePath</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceBasePath"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/></li>
        ///     <li><c>/Startup</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.Startup"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.TypeNameGenerator"/></li>
        ///     <li><c>/UseDocumentProvider</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.UseNuGetCache"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagAspNetCoreToOpenApi(NSwagAspNetCoreToOpenApiSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagAspNetCoreToOpenApiSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Generates a Swagger specification ASP.NET Core Mvc application using ApiExplorer.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.NSwagRuntime"/></li>
        ///     <li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters"/></li>
        ///     <li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties"/></li>
        ///     <li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AspNetCoreEnvironment"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AssemblyConfig"/></li>
        ///     <li><c>/ContractResolver</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ContractResolver"/></li>
        ///     <li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.CreateWebHostBuilderMethod"/></li>
        ///     <li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultEnumHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultEnumHandling"/></li>
        ///     <li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultPropertyNameHandling"/></li>
        ///     <li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/></li>
        ///     <li><c>/DocumentName</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentName"/></li>
        ///     <li><c>/DocumentProcessors</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/></li>
        ///     <li><c>/DocumentTemplate</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentTemplate"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy"/></li>
        ///     <li><c>/GenerateAbstractProperties</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties"/></li>
        ///     <li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas"/></li>
        ///     <li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription"/></li>
        ///     <li><c>/GenerateKnownTypes</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes"/></li>
        ///     <li><c>/GenerateXmlObjects</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects"/></li>
        ///     <li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties"/></li>
        ///     <li><c>/InfoDescription</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.InfoDescription"/></li>
        ///     <li><c>/InfoTitle</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.InfoTitle"/></li>
        ///     <li><c>/InfoVersion</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.InfoVersion"/></li>
        ///     <li><c>/OperationProcessors</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.Output"/></li>
        ///     <li><c>/OutputType</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.OutputType"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/></li>
        ///     <li><c>/SchemaNameGenerator</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.SchemaNameGenerator"/></li>
        ///     <li><c>/SerializerSettings</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.SerializerSettings"/></li>
        ///     <li><c>/ServiceBasePath</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceBasePath"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/></li>
        ///     <li><c>/Startup</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.Startup"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.TypeNameGenerator"/></li>
        ///     <li><c>/UseDocumentProvider</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.UseNuGetCache"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagAspNetCoreToOpenApi(Configure<NSwagAspNetCoreToOpenApiSettings> configurator)
        {
            return NSwagAspNetCoreToOpenApi(configurator(new NSwagAspNetCoreToOpenApiSettings()));
        }
        /// <summary>
        ///   <p>Generates a Swagger specification ASP.NET Core Mvc application using ApiExplorer.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.NSwagRuntime"/></li>
        ///     <li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters"/></li>
        ///     <li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties"/></li>
        ///     <li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AspNetCoreEnvironment"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.AssemblyConfig"/></li>
        ///     <li><c>/ContractResolver</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ContractResolver"/></li>
        ///     <li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.CreateWebHostBuilderMethod"/></li>
        ///     <li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultEnumHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultEnumHandling"/></li>
        ///     <li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultPropertyNameHandling"/></li>
        ///     <li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/></li>
        ///     <li><c>/DocumentName</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentName"/></li>
        ///     <li><c>/DocumentProcessors</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/></li>
        ///     <li><c>/DocumentTemplate</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentTemplate"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy"/></li>
        ///     <li><c>/GenerateAbstractProperties</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties"/></li>
        ///     <li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas"/></li>
        ///     <li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription"/></li>
        ///     <li><c>/GenerateKnownTypes</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes"/></li>
        ///     <li><c>/GenerateXmlObjects</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects"/></li>
        ///     <li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties"/></li>
        ///     <li><c>/InfoDescription</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.InfoDescription"/></li>
        ///     <li><c>/InfoTitle</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.InfoTitle"/></li>
        ///     <li><c>/InfoVersion</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.InfoVersion"/></li>
        ///     <li><c>/OperationProcessors</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.Output"/></li>
        ///     <li><c>/OutputType</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.OutputType"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/></li>
        ///     <li><c>/SchemaNameGenerator</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.SchemaNameGenerator"/></li>
        ///     <li><c>/SerializerSettings</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.SerializerSettings"/></li>
        ///     <li><c>/ServiceBasePath</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceBasePath"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/></li>
        ///     <li><c>/Startup</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.Startup"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.TypeNameGenerator"/></li>
        ///     <li><c>/UseDocumentProvider</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagAspNetCoreToOpenApiSettings.UseNuGetCache"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagAspNetCoreToOpenApiSettings Settings, IReadOnlyCollection<Output> Output)> NSwagAspNetCoreToOpenApi(CombinatorialConfigure<NSwagAspNetCoreToOpenApiSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagAspNetCoreToOpenApi, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Generates a Swagger specification ASP.NET Core Mvc application using ApiExplorer (obsolete: use aspnetcore2openapi instead).</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.NSwagRuntime"/></li>
        ///     <li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters"/></li>
        ///     <li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties"/></li>
        ///     <li><c>/ApiGroupNames</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/></li>
        ///     <li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AspNetCoreEnvironment"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AssemblyConfig"/></li>
        ///     <li><c>/Configuration</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Configuration"/></li>
        ///     <li><c>/ContractResolver</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ContractResolver"/></li>
        ///     <li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.CreateWebHostBuilderMethod"/></li>
        ///     <li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultEnumHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultEnumHandling"/></li>
        ///     <li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultPropertyNameHandling"/></li>
        ///     <li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/></li>
        ///     <li><c>/DocumentName</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentName"/></li>
        ///     <li><c>/DocumentProcessors</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/></li>
        ///     <li><c>/DocumentTemplate</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentTemplate"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy"/></li>
        ///     <li><c>/GenerateAbstractProperties</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties"/></li>
        ///     <li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas"/></li>
        ///     <li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription"/></li>
        ///     <li><c>/GenerateKnownTypes</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes"/></li>
        ///     <li><c>/GenerateXmlObjects</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects"/></li>
        ///     <li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties"/></li>
        ///     <li><c>/InfoDescription</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.InfoDescription"/></li>
        ///     <li><c>/InfoTitle</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.InfoTitle"/></li>
        ///     <li><c>/InfoVersion</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.InfoVersion"/></li>
        ///     <li><c>/MSBuildProjectExtensionsPath</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.MSBuildProjectExtensionsPath"/></li>
        ///     <li><c>/NoBuild</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.NoBuild"/></li>
        ///     <li><c>/OperationProcessors</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Output"/></li>
        ///     <li><c>/OutputType</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.OutputType"/></li>
        ///     <li><c>/Project</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Project"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/></li>
        ///     <li><c>/RequireParametersWithoutDefault</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault"/></li>
        ///     <li><c>/Runtime</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Runtime"/></li>
        ///     <li><c>/SchemaNameGenerator</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.SchemaNameGenerator"/></li>
        ///     <li><c>/SerializerSettings</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.SerializerSettings"/></li>
        ///     <li><c>/ServiceBasePath</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceBasePath"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/></li>
        ///     <li><c>/Startup</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Startup"/></li>
        ///     <li><c>/TargetFramework</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.TargetFramework"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.TypeNameGenerator"/></li>
        ///     <li><c>/UseDocumentProvider</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.UseNuGetCache"/></li>
        ///     <li><c>/Verbose</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Verbose"/></li>
        ///     <li><c>/WorkingDirectory</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.NSwagWorkingDirectory"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagAspNetCoreToSwagger(NSwagAspNetCoreToSwaggerSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagAspNetCoreToSwaggerSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Generates a Swagger specification ASP.NET Core Mvc application using ApiExplorer (obsolete: use aspnetcore2openapi instead).</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.NSwagRuntime"/></li>
        ///     <li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters"/></li>
        ///     <li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties"/></li>
        ///     <li><c>/ApiGroupNames</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/></li>
        ///     <li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AspNetCoreEnvironment"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AssemblyConfig"/></li>
        ///     <li><c>/Configuration</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Configuration"/></li>
        ///     <li><c>/ContractResolver</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ContractResolver"/></li>
        ///     <li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.CreateWebHostBuilderMethod"/></li>
        ///     <li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultEnumHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultEnumHandling"/></li>
        ///     <li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultPropertyNameHandling"/></li>
        ///     <li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/></li>
        ///     <li><c>/DocumentName</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentName"/></li>
        ///     <li><c>/DocumentProcessors</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/></li>
        ///     <li><c>/DocumentTemplate</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentTemplate"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy"/></li>
        ///     <li><c>/GenerateAbstractProperties</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties"/></li>
        ///     <li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas"/></li>
        ///     <li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription"/></li>
        ///     <li><c>/GenerateKnownTypes</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes"/></li>
        ///     <li><c>/GenerateXmlObjects</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects"/></li>
        ///     <li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties"/></li>
        ///     <li><c>/InfoDescription</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.InfoDescription"/></li>
        ///     <li><c>/InfoTitle</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.InfoTitle"/></li>
        ///     <li><c>/InfoVersion</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.InfoVersion"/></li>
        ///     <li><c>/MSBuildProjectExtensionsPath</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.MSBuildProjectExtensionsPath"/></li>
        ///     <li><c>/NoBuild</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.NoBuild"/></li>
        ///     <li><c>/OperationProcessors</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Output"/></li>
        ///     <li><c>/OutputType</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.OutputType"/></li>
        ///     <li><c>/Project</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Project"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/></li>
        ///     <li><c>/RequireParametersWithoutDefault</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault"/></li>
        ///     <li><c>/Runtime</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Runtime"/></li>
        ///     <li><c>/SchemaNameGenerator</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.SchemaNameGenerator"/></li>
        ///     <li><c>/SerializerSettings</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.SerializerSettings"/></li>
        ///     <li><c>/ServiceBasePath</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceBasePath"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/></li>
        ///     <li><c>/Startup</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Startup"/></li>
        ///     <li><c>/TargetFramework</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.TargetFramework"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.TypeNameGenerator"/></li>
        ///     <li><c>/UseDocumentProvider</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.UseNuGetCache"/></li>
        ///     <li><c>/Verbose</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Verbose"/></li>
        ///     <li><c>/WorkingDirectory</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.NSwagWorkingDirectory"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagAspNetCoreToSwagger(Configure<NSwagAspNetCoreToSwaggerSettings> configurator)
        {
            return NSwagAspNetCoreToSwagger(configurator(new NSwagAspNetCoreToSwaggerSettings()));
        }
        /// <summary>
        ///   <p>Generates a Swagger specification ASP.NET Core Mvc application using ApiExplorer (obsolete: use aspnetcore2openapi instead).</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.NSwagRuntime"/></li>
        ///     <li><c>/AllowNullableBodyParameters</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters"/></li>
        ///     <li><c>/AllowReferencesWithProperties</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties"/></li>
        ///     <li><c>/ApiGroupNames</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/></li>
        ///     <li><c>/AspNetCoreEnvironment</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AspNetCoreEnvironment"/></li>
        ///     <li><c>/Assembly</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/></li>
        ///     <li><c>/AssemblyConfig</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.AssemblyConfig"/></li>
        ///     <li><c>/Configuration</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Configuration"/></li>
        ///     <li><c>/ContractResolver</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ContractResolver"/></li>
        ///     <li><c>/CreateWebHostBuilderMethod</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.CreateWebHostBuilderMethod"/></li>
        ///     <li><c>/DefaultDictionaryValueReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultEnumHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultEnumHandling"/></li>
        ///     <li><c>/DefaultPropertyNameHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultPropertyNameHandling"/></li>
        ///     <li><c>/DefaultReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultReferenceTypeNullHandling"/></li>
        ///     <li><c>/DefaultResponseReferenceTypeNullHandling</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/></li>
        ///     <li><c>/DocumentName</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentName"/></li>
        ///     <li><c>/DocumentProcessors</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/></li>
        ///     <li><c>/DocumentTemplate</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentTemplate"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/FlattenInheritanceHierarchy</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy"/></li>
        ///     <li><c>/GenerateAbstractProperties</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties"/></li>
        ///     <li><c>/GenerateAbstractSchemas</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas"/></li>
        ///     <li><c>/GenerateEnumMappingDescription</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription"/></li>
        ///     <li><c>/GenerateKnownTypes</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes"/></li>
        ///     <li><c>/GenerateXmlObjects</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects"/></li>
        ///     <li><c>/IgnoreObsoleteProperties</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties"/></li>
        ///     <li><c>/InfoDescription</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.InfoDescription"/></li>
        ///     <li><c>/InfoTitle</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.InfoTitle"/></li>
        ///     <li><c>/InfoVersion</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.InfoVersion"/></li>
        ///     <li><c>/MSBuildProjectExtensionsPath</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.MSBuildProjectExtensionsPath"/></li>
        ///     <li><c>/NoBuild</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.NoBuild"/></li>
        ///     <li><c>/OperationProcessors</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Output"/></li>
        ///     <li><c>/OutputType</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.OutputType"/></li>
        ///     <li><c>/Project</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Project"/></li>
        ///     <li><c>/ReferencePaths</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/></li>
        ///     <li><c>/RequireParametersWithoutDefault</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault"/></li>
        ///     <li><c>/Runtime</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Runtime"/></li>
        ///     <li><c>/SchemaNameGenerator</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.SchemaNameGenerator"/></li>
        ///     <li><c>/SerializerSettings</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.SerializerSettings"/></li>
        ///     <li><c>/ServiceBasePath</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceBasePath"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/></li>
        ///     <li><c>/Startup</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Startup"/></li>
        ///     <li><c>/TargetFramework</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.TargetFramework"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.TypeNameGenerator"/></li>
        ///     <li><c>/UseDocumentProvider</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider"/></li>
        ///     <li><c>/UseNuGetCache</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.UseNuGetCache"/></li>
        ///     <li><c>/Verbose</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.Verbose"/></li>
        ///     <li><c>/WorkingDirectory</c> via <see cref="NSwagAspNetCoreToSwaggerSettings.NSwagWorkingDirectory"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagAspNetCoreToSwaggerSettings Settings, IReadOnlyCollection<Output> Output)> NSwagAspNetCoreToSwagger(CombinatorialConfigure<NSwagAspNetCoreToSwaggerSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagAspNetCoreToSwagger, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Creates a new nswag.json file in the current directory.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagCreateDocumentSettings.NSwagRuntime"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagCreateDocument(NSwagCreateDocumentSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagCreateDocumentSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Creates a new nswag.json file in the current directory.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagCreateDocumentSettings.NSwagRuntime"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagCreateDocument(Configure<NSwagCreateDocumentSettings> configurator)
        {
            return NSwagCreateDocument(configurator(new NSwagCreateDocumentSettings()));
        }
        /// <summary>
        ///   <p>Creates a new nswag.json file in the current directory.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagCreateDocumentSettings.NSwagRuntime"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagCreateDocumentSettings Settings, IReadOnlyCollection<Output> Output)> NSwagCreateDocument(CombinatorialConfigure<NSwagCreateDocumentSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagCreateDocument, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Executes an .nswag file. If 'input' is not specified then all *.nswag files and the nswag.json file is executed.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagExecuteDocumentSettings.NSwagRuntime"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagExecuteDocumentSettings.Input"/></li>
        ///     <li><c>/Variables</c> via <see cref="NSwagExecuteDocumentSettings.Variables"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagExecuteDocument(NSwagExecuteDocumentSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagExecuteDocumentSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Executes an .nswag file. If 'input' is not specified then all *.nswag files and the nswag.json file is executed.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagExecuteDocumentSettings.NSwagRuntime"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagExecuteDocumentSettings.Input"/></li>
        ///     <li><c>/Variables</c> via <see cref="NSwagExecuteDocumentSettings.Variables"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagExecuteDocument(Configure<NSwagExecuteDocumentSettings> configurator)
        {
            return NSwagExecuteDocument(configurator(new NSwagExecuteDocumentSettings()));
        }
        /// <summary>
        ///   <p>Executes an .nswag file. If 'input' is not specified then all *.nswag files and the nswag.json file is executed.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagExecuteDocumentSettings.NSwagRuntime"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagExecuteDocumentSettings.Input"/></li>
        ///     <li><c>/Variables</c> via <see cref="NSwagExecuteDocumentSettings.Variables"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagExecuteDocumentSettings Settings, IReadOnlyCollection<Output> Output)> NSwagExecuteDocument(CombinatorialConfigure<NSwagExecuteDocumentSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagExecuteDocument, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Generates CSharp classes from a JSON Schema.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagJsonSchemaToCSharpSettings.NSwagRuntime"/></li>
        ///     <li><c>/AnyType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.AnyType"/></li>
        ///     <li><c>/ArrayInstanceType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ArrayInstanceType"/></li>
        ///     <li><c>/ArrayType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ArrayType"/></li>
        ///     <li><c>/DateTimeType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.DateTimeType"/></li>
        ///     <li><c>/DictionaryInstanceType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.DictionaryInstanceType"/></li>
        ///     <li><c>/DictionaryType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.DictionaryType"/></li>
        ///     <li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Input"/></li>
        ///     <li><c>/Name</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Name"/></li>
        ///     <li><c>/Namespace</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Namespace"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Output"/></li>
        ///     <li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagJsonSchemaToCSharp(NSwagJsonSchemaToCSharpSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagJsonSchemaToCSharpSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Generates CSharp classes from a JSON Schema.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagJsonSchemaToCSharpSettings.NSwagRuntime"/></li>
        ///     <li><c>/AnyType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.AnyType"/></li>
        ///     <li><c>/ArrayInstanceType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ArrayInstanceType"/></li>
        ///     <li><c>/ArrayType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ArrayType"/></li>
        ///     <li><c>/DateTimeType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.DateTimeType"/></li>
        ///     <li><c>/DictionaryInstanceType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.DictionaryInstanceType"/></li>
        ///     <li><c>/DictionaryType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.DictionaryType"/></li>
        ///     <li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Input"/></li>
        ///     <li><c>/Name</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Name"/></li>
        ///     <li><c>/Namespace</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Namespace"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Output"/></li>
        ///     <li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagJsonSchemaToCSharp(Configure<NSwagJsonSchemaToCSharpSettings> configurator)
        {
            return NSwagJsonSchemaToCSharp(configurator(new NSwagJsonSchemaToCSharpSettings()));
        }
        /// <summary>
        ///   <p>Generates CSharp classes from a JSON Schema.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagJsonSchemaToCSharpSettings.NSwagRuntime"/></li>
        ///     <li><c>/AnyType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.AnyType"/></li>
        ///     <li><c>/ArrayInstanceType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ArrayInstanceType"/></li>
        ///     <li><c>/ArrayType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ArrayType"/></li>
        ///     <li><c>/DateTimeType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.DateTimeType"/></li>
        ///     <li><c>/DictionaryInstanceType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.DictionaryInstanceType"/></li>
        ///     <li><c>/DictionaryType</c> via <see cref="NSwagJsonSchemaToCSharpSettings.DictionaryType"/></li>
        ///     <li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Input"/></li>
        ///     <li><c>/Name</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Name"/></li>
        ///     <li><c>/Namespace</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Namespace"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagJsonSchemaToCSharpSettings.Output"/></li>
        ///     <li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagJsonSchemaToCSharpSettings Settings, IReadOnlyCollection<Output> Output)> NSwagJsonSchemaToCSharp(CombinatorialConfigure<NSwagJsonSchemaToCSharpSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagJsonSchemaToCSharp, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Generates TypeScript interfaces from a JSON Schema.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.NSwagRuntime"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.Input"/></li>
        ///     <li><c>/Name</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.Name"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.Output"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagJsonSchemaToTypeScript(NSwagJsonSchemaToTypeScriptSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagJsonSchemaToTypeScriptSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Generates TypeScript interfaces from a JSON Schema.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.NSwagRuntime"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.Input"/></li>
        ///     <li><c>/Name</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.Name"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.Output"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagJsonSchemaToTypeScript(Configure<NSwagJsonSchemaToTypeScriptSettings> configurator)
        {
            return NSwagJsonSchemaToTypeScript(configurator(new NSwagJsonSchemaToTypeScriptSettings()));
        }
        /// <summary>
        ///   <p>Generates TypeScript interfaces from a JSON Schema.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.NSwagRuntime"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.Input"/></li>
        ///     <li><c>/Name</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.Name"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.Output"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagJsonSchemaToTypeScriptSettings Settings, IReadOnlyCollection<Output> Output)> NSwagJsonSchemaToTypeScript(CombinatorialConfigure<NSwagJsonSchemaToTypeScriptSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagJsonSchemaToTypeScript, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Generates CSharp client code from a Swagger/OpenAPI specification.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagOpenApiToCSharpClientSettings.NSwagRuntime"/></li>
        ///     <li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/></li>
        ///     <li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/></li>
        ///     <li><c>/AnyType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.AnyType"/></li>
        ///     <li><c>/ArrayBaseType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ArrayBaseType"/></li>
        ///     <li><c>/ArrayInstanceType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ArrayInstanceType"/></li>
        ///     <li><c>/ArrayType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ArrayType"/></li>
        ///     <li><c>/ClassName</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ClassName"/></li>
        ///     <li><c>/ClassStyle</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ClassStyle"/></li>
        ///     <li><c>/DateTimeType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DateTimeType"/></li>
        ///     <li><c>/DateType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DateType"/></li>
        ///     <li><c>/DictionaryBaseType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryBaseType"/></li>
        ///     <li><c>/DictionaryInstanceType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryInstanceType"/></li>
        ///     <li><c>/DictionaryType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryType"/></li>
        ///     <li><c>/EnforceFlagEnums</c> via <see cref="NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums"/></li>
        ///     <li><c>/EnumNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.EnumNameGeneratorType"/></li>
        ///     <li><c>/ExcludedParameterNames</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/GenerateDataAnnotations</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations"/></li>
        ///     <li><c>/GenerateDefaultValues</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues"/></li>
        ///     <li><c>/GenerateDtoTypes</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes"/></li>
        ///     <li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties"/></li>
        ///     <li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></li>
        ///     <li><c>/GenerateJsonMethods</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods"/></li>
        ///     <li><c>/GenerateOptionalParameters</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters"/></li>
        ///     <li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></li>
        ///     <li><c>/GenerateResponseClasses</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses"/></li>
        ///     <li><c>/HandleReferences</c> via <see cref="NSwagOpenApiToCSharpClientSettings.HandleReferences"/></li>
        ///     <li><c>/InlineNamedAny</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedAny"/></li>
        ///     <li><c>/InlineNamedArrays</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedArrays"/></li>
        ///     <li><c>/InlineNamedDictionaries</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries"/></li>
        ///     <li><c>/InlineNamedTuples</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedTuples"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagOpenApiToCSharpClientSettings.Input"/></li>
        ///     <li><c>/JsonConverters</c> via <see cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/></li>
        ///     <li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagOpenApiToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/></li>
        ///     <li><c>/Namespace</c> via <see cref="NSwagOpenApiToCSharpClientSettings.Namespace"/></li>
        ///     <li><c>/OperationGenerationMode</c> via <see cref="NSwagOpenApiToCSharpClientSettings.OperationGenerationMode"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagOpenApiToCSharpClientSettings.Output"/></li>
        ///     <li><c>/ParameterArrayType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ParameterArrayType"/></li>
        ///     <li><c>/ParameterDictionaryType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ParameterDictionaryType"/></li>
        ///     <li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.PropertyNameGeneratorType"/></li>
        ///     <li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></li>
        ///     <li><c>/ResponseArrayType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ResponseArrayType"/></li>
        ///     <li><c>/ResponseClass</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ResponseClass"/></li>
        ///     <li><c>/ResponseDictionaryType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ResponseDictionaryType"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/></li>
        ///     <li><c>/TemplateDirectory</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TemplateDirectory"/></li>
        ///     <li><c>/TimeSpanType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TimeSpanType"/></li>
        ///     <li><c>/TimeType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TimeType"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TypeNameGenerator"/></li>
        ///     <li><c>/WrapResponseMethods</c> via <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/></li>
        ///     <li><c>/WrapResponses</c> via <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponses"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagOpenApiToCSharpClient(NSwagOpenApiToCSharpClientSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagOpenApiToCSharpClientSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Generates CSharp client code from a Swagger/OpenAPI specification.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagOpenApiToCSharpClientSettings.NSwagRuntime"/></li>
        ///     <li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/></li>
        ///     <li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/></li>
        ///     <li><c>/AnyType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.AnyType"/></li>
        ///     <li><c>/ArrayBaseType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ArrayBaseType"/></li>
        ///     <li><c>/ArrayInstanceType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ArrayInstanceType"/></li>
        ///     <li><c>/ArrayType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ArrayType"/></li>
        ///     <li><c>/ClassName</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ClassName"/></li>
        ///     <li><c>/ClassStyle</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ClassStyle"/></li>
        ///     <li><c>/DateTimeType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DateTimeType"/></li>
        ///     <li><c>/DateType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DateType"/></li>
        ///     <li><c>/DictionaryBaseType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryBaseType"/></li>
        ///     <li><c>/DictionaryInstanceType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryInstanceType"/></li>
        ///     <li><c>/DictionaryType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryType"/></li>
        ///     <li><c>/EnforceFlagEnums</c> via <see cref="NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums"/></li>
        ///     <li><c>/EnumNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.EnumNameGeneratorType"/></li>
        ///     <li><c>/ExcludedParameterNames</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/GenerateDataAnnotations</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations"/></li>
        ///     <li><c>/GenerateDefaultValues</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues"/></li>
        ///     <li><c>/GenerateDtoTypes</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes"/></li>
        ///     <li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties"/></li>
        ///     <li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></li>
        ///     <li><c>/GenerateJsonMethods</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods"/></li>
        ///     <li><c>/GenerateOptionalParameters</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters"/></li>
        ///     <li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></li>
        ///     <li><c>/GenerateResponseClasses</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses"/></li>
        ///     <li><c>/HandleReferences</c> via <see cref="NSwagOpenApiToCSharpClientSettings.HandleReferences"/></li>
        ///     <li><c>/InlineNamedAny</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedAny"/></li>
        ///     <li><c>/InlineNamedArrays</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedArrays"/></li>
        ///     <li><c>/InlineNamedDictionaries</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries"/></li>
        ///     <li><c>/InlineNamedTuples</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedTuples"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagOpenApiToCSharpClientSettings.Input"/></li>
        ///     <li><c>/JsonConverters</c> via <see cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/></li>
        ///     <li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagOpenApiToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/></li>
        ///     <li><c>/Namespace</c> via <see cref="NSwagOpenApiToCSharpClientSettings.Namespace"/></li>
        ///     <li><c>/OperationGenerationMode</c> via <see cref="NSwagOpenApiToCSharpClientSettings.OperationGenerationMode"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagOpenApiToCSharpClientSettings.Output"/></li>
        ///     <li><c>/ParameterArrayType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ParameterArrayType"/></li>
        ///     <li><c>/ParameterDictionaryType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ParameterDictionaryType"/></li>
        ///     <li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.PropertyNameGeneratorType"/></li>
        ///     <li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></li>
        ///     <li><c>/ResponseArrayType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ResponseArrayType"/></li>
        ///     <li><c>/ResponseClass</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ResponseClass"/></li>
        ///     <li><c>/ResponseDictionaryType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ResponseDictionaryType"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/></li>
        ///     <li><c>/TemplateDirectory</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TemplateDirectory"/></li>
        ///     <li><c>/TimeSpanType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TimeSpanType"/></li>
        ///     <li><c>/TimeType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TimeType"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TypeNameGenerator"/></li>
        ///     <li><c>/WrapResponseMethods</c> via <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/></li>
        ///     <li><c>/WrapResponses</c> via <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponses"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagOpenApiToCSharpClient(Configure<NSwagOpenApiToCSharpClientSettings> configurator)
        {
            return NSwagOpenApiToCSharpClient(configurator(new NSwagOpenApiToCSharpClientSettings()));
        }
        /// <summary>
        ///   <p>Generates CSharp client code from a Swagger/OpenAPI specification.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagOpenApiToCSharpClientSettings.NSwagRuntime"/></li>
        ///     <li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/></li>
        ///     <li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/></li>
        ///     <li><c>/AnyType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.AnyType"/></li>
        ///     <li><c>/ArrayBaseType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ArrayBaseType"/></li>
        ///     <li><c>/ArrayInstanceType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ArrayInstanceType"/></li>
        ///     <li><c>/ArrayType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ArrayType"/></li>
        ///     <li><c>/ClassName</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ClassName"/></li>
        ///     <li><c>/ClassStyle</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ClassStyle"/></li>
        ///     <li><c>/DateTimeType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DateTimeType"/></li>
        ///     <li><c>/DateType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DateType"/></li>
        ///     <li><c>/DictionaryBaseType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryBaseType"/></li>
        ///     <li><c>/DictionaryInstanceType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryInstanceType"/></li>
        ///     <li><c>/DictionaryType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryType"/></li>
        ///     <li><c>/EnforceFlagEnums</c> via <see cref="NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums"/></li>
        ///     <li><c>/EnumNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.EnumNameGeneratorType"/></li>
        ///     <li><c>/ExcludedParameterNames</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/GenerateDataAnnotations</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations"/></li>
        ///     <li><c>/GenerateDefaultValues</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues"/></li>
        ///     <li><c>/GenerateDtoTypes</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes"/></li>
        ///     <li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties"/></li>
        ///     <li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></li>
        ///     <li><c>/GenerateJsonMethods</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods"/></li>
        ///     <li><c>/GenerateOptionalParameters</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters"/></li>
        ///     <li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></li>
        ///     <li><c>/GenerateResponseClasses</c> via <see cref="NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses"/></li>
        ///     <li><c>/HandleReferences</c> via <see cref="NSwagOpenApiToCSharpClientSettings.HandleReferences"/></li>
        ///     <li><c>/InlineNamedAny</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedAny"/></li>
        ///     <li><c>/InlineNamedArrays</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedArrays"/></li>
        ///     <li><c>/InlineNamedDictionaries</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries"/></li>
        ///     <li><c>/InlineNamedTuples</c> via <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedTuples"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagOpenApiToCSharpClientSettings.Input"/></li>
        ///     <li><c>/JsonConverters</c> via <see cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/></li>
        ///     <li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagOpenApiToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/></li>
        ///     <li><c>/Namespace</c> via <see cref="NSwagOpenApiToCSharpClientSettings.Namespace"/></li>
        ///     <li><c>/OperationGenerationMode</c> via <see cref="NSwagOpenApiToCSharpClientSettings.OperationGenerationMode"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagOpenApiToCSharpClientSettings.Output"/></li>
        ///     <li><c>/ParameterArrayType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ParameterArrayType"/></li>
        ///     <li><c>/ParameterDictionaryType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ParameterDictionaryType"/></li>
        ///     <li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.PropertyNameGeneratorType"/></li>
        ///     <li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></li>
        ///     <li><c>/ResponseArrayType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ResponseArrayType"/></li>
        ///     <li><c>/ResponseClass</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ResponseClass"/></li>
        ///     <li><c>/ResponseDictionaryType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ResponseDictionaryType"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/></li>
        ///     <li><c>/TemplateDirectory</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TemplateDirectory"/></li>
        ///     <li><c>/TimeSpanType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TimeSpanType"/></li>
        ///     <li><c>/TimeType</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TimeType"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagOpenApiToCSharpClientSettings.TypeNameGenerator"/></li>
        ///     <li><c>/WrapResponseMethods</c> via <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/></li>
        ///     <li><c>/WrapResponses</c> via <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponses"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagOpenApiToCSharpClientSettings Settings, IReadOnlyCollection<Output> Output)> NSwagOpenApiToCSharpClient(CombinatorialConfigure<NSwagOpenApiToCSharpClientSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagOpenApiToCSharpClient, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Generates CSharp client code from a Swagger/OpenAPI specification (obsolete: use openapi2csclient instead).</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagSwaggerToCSharpClientSettings.NSwagRuntime"/></li>
        ///     <li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/></li>
        ///     <li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/></li>
        ///     <li><c>/AnyType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.AnyType"/></li>
        ///     <li><c>/ArrayBaseType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ArrayBaseType"/></li>
        ///     <li><c>/ArrayInstanceType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ArrayInstanceType"/></li>
        ///     <li><c>/ArrayType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ArrayType"/></li>
        ///     <li><c>/ClassName</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClassName"/></li>
        ///     <li><c>/ClassStyle</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClassStyle"/></li>
        ///     <li><c>/ClientBaseClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClientBaseClass"/></li>
        ///     <li><c>/ClientClassAccessModifier</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClientClassAccessModifier"/></li>
        ///     <li><c>/ConfigurationClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ConfigurationClass"/></li>
        ///     <li><c>/ContractsNamespace</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ContractsNamespace"/></li>
        ///     <li><c>/ContractsOutput</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ContractsOutput"/></li>
        ///     <li><c>/DateTimeType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DateTimeType"/></li>
        ///     <li><c>/DateType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DateType"/></li>
        ///     <li><c>/DictionaryBaseType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryBaseType"/></li>
        ///     <li><c>/DictionaryInstanceType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryInstanceType"/></li>
        ///     <li><c>/DictionaryType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryType"/></li>
        ///     <li><c>/DisposeHttpClient</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DisposeHttpClient"/></li>
        ///     <li><c>/EnforceFlagEnums</c> via <see cref="NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums"/></li>
        ///     <li><c>/EnumNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.EnumNameGeneratorType"/></li>
        ///     <li><c>/ExceptionClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExceptionClass"/></li>
        ///     <li><c>/ExcludedParameterNames</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/ExposeJsonSerializerSettings</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings"/></li>
        ///     <li><c>/GenerateBaseUrlProperty</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty"/></li>
        ///     <li><c>/GenerateClientClasses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientClasses"/></li>
        ///     <li><c>/GenerateClientInterfaces</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces"/></li>
        ///     <li><c>/GenerateContractsOutput</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput"/></li>
        ///     <li><c>/GenerateDataAnnotations</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations"/></li>
        ///     <li><c>/GenerateDefaultValues</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues"/></li>
        ///     <li><c>/GenerateDtoTypes</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes"/></li>
        ///     <li><c>/GenerateExceptionClasses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses"/></li>
        ///     <li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties"/></li>
        ///     <li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></li>
        ///     <li><c>/GenerateJsonMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods"/></li>
        ///     <li><c>/GenerateOptionalParameters</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters"/></li>
        ///     <li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></li>
        ///     <li><c>/GenerateResponseClasses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses"/></li>
        ///     <li><c>/GenerateSyncMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods"/></li>
        ///     <li><c>/GenerateUpdateJsonSerializerSettingsMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod"/></li>
        ///     <li><c>/HandleReferences</c> via <see cref="NSwagSwaggerToCSharpClientSettings.HandleReferences"/></li>
        ///     <li><c>/HttpClientType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.HttpClientType"/></li>
        ///     <li><c>/InjectHttpClient</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InjectHttpClient"/></li>
        ///     <li><c>/InlineNamedAny</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedAny"/></li>
        ///     <li><c>/InlineNamedArrays</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedArrays"/></li>
        ///     <li><c>/InlineNamedDictionaries</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries"/></li>
        ///     <li><c>/InlineNamedTuples</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedTuples"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagSwaggerToCSharpClientSettings.Input"/></li>
        ///     <li><c>/JsonConverters</c> via <see cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/></li>
        ///     <li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/></li>
        ///     <li><c>/Namespace</c> via <see cref="NSwagSwaggerToCSharpClientSettings.Namespace"/></li>
        ///     <li><c>/OperationGenerationMode</c> via <see cref="NSwagSwaggerToCSharpClientSettings.OperationGenerationMode"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagSwaggerToCSharpClientSettings.Output"/></li>
        ///     <li><c>/ParameterArrayType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterArrayType"/></li>
        ///     <li><c>/ParameterDateFormat</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDateFormat"/></li>
        ///     <li><c>/ParameterDateTimeFormat</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDateTimeFormat"/></li>
        ///     <li><c>/ParameterDictionaryType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDictionaryType"/></li>
        ///     <li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.PropertyNameGeneratorType"/></li>
        ///     <li><c>/ProtectedMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/></li>
        ///     <li><c>/QueryNullValue</c> via <see cref="NSwagSwaggerToCSharpClientSettings.QueryNullValue"/></li>
        ///     <li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></li>
        ///     <li><c>/ResponseArrayType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ResponseArrayType"/></li>
        ///     <li><c>/ResponseClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ResponseClass"/></li>
        ///     <li><c>/ResponseDictionaryType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ResponseDictionaryType"/></li>
        ///     <li><c>/SerializeTypeInformation</c> via <see cref="NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/></li>
        ///     <li><c>/TemplateDirectory</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TemplateDirectory"/></li>
        ///     <li><c>/TimeSpanType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TimeSpanType"/></li>
        ///     <li><c>/TimeType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TimeType"/></li>
        ///     <li><c>/TypeAccessModifier</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TypeAccessModifier"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TypeNameGenerator"/></li>
        ///     <li><c>/UseBaseUrl</c> via <see cref="NSwagSwaggerToCSharpClientSettings.UseBaseUrl"/></li>
        ///     <li><c>/UseHttpClientCreationMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod"/></li>
        ///     <li><c>/UseHttpRequestMessageCreationMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod"/></li>
        ///     <li><c>/WrapDtoExceptions</c> via <see cref="NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions"/></li>
        ///     <li><c>/WrapResponseMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/></li>
        ///     <li><c>/WrapResponses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponses"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagSwaggerToCSharpClient(NSwagSwaggerToCSharpClientSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagSwaggerToCSharpClientSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Generates CSharp client code from a Swagger/OpenAPI specification (obsolete: use openapi2csclient instead).</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagSwaggerToCSharpClientSettings.NSwagRuntime"/></li>
        ///     <li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/></li>
        ///     <li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/></li>
        ///     <li><c>/AnyType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.AnyType"/></li>
        ///     <li><c>/ArrayBaseType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ArrayBaseType"/></li>
        ///     <li><c>/ArrayInstanceType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ArrayInstanceType"/></li>
        ///     <li><c>/ArrayType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ArrayType"/></li>
        ///     <li><c>/ClassName</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClassName"/></li>
        ///     <li><c>/ClassStyle</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClassStyle"/></li>
        ///     <li><c>/ClientBaseClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClientBaseClass"/></li>
        ///     <li><c>/ClientClassAccessModifier</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClientClassAccessModifier"/></li>
        ///     <li><c>/ConfigurationClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ConfigurationClass"/></li>
        ///     <li><c>/ContractsNamespace</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ContractsNamespace"/></li>
        ///     <li><c>/ContractsOutput</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ContractsOutput"/></li>
        ///     <li><c>/DateTimeType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DateTimeType"/></li>
        ///     <li><c>/DateType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DateType"/></li>
        ///     <li><c>/DictionaryBaseType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryBaseType"/></li>
        ///     <li><c>/DictionaryInstanceType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryInstanceType"/></li>
        ///     <li><c>/DictionaryType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryType"/></li>
        ///     <li><c>/DisposeHttpClient</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DisposeHttpClient"/></li>
        ///     <li><c>/EnforceFlagEnums</c> via <see cref="NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums"/></li>
        ///     <li><c>/EnumNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.EnumNameGeneratorType"/></li>
        ///     <li><c>/ExceptionClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExceptionClass"/></li>
        ///     <li><c>/ExcludedParameterNames</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/ExposeJsonSerializerSettings</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings"/></li>
        ///     <li><c>/GenerateBaseUrlProperty</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty"/></li>
        ///     <li><c>/GenerateClientClasses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientClasses"/></li>
        ///     <li><c>/GenerateClientInterfaces</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces"/></li>
        ///     <li><c>/GenerateContractsOutput</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput"/></li>
        ///     <li><c>/GenerateDataAnnotations</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations"/></li>
        ///     <li><c>/GenerateDefaultValues</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues"/></li>
        ///     <li><c>/GenerateDtoTypes</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes"/></li>
        ///     <li><c>/GenerateExceptionClasses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses"/></li>
        ///     <li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties"/></li>
        ///     <li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></li>
        ///     <li><c>/GenerateJsonMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods"/></li>
        ///     <li><c>/GenerateOptionalParameters</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters"/></li>
        ///     <li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></li>
        ///     <li><c>/GenerateResponseClasses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses"/></li>
        ///     <li><c>/GenerateSyncMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods"/></li>
        ///     <li><c>/GenerateUpdateJsonSerializerSettingsMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod"/></li>
        ///     <li><c>/HandleReferences</c> via <see cref="NSwagSwaggerToCSharpClientSettings.HandleReferences"/></li>
        ///     <li><c>/HttpClientType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.HttpClientType"/></li>
        ///     <li><c>/InjectHttpClient</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InjectHttpClient"/></li>
        ///     <li><c>/InlineNamedAny</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedAny"/></li>
        ///     <li><c>/InlineNamedArrays</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedArrays"/></li>
        ///     <li><c>/InlineNamedDictionaries</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries"/></li>
        ///     <li><c>/InlineNamedTuples</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedTuples"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagSwaggerToCSharpClientSettings.Input"/></li>
        ///     <li><c>/JsonConverters</c> via <see cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/></li>
        ///     <li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/></li>
        ///     <li><c>/Namespace</c> via <see cref="NSwagSwaggerToCSharpClientSettings.Namespace"/></li>
        ///     <li><c>/OperationGenerationMode</c> via <see cref="NSwagSwaggerToCSharpClientSettings.OperationGenerationMode"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagSwaggerToCSharpClientSettings.Output"/></li>
        ///     <li><c>/ParameterArrayType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterArrayType"/></li>
        ///     <li><c>/ParameterDateFormat</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDateFormat"/></li>
        ///     <li><c>/ParameterDateTimeFormat</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDateTimeFormat"/></li>
        ///     <li><c>/ParameterDictionaryType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDictionaryType"/></li>
        ///     <li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.PropertyNameGeneratorType"/></li>
        ///     <li><c>/ProtectedMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/></li>
        ///     <li><c>/QueryNullValue</c> via <see cref="NSwagSwaggerToCSharpClientSettings.QueryNullValue"/></li>
        ///     <li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></li>
        ///     <li><c>/ResponseArrayType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ResponseArrayType"/></li>
        ///     <li><c>/ResponseClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ResponseClass"/></li>
        ///     <li><c>/ResponseDictionaryType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ResponseDictionaryType"/></li>
        ///     <li><c>/SerializeTypeInformation</c> via <see cref="NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/></li>
        ///     <li><c>/TemplateDirectory</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TemplateDirectory"/></li>
        ///     <li><c>/TimeSpanType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TimeSpanType"/></li>
        ///     <li><c>/TimeType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TimeType"/></li>
        ///     <li><c>/TypeAccessModifier</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TypeAccessModifier"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TypeNameGenerator"/></li>
        ///     <li><c>/UseBaseUrl</c> via <see cref="NSwagSwaggerToCSharpClientSettings.UseBaseUrl"/></li>
        ///     <li><c>/UseHttpClientCreationMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod"/></li>
        ///     <li><c>/UseHttpRequestMessageCreationMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod"/></li>
        ///     <li><c>/WrapDtoExceptions</c> via <see cref="NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions"/></li>
        ///     <li><c>/WrapResponseMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/></li>
        ///     <li><c>/WrapResponses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponses"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagSwaggerToCSharpClient(Configure<NSwagSwaggerToCSharpClientSettings> configurator)
        {
            return NSwagSwaggerToCSharpClient(configurator(new NSwagSwaggerToCSharpClientSettings()));
        }
        /// <summary>
        ///   <p>Generates CSharp client code from a Swagger/OpenAPI specification (obsolete: use openapi2csclient instead).</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagSwaggerToCSharpClientSettings.NSwagRuntime"/></li>
        ///     <li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/></li>
        ///     <li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/></li>
        ///     <li><c>/AnyType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.AnyType"/></li>
        ///     <li><c>/ArrayBaseType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ArrayBaseType"/></li>
        ///     <li><c>/ArrayInstanceType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ArrayInstanceType"/></li>
        ///     <li><c>/ArrayType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ArrayType"/></li>
        ///     <li><c>/ClassName</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClassName"/></li>
        ///     <li><c>/ClassStyle</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClassStyle"/></li>
        ///     <li><c>/ClientBaseClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClientBaseClass"/></li>
        ///     <li><c>/ClientClassAccessModifier</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ClientClassAccessModifier"/></li>
        ///     <li><c>/ConfigurationClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ConfigurationClass"/></li>
        ///     <li><c>/ContractsNamespace</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ContractsNamespace"/></li>
        ///     <li><c>/ContractsOutput</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ContractsOutput"/></li>
        ///     <li><c>/DateTimeType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DateTimeType"/></li>
        ///     <li><c>/DateType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DateType"/></li>
        ///     <li><c>/DictionaryBaseType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryBaseType"/></li>
        ///     <li><c>/DictionaryInstanceType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryInstanceType"/></li>
        ///     <li><c>/DictionaryType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryType"/></li>
        ///     <li><c>/DisposeHttpClient</c> via <see cref="NSwagSwaggerToCSharpClientSettings.DisposeHttpClient"/></li>
        ///     <li><c>/EnforceFlagEnums</c> via <see cref="NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums"/></li>
        ///     <li><c>/EnumNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.EnumNameGeneratorType"/></li>
        ///     <li><c>/ExceptionClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExceptionClass"/></li>
        ///     <li><c>/ExcludedParameterNames</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/ExposeJsonSerializerSettings</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings"/></li>
        ///     <li><c>/GenerateBaseUrlProperty</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty"/></li>
        ///     <li><c>/GenerateClientClasses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientClasses"/></li>
        ///     <li><c>/GenerateClientInterfaces</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces"/></li>
        ///     <li><c>/GenerateContractsOutput</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput"/></li>
        ///     <li><c>/GenerateDataAnnotations</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations"/></li>
        ///     <li><c>/GenerateDefaultValues</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues"/></li>
        ///     <li><c>/GenerateDtoTypes</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes"/></li>
        ///     <li><c>/GenerateExceptionClasses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses"/></li>
        ///     <li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties"/></li>
        ///     <li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></li>
        ///     <li><c>/GenerateJsonMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods"/></li>
        ///     <li><c>/GenerateOptionalParameters</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters"/></li>
        ///     <li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></li>
        ///     <li><c>/GenerateResponseClasses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses"/></li>
        ///     <li><c>/GenerateSyncMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods"/></li>
        ///     <li><c>/GenerateUpdateJsonSerializerSettingsMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod"/></li>
        ///     <li><c>/HandleReferences</c> via <see cref="NSwagSwaggerToCSharpClientSettings.HandleReferences"/></li>
        ///     <li><c>/HttpClientType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.HttpClientType"/></li>
        ///     <li><c>/InjectHttpClient</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InjectHttpClient"/></li>
        ///     <li><c>/InlineNamedAny</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedAny"/></li>
        ///     <li><c>/InlineNamedArrays</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedArrays"/></li>
        ///     <li><c>/InlineNamedDictionaries</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries"/></li>
        ///     <li><c>/InlineNamedTuples</c> via <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedTuples"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagSwaggerToCSharpClientSettings.Input"/></li>
        ///     <li><c>/JsonConverters</c> via <see cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/></li>
        ///     <li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/></li>
        ///     <li><c>/Namespace</c> via <see cref="NSwagSwaggerToCSharpClientSettings.Namespace"/></li>
        ///     <li><c>/OperationGenerationMode</c> via <see cref="NSwagSwaggerToCSharpClientSettings.OperationGenerationMode"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagSwaggerToCSharpClientSettings.Output"/></li>
        ///     <li><c>/ParameterArrayType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterArrayType"/></li>
        ///     <li><c>/ParameterDateFormat</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDateFormat"/></li>
        ///     <li><c>/ParameterDateTimeFormat</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDateTimeFormat"/></li>
        ///     <li><c>/ParameterDictionaryType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDictionaryType"/></li>
        ///     <li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.PropertyNameGeneratorType"/></li>
        ///     <li><c>/ProtectedMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/></li>
        ///     <li><c>/QueryNullValue</c> via <see cref="NSwagSwaggerToCSharpClientSettings.QueryNullValue"/></li>
        ///     <li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></li>
        ///     <li><c>/ResponseArrayType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ResponseArrayType"/></li>
        ///     <li><c>/ResponseClass</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ResponseClass"/></li>
        ///     <li><c>/ResponseDictionaryType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ResponseDictionaryType"/></li>
        ///     <li><c>/SerializeTypeInformation</c> via <see cref="NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/></li>
        ///     <li><c>/TemplateDirectory</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TemplateDirectory"/></li>
        ///     <li><c>/TimeSpanType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TimeSpanType"/></li>
        ///     <li><c>/TimeType</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TimeType"/></li>
        ///     <li><c>/TypeAccessModifier</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TypeAccessModifier"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagSwaggerToCSharpClientSettings.TypeNameGenerator"/></li>
        ///     <li><c>/UseBaseUrl</c> via <see cref="NSwagSwaggerToCSharpClientSettings.UseBaseUrl"/></li>
        ///     <li><c>/UseHttpClientCreationMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod"/></li>
        ///     <li><c>/UseHttpRequestMessageCreationMethod</c> via <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod"/></li>
        ///     <li><c>/WrapDtoExceptions</c> via <see cref="NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions"/></li>
        ///     <li><c>/WrapResponseMethods</c> via <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/></li>
        ///     <li><c>/WrapResponses</c> via <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponses"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagSwaggerToCSharpClientSettings Settings, IReadOnlyCollection<Output> Output)> NSwagSwaggerToCSharpClient(CombinatorialConfigure<NSwagSwaggerToCSharpClientSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagSwaggerToCSharpClient, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Generates CSharp Web API controller code from a Swagger/OpenAPI specification.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.NSwagRuntime"/></li>
        ///     <li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></li>
        ///     <li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/></li>
        ///     <li><c>/AnyType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.AnyType"/></li>
        ///     <li><c>/ArrayBaseType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayBaseType"/></li>
        ///     <li><c>/ArrayInstanceType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayInstanceType"/></li>
        ///     <li><c>/ArrayType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayType"/></li>
        ///     <li><c>/ClassName</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ClassName"/></li>
        ///     <li><c>/ClassStyle</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ClassStyle"/></li>
        ///     <li><c>/DateTimeType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DateTimeType"/></li>
        ///     <li><c>/DateType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DateType"/></li>
        ///     <li><c>/DictionaryBaseType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryBaseType"/></li>
        ///     <li><c>/DictionaryInstanceType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryInstanceType"/></li>
        ///     <li><c>/DictionaryType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryType"/></li>
        ///     <li><c>/EnforceFlagEnums</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums"/></li>
        ///     <li><c>/EnumNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.EnumNameGeneratorType"/></li>
        ///     <li><c>/ExcludedParameterNames</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/GenerateDataAnnotations</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations"/></li>
        ///     <li><c>/GenerateDefaultValues</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues"/></li>
        ///     <li><c>/GenerateDtoTypes</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes"/></li>
        ///     <li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties"/></li>
        ///     <li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></li>
        ///     <li><c>/GenerateJsonMethods</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods"/></li>
        ///     <li><c>/GenerateOptionalParameters</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters"/></li>
        ///     <li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></li>
        ///     <li><c>/GenerateResponseClasses</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses"/></li>
        ///     <li><c>/HandleReferences</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.HandleReferences"/></li>
        ///     <li><c>/InlineNamedAny</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedAny"/></li>
        ///     <li><c>/InlineNamedArrays</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays"/></li>
        ///     <li><c>/InlineNamedDictionaries</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries"/></li>
        ///     <li><c>/InlineNamedTuples</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.Input"/></li>
        ///     <li><c>/JsonConverters</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/></li>
        ///     <li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/></li>
        ///     <li><c>/Namespace</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.Namespace"/></li>
        ///     <li><c>/OperationGenerationMode</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.OperationGenerationMode"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.Output"/></li>
        ///     <li><c>/ParameterArrayType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ParameterArrayType"/></li>
        ///     <li><c>/ParameterDictionaryType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ParameterDictionaryType"/></li>
        ///     <li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.PropertyNameGeneratorType"/></li>
        ///     <li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></li>
        ///     <li><c>/ResponseArrayType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseArrayType"/></li>
        ///     <li><c>/ResponseClass</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseClass"/></li>
        ///     <li><c>/ResponseDictionaryType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseDictionaryType"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/></li>
        ///     <li><c>/TemplateDirectory</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TemplateDirectory"/></li>
        ///     <li><c>/TimeSpanType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TimeSpanType"/></li>
        ///     <li><c>/TimeType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TimeType"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TypeNameGenerator"/></li>
        ///     <li><c>/WrapResponseMethods</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/></li>
        ///     <li><c>/WrapResponses</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponses"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagOpenApiToCSharpController(NSwagOpenApiToCSharpControllerSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagOpenApiToCSharpControllerSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Generates CSharp Web API controller code from a Swagger/OpenAPI specification.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.NSwagRuntime"/></li>
        ///     <li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></li>
        ///     <li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/></li>
        ///     <li><c>/AnyType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.AnyType"/></li>
        ///     <li><c>/ArrayBaseType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayBaseType"/></li>
        ///     <li><c>/ArrayInstanceType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayInstanceType"/></li>
        ///     <li><c>/ArrayType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayType"/></li>
        ///     <li><c>/ClassName</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ClassName"/></li>
        ///     <li><c>/ClassStyle</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ClassStyle"/></li>
        ///     <li><c>/DateTimeType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DateTimeType"/></li>
        ///     <li><c>/DateType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DateType"/></li>
        ///     <li><c>/DictionaryBaseType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryBaseType"/></li>
        ///     <li><c>/DictionaryInstanceType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryInstanceType"/></li>
        ///     <li><c>/DictionaryType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryType"/></li>
        ///     <li><c>/EnforceFlagEnums</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums"/></li>
        ///     <li><c>/EnumNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.EnumNameGeneratorType"/></li>
        ///     <li><c>/ExcludedParameterNames</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/GenerateDataAnnotations</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations"/></li>
        ///     <li><c>/GenerateDefaultValues</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues"/></li>
        ///     <li><c>/GenerateDtoTypes</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes"/></li>
        ///     <li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties"/></li>
        ///     <li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></li>
        ///     <li><c>/GenerateJsonMethods</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods"/></li>
        ///     <li><c>/GenerateOptionalParameters</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters"/></li>
        ///     <li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></li>
        ///     <li><c>/GenerateResponseClasses</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses"/></li>
        ///     <li><c>/HandleReferences</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.HandleReferences"/></li>
        ///     <li><c>/InlineNamedAny</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedAny"/></li>
        ///     <li><c>/InlineNamedArrays</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays"/></li>
        ///     <li><c>/InlineNamedDictionaries</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries"/></li>
        ///     <li><c>/InlineNamedTuples</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.Input"/></li>
        ///     <li><c>/JsonConverters</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/></li>
        ///     <li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/></li>
        ///     <li><c>/Namespace</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.Namespace"/></li>
        ///     <li><c>/OperationGenerationMode</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.OperationGenerationMode"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.Output"/></li>
        ///     <li><c>/ParameterArrayType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ParameterArrayType"/></li>
        ///     <li><c>/ParameterDictionaryType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ParameterDictionaryType"/></li>
        ///     <li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.PropertyNameGeneratorType"/></li>
        ///     <li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></li>
        ///     <li><c>/ResponseArrayType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseArrayType"/></li>
        ///     <li><c>/ResponseClass</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseClass"/></li>
        ///     <li><c>/ResponseDictionaryType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseDictionaryType"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/></li>
        ///     <li><c>/TemplateDirectory</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TemplateDirectory"/></li>
        ///     <li><c>/TimeSpanType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TimeSpanType"/></li>
        ///     <li><c>/TimeType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TimeType"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TypeNameGenerator"/></li>
        ///     <li><c>/WrapResponseMethods</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/></li>
        ///     <li><c>/WrapResponses</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponses"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagOpenApiToCSharpController(Configure<NSwagOpenApiToCSharpControllerSettings> configurator)
        {
            return NSwagOpenApiToCSharpController(configurator(new NSwagOpenApiToCSharpControllerSettings()));
        }
        /// <summary>
        ///   <p>Generates CSharp Web API controller code from a Swagger/OpenAPI specification.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.NSwagRuntime"/></li>
        ///     <li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></li>
        ///     <li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/></li>
        ///     <li><c>/AnyType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.AnyType"/></li>
        ///     <li><c>/ArrayBaseType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayBaseType"/></li>
        ///     <li><c>/ArrayInstanceType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayInstanceType"/></li>
        ///     <li><c>/ArrayType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayType"/></li>
        ///     <li><c>/ClassName</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ClassName"/></li>
        ///     <li><c>/ClassStyle</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ClassStyle"/></li>
        ///     <li><c>/DateTimeType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DateTimeType"/></li>
        ///     <li><c>/DateType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DateType"/></li>
        ///     <li><c>/DictionaryBaseType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryBaseType"/></li>
        ///     <li><c>/DictionaryInstanceType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryInstanceType"/></li>
        ///     <li><c>/DictionaryType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryType"/></li>
        ///     <li><c>/EnforceFlagEnums</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums"/></li>
        ///     <li><c>/EnumNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.EnumNameGeneratorType"/></li>
        ///     <li><c>/ExcludedParameterNames</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/GenerateDataAnnotations</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations"/></li>
        ///     <li><c>/GenerateDefaultValues</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues"/></li>
        ///     <li><c>/GenerateDtoTypes</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes"/></li>
        ///     <li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties"/></li>
        ///     <li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></li>
        ///     <li><c>/GenerateJsonMethods</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods"/></li>
        ///     <li><c>/GenerateOptionalParameters</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters"/></li>
        ///     <li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></li>
        ///     <li><c>/GenerateResponseClasses</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses"/></li>
        ///     <li><c>/HandleReferences</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.HandleReferences"/></li>
        ///     <li><c>/InlineNamedAny</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedAny"/></li>
        ///     <li><c>/InlineNamedArrays</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays"/></li>
        ///     <li><c>/InlineNamedDictionaries</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries"/></li>
        ///     <li><c>/InlineNamedTuples</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.Input"/></li>
        ///     <li><c>/JsonConverters</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/></li>
        ///     <li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/></li>
        ///     <li><c>/Namespace</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.Namespace"/></li>
        ///     <li><c>/OperationGenerationMode</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.OperationGenerationMode"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.Output"/></li>
        ///     <li><c>/ParameterArrayType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ParameterArrayType"/></li>
        ///     <li><c>/ParameterDictionaryType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ParameterDictionaryType"/></li>
        ///     <li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.PropertyNameGeneratorType"/></li>
        ///     <li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></li>
        ///     <li><c>/ResponseArrayType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseArrayType"/></li>
        ///     <li><c>/ResponseClass</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseClass"/></li>
        ///     <li><c>/ResponseDictionaryType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseDictionaryType"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/></li>
        ///     <li><c>/TemplateDirectory</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TemplateDirectory"/></li>
        ///     <li><c>/TimeSpanType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TimeSpanType"/></li>
        ///     <li><c>/TimeType</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TimeType"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.TypeNameGenerator"/></li>
        ///     <li><c>/WrapResponseMethods</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/></li>
        ///     <li><c>/WrapResponses</c> via <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponses"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagOpenApiToCSharpControllerSettings Settings, IReadOnlyCollection<Output> Output)> NSwagOpenApiToCSharpController(CombinatorialConfigure<NSwagOpenApiToCSharpControllerSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagOpenApiToCSharpController, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Generates CSharp Web API controller code from a Swagger/OpenAPI specification (obsolete: use openapi2cscontroller instead).</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.NSwagRuntime"/></li>
        ///     <li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></li>
        ///     <li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/></li>
        ///     <li><c>/AnyType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.AnyType"/></li>
        ///     <li><c>/ArrayBaseType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayBaseType"/></li>
        ///     <li><c>/ArrayInstanceType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayInstanceType"/></li>
        ///     <li><c>/ArrayType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayType"/></li>
        ///     <li><c>/BasePath</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.BasePath"/></li>
        ///     <li><c>/ClassName</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ClassName"/></li>
        ///     <li><c>/ClassStyle</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ClassStyle"/></li>
        ///     <li><c>/ControllerBaseClass</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerBaseClass"/></li>
        ///     <li><c>/ControllerStyle</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerStyle"/></li>
        ///     <li><c>/ControllerTarget</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerTarget"/></li>
        ///     <li><c>/DateTimeType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DateTimeType"/></li>
        ///     <li><c>/DateType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DateType"/></li>
        ///     <li><c>/DictionaryBaseType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryBaseType"/></li>
        ///     <li><c>/DictionaryInstanceType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryInstanceType"/></li>
        ///     <li><c>/DictionaryType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryType"/></li>
        ///     <li><c>/EnforceFlagEnums</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums"/></li>
        ///     <li><c>/EnumNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.EnumNameGeneratorType"/></li>
        ///     <li><c>/ExcludedParameterNames</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/GenerateDataAnnotations</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations"/></li>
        ///     <li><c>/GenerateDefaultValues</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues"/></li>
        ///     <li><c>/GenerateDtoTypes</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes"/></li>
        ///     <li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties"/></li>
        ///     <li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></li>
        ///     <li><c>/GenerateJsonMethods</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods"/></li>
        ///     <li><c>/GenerateModelValidationAttributes</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes"/></li>
        ///     <li><c>/GenerateOptionalParameters</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters"/></li>
        ///     <li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></li>
        ///     <li><c>/GenerateResponseClasses</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses"/></li>
        ///     <li><c>/HandleReferences</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.HandleReferences"/></li>
        ///     <li><c>/InlineNamedAny</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedAny"/></li>
        ///     <li><c>/InlineNamedArrays</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays"/></li>
        ///     <li><c>/InlineNamedDictionaries</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries"/></li>
        ///     <li><c>/InlineNamedTuples</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.Input"/></li>
        ///     <li><c>/JsonConverters</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/></li>
        ///     <li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/></li>
        ///     <li><c>/Namespace</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.Namespace"/></li>
        ///     <li><c>/OperationGenerationMode</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.OperationGenerationMode"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.Output"/></li>
        ///     <li><c>/ParameterArrayType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ParameterArrayType"/></li>
        ///     <li><c>/ParameterDictionaryType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ParameterDictionaryType"/></li>
        ///     <li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.PropertyNameGeneratorType"/></li>
        ///     <li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></li>
        ///     <li><c>/ResponseArrayType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseArrayType"/></li>
        ///     <li><c>/ResponseClass</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseClass"/></li>
        ///     <li><c>/ResponseDictionaryType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseDictionaryType"/></li>
        ///     <li><c>/RouteNamingStrategy</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.RouteNamingStrategy"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/></li>
        ///     <li><c>/TemplateDirectory</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TemplateDirectory"/></li>
        ///     <li><c>/TimeSpanType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TimeSpanType"/></li>
        ///     <li><c>/TimeType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TimeType"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TypeNameGenerator"/></li>
        ///     <li><c>/UseActionResultType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.UseActionResultType"/></li>
        ///     <li><c>/UseCancellationToken</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.UseCancellationToken"/></li>
        ///     <li><c>/WrapResponseMethods</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/></li>
        ///     <li><c>/WrapResponses</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponses"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagSwaggerToCSharpController(NSwagSwaggerToCSharpControllerSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagSwaggerToCSharpControllerSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Generates CSharp Web API controller code from a Swagger/OpenAPI specification (obsolete: use openapi2cscontroller instead).</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.NSwagRuntime"/></li>
        ///     <li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></li>
        ///     <li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/></li>
        ///     <li><c>/AnyType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.AnyType"/></li>
        ///     <li><c>/ArrayBaseType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayBaseType"/></li>
        ///     <li><c>/ArrayInstanceType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayInstanceType"/></li>
        ///     <li><c>/ArrayType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayType"/></li>
        ///     <li><c>/BasePath</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.BasePath"/></li>
        ///     <li><c>/ClassName</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ClassName"/></li>
        ///     <li><c>/ClassStyle</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ClassStyle"/></li>
        ///     <li><c>/ControllerBaseClass</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerBaseClass"/></li>
        ///     <li><c>/ControllerStyle</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerStyle"/></li>
        ///     <li><c>/ControllerTarget</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerTarget"/></li>
        ///     <li><c>/DateTimeType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DateTimeType"/></li>
        ///     <li><c>/DateType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DateType"/></li>
        ///     <li><c>/DictionaryBaseType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryBaseType"/></li>
        ///     <li><c>/DictionaryInstanceType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryInstanceType"/></li>
        ///     <li><c>/DictionaryType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryType"/></li>
        ///     <li><c>/EnforceFlagEnums</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums"/></li>
        ///     <li><c>/EnumNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.EnumNameGeneratorType"/></li>
        ///     <li><c>/ExcludedParameterNames</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/GenerateDataAnnotations</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations"/></li>
        ///     <li><c>/GenerateDefaultValues</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues"/></li>
        ///     <li><c>/GenerateDtoTypes</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes"/></li>
        ///     <li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties"/></li>
        ///     <li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></li>
        ///     <li><c>/GenerateJsonMethods</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods"/></li>
        ///     <li><c>/GenerateModelValidationAttributes</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes"/></li>
        ///     <li><c>/GenerateOptionalParameters</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters"/></li>
        ///     <li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></li>
        ///     <li><c>/GenerateResponseClasses</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses"/></li>
        ///     <li><c>/HandleReferences</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.HandleReferences"/></li>
        ///     <li><c>/InlineNamedAny</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedAny"/></li>
        ///     <li><c>/InlineNamedArrays</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays"/></li>
        ///     <li><c>/InlineNamedDictionaries</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries"/></li>
        ///     <li><c>/InlineNamedTuples</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.Input"/></li>
        ///     <li><c>/JsonConverters</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/></li>
        ///     <li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/></li>
        ///     <li><c>/Namespace</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.Namespace"/></li>
        ///     <li><c>/OperationGenerationMode</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.OperationGenerationMode"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.Output"/></li>
        ///     <li><c>/ParameterArrayType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ParameterArrayType"/></li>
        ///     <li><c>/ParameterDictionaryType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ParameterDictionaryType"/></li>
        ///     <li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.PropertyNameGeneratorType"/></li>
        ///     <li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></li>
        ///     <li><c>/ResponseArrayType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseArrayType"/></li>
        ///     <li><c>/ResponseClass</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseClass"/></li>
        ///     <li><c>/ResponseDictionaryType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseDictionaryType"/></li>
        ///     <li><c>/RouteNamingStrategy</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.RouteNamingStrategy"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/></li>
        ///     <li><c>/TemplateDirectory</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TemplateDirectory"/></li>
        ///     <li><c>/TimeSpanType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TimeSpanType"/></li>
        ///     <li><c>/TimeType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TimeType"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TypeNameGenerator"/></li>
        ///     <li><c>/UseActionResultType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.UseActionResultType"/></li>
        ///     <li><c>/UseCancellationToken</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.UseCancellationToken"/></li>
        ///     <li><c>/WrapResponseMethods</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/></li>
        ///     <li><c>/WrapResponses</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponses"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagSwaggerToCSharpController(Configure<NSwagSwaggerToCSharpControllerSettings> configurator)
        {
            return NSwagSwaggerToCSharpController(configurator(new NSwagSwaggerToCSharpControllerSettings()));
        }
        /// <summary>
        ///   <p>Generates CSharp Web API controller code from a Swagger/OpenAPI specification (obsolete: use openapi2cscontroller instead).</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.NSwagRuntime"/></li>
        ///     <li><c>/AdditionalContractNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></li>
        ///     <li><c>/AdditionalNamespaceUsages</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/></li>
        ///     <li><c>/AnyType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.AnyType"/></li>
        ///     <li><c>/ArrayBaseType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayBaseType"/></li>
        ///     <li><c>/ArrayInstanceType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayInstanceType"/></li>
        ///     <li><c>/ArrayType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayType"/></li>
        ///     <li><c>/BasePath</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.BasePath"/></li>
        ///     <li><c>/ClassName</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ClassName"/></li>
        ///     <li><c>/ClassStyle</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ClassStyle"/></li>
        ///     <li><c>/ControllerBaseClass</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerBaseClass"/></li>
        ///     <li><c>/ControllerStyle</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerStyle"/></li>
        ///     <li><c>/ControllerTarget</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerTarget"/></li>
        ///     <li><c>/DateTimeType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DateTimeType"/></li>
        ///     <li><c>/DateType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DateType"/></li>
        ///     <li><c>/DictionaryBaseType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryBaseType"/></li>
        ///     <li><c>/DictionaryInstanceType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryInstanceType"/></li>
        ///     <li><c>/DictionaryType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryType"/></li>
        ///     <li><c>/EnforceFlagEnums</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums"/></li>
        ///     <li><c>/EnumNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.EnumNameGeneratorType"/></li>
        ///     <li><c>/ExcludedParameterNames</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/GenerateDataAnnotations</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations"/></li>
        ///     <li><c>/GenerateDefaultValues</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues"/></li>
        ///     <li><c>/GenerateDtoTypes</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes"/></li>
        ///     <li><c>/GenerateImmutableArrayProperties</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties"/></li>
        ///     <li><c>/GenerateImmutableDictionaryProperties</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></li>
        ///     <li><c>/GenerateJsonMethods</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods"/></li>
        ///     <li><c>/GenerateModelValidationAttributes</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes"/></li>
        ///     <li><c>/GenerateOptionalParameters</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters"/></li>
        ///     <li><c>/GenerateOptionalPropertiesAsNullable</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></li>
        ///     <li><c>/GenerateResponseClasses</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses"/></li>
        ///     <li><c>/HandleReferences</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.HandleReferences"/></li>
        ///     <li><c>/InlineNamedAny</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedAny"/></li>
        ///     <li><c>/InlineNamedArrays</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays"/></li>
        ///     <li><c>/InlineNamedDictionaries</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries"/></li>
        ///     <li><c>/InlineNamedTuples</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.Input"/></li>
        ///     <li><c>/JsonConverters</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/></li>
        ///     <li><c>/JsonSerializerSettingsTransformationMethod</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/></li>
        ///     <li><c>/Namespace</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.Namespace"/></li>
        ///     <li><c>/OperationGenerationMode</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.OperationGenerationMode"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.Output"/></li>
        ///     <li><c>/ParameterArrayType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ParameterArrayType"/></li>
        ///     <li><c>/ParameterDictionaryType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ParameterDictionaryType"/></li>
        ///     <li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.PropertyNameGeneratorType"/></li>
        ///     <li><c>/RequiredPropertiesMustBeDefined</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></li>
        ///     <li><c>/ResponseArrayType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseArrayType"/></li>
        ///     <li><c>/ResponseClass</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseClass"/></li>
        ///     <li><c>/ResponseDictionaryType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseDictionaryType"/></li>
        ///     <li><c>/RouteNamingStrategy</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.RouteNamingStrategy"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/></li>
        ///     <li><c>/TemplateDirectory</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TemplateDirectory"/></li>
        ///     <li><c>/TimeSpanType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TimeSpanType"/></li>
        ///     <li><c>/TimeType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TimeType"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.TypeNameGenerator"/></li>
        ///     <li><c>/UseActionResultType</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.UseActionResultType"/></li>
        ///     <li><c>/UseCancellationToken</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.UseCancellationToken"/></li>
        ///     <li><c>/WrapResponseMethods</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/></li>
        ///     <li><c>/WrapResponses</c> via <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponses"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagSwaggerToCSharpControllerSettings Settings, IReadOnlyCollection<Output> Output)> NSwagSwaggerToCSharpController(CombinatorialConfigure<NSwagSwaggerToCSharpControllerSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagSwaggerToCSharpController, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Generates TypeScript client code from a Swagger/OpenAPI specification.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.NSwagRuntime"/></li>
        ///     <li><c>/EnumNameGeneratorType</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.EnumNameGeneratorType"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.Input"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.Output"/></li>
        ///     <li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.PropertyNameGeneratorType"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/></li>
        ///     <li><c>/TemplateDirectory</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.TemplateDirectory"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.TypeNameGenerator"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagOpenApiToTypeScriptClient(NSwagOpenApiToTypeScriptClientSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagOpenApiToTypeScriptClientSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Generates TypeScript client code from a Swagger/OpenAPI specification.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.NSwagRuntime"/></li>
        ///     <li><c>/EnumNameGeneratorType</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.EnumNameGeneratorType"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.Input"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.Output"/></li>
        ///     <li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.PropertyNameGeneratorType"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/></li>
        ///     <li><c>/TemplateDirectory</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.TemplateDirectory"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.TypeNameGenerator"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagOpenApiToTypeScriptClient(Configure<NSwagOpenApiToTypeScriptClientSettings> configurator)
        {
            return NSwagOpenApiToTypeScriptClient(configurator(new NSwagOpenApiToTypeScriptClientSettings()));
        }
        /// <summary>
        ///   <p>Generates TypeScript client code from a Swagger/OpenAPI specification.</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.NSwagRuntime"/></li>
        ///     <li><c>/EnumNameGeneratorType</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.EnumNameGeneratorType"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.Input"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.Output"/></li>
        ///     <li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.PropertyNameGeneratorType"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/></li>
        ///     <li><c>/TemplateDirectory</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.TemplateDirectory"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagOpenApiToTypeScriptClientSettings.TypeNameGenerator"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagOpenApiToTypeScriptClientSettings Settings, IReadOnlyCollection<Output> Output)> NSwagOpenApiToTypeScriptClient(CombinatorialConfigure<NSwagOpenApiToTypeScriptClientSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagOpenApiToTypeScriptClient, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Generates TypeScript client code from a Swagger/OpenAPI specification (obsolete: use openapi2tsclient instead).</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.NSwagRuntime"/></li>
        ///     <li><c>/BaseUrlTokenName</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.BaseUrlTokenName"/></li>
        ///     <li><c>/ClassName</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassName"/></li>
        ///     <li><c>/ClassTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/></li>
        ///     <li><c>/ClientBaseClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ClientBaseClass"/></li>
        ///     <li><c>/ConfigurationClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ConfigurationClass"/></li>
        ///     <li><c>/ConvertConstructorInterfaceData</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData"/></li>
        ///     <li><c>/DateTimeType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.DateTimeType"/></li>
        ///     <li><c>/EnumNameGeneratorType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.EnumNameGeneratorType"/></li>
        ///     <li><c>/ExceptionClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExceptionClass"/></li>
        ///     <li><c>/ExcludedParameterNames</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/ExportTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExportTypes"/></li>
        ///     <li><c>/ExtendedClasses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/></li>
        ///     <li><c>/ExtensionCode</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtensionCode"/></li>
        ///     <li><c>/GenerateClientClasses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses"/></li>
        ///     <li><c>/GenerateClientInterfaces</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces"/></li>
        ///     <li><c>/GenerateCloneMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod"/></li>
        ///     <li><c>/GenerateConstructorInterface</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface"/></li>
        ///     <li><c>/GenerateDefaultValues</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues"/></li>
        ///     <li><c>/GenerateDtoTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes"/></li>
        ///     <li><c>/GenerateOptionalParameters</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters"/></li>
        ///     <li><c>/GenerateResponseClasses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses"/></li>
        ///     <li><c>/HandleReferences</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.HandleReferences"/></li>
        ///     <li><c>/HttpClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.HttpClass"/></li>
        ///     <li><c>/ImportRequiredTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes"/></li>
        ///     <li><c>/InjectionTokenType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.InjectionTokenType"/></li>
        ///     <li><c>/InlineNamedAny</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny"/></li>
        ///     <li><c>/InlineNamedDictionaries</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Input"/></li>
        ///     <li><c>/MarkOptionalProperties</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties"/></li>
        ///     <li><c>/ModuleName</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ModuleName"/></li>
        ///     <li><c>/Namespace</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Namespace"/></li>
        ///     <li><c>/NullValue</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.NullValue"/></li>
        ///     <li><c>/OperationGenerationMode</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.OperationGenerationMode"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Output"/></li>
        ///     <li><c>/PromiseType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.PromiseType"/></li>
        ///     <li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.PropertyNameGeneratorType"/></li>
        ///     <li><c>/ProtectedMethods</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/></li>
        ///     <li><c>/QueryNullValue</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.QueryNullValue"/></li>
        ///     <li><c>/ResponseClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ResponseClass"/></li>
        ///     <li><c>/RxJsVersion</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.RxJsVersion"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/></li>
        ///     <li><c>/Template</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Template"/></li>
        ///     <li><c>/TemplateDirectory</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TemplateDirectory"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeNameGenerator"/></li>
        ///     <li><c>/TypeScriptVersion</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeScriptVersion"/></li>
        ///     <li><c>/TypeStyle</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeStyle"/></li>
        ///     <li><c>/UseGetBaseUrlMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod"/></li>
        ///     <li><c>/UseSingletonProvider</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider"/></li>
        ///     <li><c>/UseTransformOptionsMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod"/></li>
        ///     <li><c>/UseTransformResultMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod"/></li>
        ///     <li><c>/WrapDtoExceptions</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions"/></li>
        ///     <li><c>/WrapResponseMethods</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/></li>
        ///     <li><c>/WrapResponses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponses"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagSwaggerToTypeScriptClient(NSwagSwaggerToTypeScriptClientSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new NSwagSwaggerToTypeScriptClientSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Generates TypeScript client code from a Swagger/OpenAPI specification (obsolete: use openapi2tsclient instead).</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.NSwagRuntime"/></li>
        ///     <li><c>/BaseUrlTokenName</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.BaseUrlTokenName"/></li>
        ///     <li><c>/ClassName</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassName"/></li>
        ///     <li><c>/ClassTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/></li>
        ///     <li><c>/ClientBaseClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ClientBaseClass"/></li>
        ///     <li><c>/ConfigurationClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ConfigurationClass"/></li>
        ///     <li><c>/ConvertConstructorInterfaceData</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData"/></li>
        ///     <li><c>/DateTimeType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.DateTimeType"/></li>
        ///     <li><c>/EnumNameGeneratorType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.EnumNameGeneratorType"/></li>
        ///     <li><c>/ExceptionClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExceptionClass"/></li>
        ///     <li><c>/ExcludedParameterNames</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/ExportTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExportTypes"/></li>
        ///     <li><c>/ExtendedClasses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/></li>
        ///     <li><c>/ExtensionCode</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtensionCode"/></li>
        ///     <li><c>/GenerateClientClasses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses"/></li>
        ///     <li><c>/GenerateClientInterfaces</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces"/></li>
        ///     <li><c>/GenerateCloneMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod"/></li>
        ///     <li><c>/GenerateConstructorInterface</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface"/></li>
        ///     <li><c>/GenerateDefaultValues</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues"/></li>
        ///     <li><c>/GenerateDtoTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes"/></li>
        ///     <li><c>/GenerateOptionalParameters</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters"/></li>
        ///     <li><c>/GenerateResponseClasses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses"/></li>
        ///     <li><c>/HandleReferences</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.HandleReferences"/></li>
        ///     <li><c>/HttpClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.HttpClass"/></li>
        ///     <li><c>/ImportRequiredTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes"/></li>
        ///     <li><c>/InjectionTokenType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.InjectionTokenType"/></li>
        ///     <li><c>/InlineNamedAny</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny"/></li>
        ///     <li><c>/InlineNamedDictionaries</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Input"/></li>
        ///     <li><c>/MarkOptionalProperties</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties"/></li>
        ///     <li><c>/ModuleName</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ModuleName"/></li>
        ///     <li><c>/Namespace</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Namespace"/></li>
        ///     <li><c>/NullValue</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.NullValue"/></li>
        ///     <li><c>/OperationGenerationMode</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.OperationGenerationMode"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Output"/></li>
        ///     <li><c>/PromiseType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.PromiseType"/></li>
        ///     <li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.PropertyNameGeneratorType"/></li>
        ///     <li><c>/ProtectedMethods</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/></li>
        ///     <li><c>/QueryNullValue</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.QueryNullValue"/></li>
        ///     <li><c>/ResponseClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ResponseClass"/></li>
        ///     <li><c>/RxJsVersion</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.RxJsVersion"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/></li>
        ///     <li><c>/Template</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Template"/></li>
        ///     <li><c>/TemplateDirectory</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TemplateDirectory"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeNameGenerator"/></li>
        ///     <li><c>/TypeScriptVersion</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeScriptVersion"/></li>
        ///     <li><c>/TypeStyle</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeStyle"/></li>
        ///     <li><c>/UseGetBaseUrlMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod"/></li>
        ///     <li><c>/UseSingletonProvider</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider"/></li>
        ///     <li><c>/UseTransformOptionsMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod"/></li>
        ///     <li><c>/UseTransformResultMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod"/></li>
        ///     <li><c>/WrapDtoExceptions</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions"/></li>
        ///     <li><c>/WrapResponseMethods</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/></li>
        ///     <li><c>/WrapResponses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponses"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> NSwagSwaggerToTypeScriptClient(Configure<NSwagSwaggerToTypeScriptClientSettings> configurator)
        {
            return NSwagSwaggerToTypeScriptClient(configurator(new NSwagSwaggerToTypeScriptClientSettings()));
        }
        /// <summary>
        ///   <p>Generates TypeScript client code from a Swagger/OpenAPI specification (obsolete: use openapi2tsclient instead).</p>
        ///   <p>For more details, visit the <a href="https://github.com/RSuter/NSwag">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;nswagRuntime&gt;</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.NSwagRuntime"/></li>
        ///     <li><c>/BaseUrlTokenName</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.BaseUrlTokenName"/></li>
        ///     <li><c>/ClassName</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassName"/></li>
        ///     <li><c>/ClassTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/></li>
        ///     <li><c>/ClientBaseClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ClientBaseClass"/></li>
        ///     <li><c>/ConfigurationClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ConfigurationClass"/></li>
        ///     <li><c>/ConvertConstructorInterfaceData</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData"/></li>
        ///     <li><c>/DateTimeType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.DateTimeType"/></li>
        ///     <li><c>/EnumNameGeneratorType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.EnumNameGeneratorType"/></li>
        ///     <li><c>/ExceptionClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExceptionClass"/></li>
        ///     <li><c>/ExcludedParameterNames</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/></li>
        ///     <li><c>/ExcludedTypeNames</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/></li>
        ///     <li><c>/ExportTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExportTypes"/></li>
        ///     <li><c>/ExtendedClasses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/></li>
        ///     <li><c>/ExtensionCode</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtensionCode"/></li>
        ///     <li><c>/GenerateClientClasses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses"/></li>
        ///     <li><c>/GenerateClientInterfaces</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces"/></li>
        ///     <li><c>/GenerateCloneMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod"/></li>
        ///     <li><c>/GenerateConstructorInterface</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface"/></li>
        ///     <li><c>/GenerateDefaultValues</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues"/></li>
        ///     <li><c>/GenerateDtoTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes"/></li>
        ///     <li><c>/GenerateOptionalParameters</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters"/></li>
        ///     <li><c>/GenerateResponseClasses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses"/></li>
        ///     <li><c>/HandleReferences</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.HandleReferences"/></li>
        ///     <li><c>/HttpClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.HttpClass"/></li>
        ///     <li><c>/ImportRequiredTypes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes"/></li>
        ///     <li><c>/InjectionTokenType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.InjectionTokenType"/></li>
        ///     <li><c>/InlineNamedAny</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny"/></li>
        ///     <li><c>/InlineNamedDictionaries</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries"/></li>
        ///     <li><c>/Input</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Input"/></li>
        ///     <li><c>/MarkOptionalProperties</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties"/></li>
        ///     <li><c>/ModuleName</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ModuleName"/></li>
        ///     <li><c>/Namespace</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Namespace"/></li>
        ///     <li><c>/NullValue</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.NullValue"/></li>
        ///     <li><c>/OperationGenerationMode</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.OperationGenerationMode"/></li>
        ///     <li><c>/Output</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Output"/></li>
        ///     <li><c>/PromiseType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.PromiseType"/></li>
        ///     <li><c>/PropertyNameGeneratorType</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.PropertyNameGeneratorType"/></li>
        ///     <li><c>/ProtectedMethods</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/></li>
        ///     <li><c>/QueryNullValue</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.QueryNullValue"/></li>
        ///     <li><c>/ResponseClass</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ResponseClass"/></li>
        ///     <li><c>/RxJsVersion</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.RxJsVersion"/></li>
        ///     <li><c>/ServiceHost</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceHost"/></li>
        ///     <li><c>/ServiceSchemes</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/></li>
        ///     <li><c>/Template</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.Template"/></li>
        ///     <li><c>/TemplateDirectory</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TemplateDirectory"/></li>
        ///     <li><c>/TypeNameGenerator</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeNameGenerator"/></li>
        ///     <li><c>/TypeScriptVersion</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeScriptVersion"/></li>
        ///     <li><c>/TypeStyle</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeStyle"/></li>
        ///     <li><c>/UseGetBaseUrlMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod"/></li>
        ///     <li><c>/UseSingletonProvider</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider"/></li>
        ///     <li><c>/UseTransformOptionsMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod"/></li>
        ///     <li><c>/UseTransformResultMethod</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod"/></li>
        ///     <li><c>/WrapDtoExceptions</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions"/></li>
        ///     <li><c>/WrapResponseMethods</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/></li>
        ///     <li><c>/WrapResponses</c> via <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponses"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(NSwagSwaggerToTypeScriptClientSettings Settings, IReadOnlyCollection<Output> Output)> NSwagSwaggerToTypeScriptClient(CombinatorialConfigure<NSwagSwaggerToTypeScriptClientSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(NSwagSwaggerToTypeScriptClient, NSwagLogger, degreeOfParallelism, completeOnFailure);
        }
    }
    #region NSwagVersionSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagVersionSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("version")
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagListTypesSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagListTypesSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        /// <summary>
        ///   The nswag.json configuration file path.
        /// </summary>
        public virtual string File { get; internal set; }
        public virtual IReadOnlyDictionary<string, object> Variables => VariablesInternal.AsReadOnly();
        internal Dictionary<string,object> VariablesInternal { get; set; } = new Dictionary<string,object>(StringComparer.OrdinalIgnoreCase);
        /// <summary>
        ///   The path or paths to the .NET assemblies (comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> Assembly => AssemblyInternal.AsReadOnly();
        internal List<string> AssemblyInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The path to the assembly App.config or Web.config (optional).
        /// </summary>
        public virtual string AssemblyConfig { get; internal set; }
        /// <summary>
        ///   The paths to search for referenced assembly files (comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> ReferencePaths => ReferencePathsInternal.AsReadOnly();
        internal List<string> ReferencePathsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Determines if local Nuget's cache folder should be put in the ReferencePaths by default
        /// </summary>
        public virtual bool? UseNuGetCache { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("list-types")
              .Add("/File:{value}", File)
              .Add("/Variables:{value}", Variables, "{key}={value}")
              .Add("/Assembly:{value}", Assembly)
              .Add("/AssemblyConfig:{value}", AssemblyConfig)
              .Add("/ReferencePaths:{value}", ReferencePaths)
              .Add("/UseNuGetCache:{value}", UseNuGetCache)
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagListWebApiControllersSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagListWebApiControllersSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        /// <summary>
        ///   The nswag.json configuration file path.
        /// </summary>
        public virtual string File { get; internal set; }
        public virtual IReadOnlyDictionary<string, object> Variables => VariablesInternal.AsReadOnly();
        internal Dictionary<string,object> VariablesInternal { get; set; } = new Dictionary<string,object>(StringComparer.OrdinalIgnoreCase);
        /// <summary>
        ///   The path or paths to the .NET assemblies (comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> Assembly => AssemblyInternal.AsReadOnly();
        internal List<string> AssemblyInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The path to the assembly App.config or Web.config (optional).
        /// </summary>
        public virtual string AssemblyConfig { get; internal set; }
        /// <summary>
        ///   The paths to search for referenced assembly files (comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> ReferencePaths => ReferencePathsInternal.AsReadOnly();
        internal List<string> ReferencePathsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Determines if local Nuget's cache folder should be put in the ReferencePaths by default
        /// </summary>
        public virtual bool? UseNuGetCache { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("list-controllers")
              .Add("/File:{value}", File)
              .Add("/Variables:{value}", Variables, "{key}={value}")
              .Add("/Assembly:{value}", Assembly)
              .Add("/AssemblyConfig:{value}", AssemblyConfig)
              .Add("/ReferencePaths:{value}", ReferencePaths)
              .Add("/UseNuGetCache:{value}", UseNuGetCache)
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagTypesToOpenApiSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagTypesToOpenApiSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        /// <summary>
        ///   The output file path (optional).
        /// </summary>
        public virtual string Output { get; internal set; }
        /// <summary>
        ///   Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).
        /// </summary>
        public virtual SchemaType OutputType { get; internal set; }
        /// <summary>
        ///   The path or paths to the .NET assemblies (comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> Assembly => AssemblyInternal.AsReadOnly();
        internal List<string> AssemblyInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The path to the assembly App.config or Web.config (optional).
        /// </summary>
        public virtual string AssemblyConfig { get; internal set; }
        /// <summary>
        ///   The paths to search for referenced assembly files (comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> ReferencePaths => ReferencePathsInternal.AsReadOnly();
        internal List<string> ReferencePathsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Determines if local Nuget's cache folder should be put in the ReferencePaths by default
        /// </summary>
        public virtual bool? UseNuGetCache { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("types2openapi")
              .Add("/Output:{value}", Output)
              .Add("/OutputType:{value}", OutputType)
              .Add("/Assembly:{value}", Assembly)
              .Add("/AssemblyConfig:{value}", AssemblyConfig)
              .Add("/ReferencePaths:{value}", ReferencePaths)
              .Add("/UseNuGetCache:{value}", UseNuGetCache)
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagTypesToSwaggerSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagTypesToSwaggerSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        /// <summary>
        ///   Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).
        /// </summary>
        public virtual bool? AllowReferencesWithProperties { get; internal set; }
        /// <summary>
        ///   The class names.
        /// </summary>
        public virtual IReadOnlyList<string> ClassNames => ClassNamesInternal.AsReadOnly();
        internal List<string> ClassNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The default reference type null handling of dictionary value types (NotNull (default) or Null).
        /// </summary>
        public virtual ReferenceTypeNullHandling DefaultDictionaryValueReferenceTypeNullHandling { get; internal set; }
        /// <summary>
        ///   The default enum handling ('String' or 'Integer'), default: Integer.
        /// </summary>
        public virtual EnumHandling DefaultEnumHandling { get; internal set; }
        /// <summary>
        ///   The default property name handling ('Default' or 'CamelCase').
        /// </summary>
        public virtual PropertyNameHandling DefaultPropertyNameHandling { get; internal set; }
        /// <summary>
        ///   The default reference type null handling (Null (default) or NotNull).
        /// </summary>
        public virtual ReferenceTypeNullHandling DefaultReferenceTypeNullHandling { get; internal set; }
        /// <summary>
        ///   Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).
        /// </summary>
        public virtual bool? FlattenInheritanceHierarchy { get; internal set; }
        /// <summary>
        ///   Generate schemas for types in KnownTypeAttribute attributes (default: true).
        /// </summary>
        public virtual bool? GenerateKnownTypes { get; internal set; }
        /// <summary>
        ///   Generate xmlObject representation for definitions (default: false).
        /// </summary>
        public virtual bool? GenerateXmlObjects { get; internal set; }
        /// <summary>
        ///   Ignore properties with the ObsoleteAttribute (default: false).
        /// </summary>
        public virtual bool? IgnoreObsoleteProperties { get; internal set; }
        /// <summary>
        ///   The output file path (optional).
        /// </summary>
        public virtual string Output { get; internal set; }
        /// <summary>
        ///   Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).
        /// </summary>
        public virtual SchemaType OutputType { get; internal set; }
        /// <summary>
        ///   The path or paths to the .NET assemblies (comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> Assembly => AssemblyInternal.AsReadOnly();
        internal List<string> AssemblyInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The path to the assembly App.config or Web.config (optional).
        /// </summary>
        public virtual string AssemblyConfig { get; internal set; }
        /// <summary>
        ///   The paths to search for referenced assembly files (comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> ReferencePaths => ReferencePathsInternal.AsReadOnly();
        internal List<string> ReferencePathsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Determines if local Nuget's cache folder should be put in the ReferencePaths by default
        /// </summary>
        public virtual bool? UseNuGetCache { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("types2swagger")
              .Add("/AllowReferencesWithProperties:{value}", AllowReferencesWithProperties)
              .Add("/ClassNames:{value}", ClassNames)
              .Add("/DefaultDictionaryValueReferenceTypeNullHandling:{value}", DefaultDictionaryValueReferenceTypeNullHandling)
              .Add("/DefaultEnumHandling:{value}", DefaultEnumHandling)
              .Add("/DefaultPropertyNameHandling:{value}", DefaultPropertyNameHandling)
              .Add("/DefaultReferenceTypeNullHandling:{value}", DefaultReferenceTypeNullHandling)
              .Add("/FlattenInheritanceHierarchy:{value}", FlattenInheritanceHierarchy)
              .Add("/GenerateKnownTypes:{value}", GenerateKnownTypes)
              .Add("/GenerateXmlObjects:{value}", GenerateXmlObjects)
              .Add("/IgnoreObsoleteProperties:{value}", IgnoreObsoleteProperties)
              .Add("/Output:{value}", Output)
              .Add("/OutputType:{value}", OutputType)
              .Add("/Assembly:{value}", Assembly)
              .Add("/AssemblyConfig:{value}", AssemblyConfig)
              .Add("/ReferencePaths:{value}", ReferencePaths)
              .Add("/UseNuGetCache:{value}", UseNuGetCache)
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagWebApiToOpenApiSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagWebApiToOpenApiSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        /// <summary>
        ///   Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).
        /// </summary>
        public virtual bool? AllowNullableBodyParameters { get; internal set; }
        /// <summary>
        ///   Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).
        /// </summary>
        public virtual bool? AllowReferencesWithProperties { get; internal set; }
        /// <summary>
        ///   Sets the ASPNETCORE_ENVIRONMENT if provided (default: empty).
        /// </summary>
        public virtual string AspNetCoreEnvironment { get; internal set; }
        /// <summary>
        ///   DEPRECATED: The custom IContractResolver implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string ContractResolver { get; internal set; }
        /// <summary>
        ///   The CreateWebHostBuilder method in the form 'assemblyName:fullTypeName.methodName' or 'fullTypeName.methodName'.
        /// </summary>
        public virtual string CreateWebHostBuilderMethod { get; internal set; }
        /// <summary>
        ///   The default reference type null handling of dictionary value types (NotNull (default) or Null).
        /// </summary>
        public virtual ReferenceTypeNullHandling DefaultDictionaryValueReferenceTypeNullHandling { get; internal set; }
        /// <summary>
        ///   The default enum handling ('String' or 'Integer'), default: Integer.
        /// </summary>
        public virtual EnumHandling DefaultEnumHandling { get; internal set; }
        /// <summary>
        ///   The default property name handling ('Default' or 'CamelCase').
        /// </summary>
        public virtual PropertyNameHandling DefaultPropertyNameHandling { get; internal set; }
        /// <summary>
        ///   The default reference type null handling (Null (default) or NotNull).
        /// </summary>
        public virtual ReferenceTypeNullHandling DefaultReferenceTypeNullHandling { get; internal set; }
        /// <summary>
        ///   The default response reference type null handling (default: NotNull (default) or Null).
        /// </summary>
        public virtual ReferenceTypeNullHandling DefaultResponseReferenceTypeNullHandling { get; internal set; }
        /// <summary>
        ///   The document name to use in SwaggerDocumentProvider (default: v1).
        /// </summary>
        public virtual string DocumentName { get; internal set; }
        /// <summary>
        ///   The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual IReadOnlyList<string> DocumentProcessors => DocumentProcessorsInternal.AsReadOnly();
        internal List<string> DocumentProcessorsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Specifies the Swagger document template (may be a path or JSON, default: none).
        /// </summary>
        public virtual string DocumentTemplate { get; internal set; }
        /// <summary>
        ///   The excluded type names (same as JsonSchemaIgnoreAttribute).
        /// </summary>
        public virtual IReadOnlyList<string> ExcludedTypeNames => ExcludedTypeNamesInternal.AsReadOnly();
        internal List<string> ExcludedTypeNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).
        /// </summary>
        public virtual bool? FlattenInheritanceHierarchy { get; internal set; }
        /// <summary>
        ///   Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).
        /// </summary>
        public virtual bool? GenerateAbstractProperties { get; internal set; }
        /// <summary>
        ///   Generate the x-abstract flag on schemas (default: true).
        /// </summary>
        public virtual bool? GenerateAbstractSchemas { get; internal set; }
        /// <summary>
        ///   Generate a description with number to enum name mappings (for integer enums only, default: false).
        /// </summary>
        public virtual bool? GenerateEnumMappingDescription { get; internal set; }
        /// <summary>
        ///   Generate schemas for types in KnownTypeAttribute attributes (default: true).
        /// </summary>
        public virtual bool? GenerateKnownTypes { get; internal set; }
        /// <summary>
        ///   Generate xmlObject representation for definitions (default: false).
        /// </summary>
        public virtual bool? GenerateXmlObjects { get; internal set; }
        /// <summary>
        ///   Ignore properties with the ObsoleteAttribute (default: false).
        /// </summary>
        public virtual bool? IgnoreObsoleteProperties { get; internal set; }
        /// <summary>
        ///   Specify the description of the Swagger specification (ignored when DocumentTemplate is set).
        /// </summary>
        public virtual string InfoDescription { get; internal set; }
        /// <summary>
        ///   Specify the title of the Swagger specification (ignored when DocumentTemplate is set).
        /// </summary>
        public virtual string InfoTitle { get; internal set; }
        /// <summary>
        ///   Specify the version of the Swagger specification (default: 1.0.0, ignored when DocumentTemplate is set).
        /// </summary>
        public virtual string InfoVersion { get; internal set; }
        /// <summary>
        ///   The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual IReadOnlyList<string> OperationProcessors => OperationProcessorsInternal.AsReadOnly();
        internal List<string> OperationProcessorsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The custom ISchemaNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string SchemaNameGenerator { get; internal set; }
        /// <summary>
        ///   The custom JsonSerializerSettings implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string SerializerSettings { get; internal set; }
        /// <summary>
        ///   The basePath of the Swagger specification (optional).
        /// </summary>
        public virtual string ServiceBasePath { get; internal set; }
        /// <summary>
        ///   Overrides the service host of the web service (optional, use '.' to remove the hostname).
        /// </summary>
        public virtual string ServiceHost { get; internal set; }
        /// <summary>
        ///   Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').
        /// </summary>
        public virtual IReadOnlyList<string> ServiceSchemes => ServiceSchemesInternal.AsReadOnly();
        internal List<string> ServiceSchemesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The Startup class type in the form 'assemblyName:fullTypeName' or 'fullTypeName'.
        /// </summary>
        public virtual string Startup { get; internal set; }
        /// <summary>
        ///   The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string TypeNameGenerator { get; internal set; }
        /// <summary>
        ///   Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).
        /// </summary>
        public virtual bool? UseDocumentProvider { get; internal set; }
        /// <summary>
        ///   The output file path (optional).
        /// </summary>
        public virtual string Output { get; internal set; }
        /// <summary>
        ///   Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).
        /// </summary>
        public virtual SchemaType OutputType { get; internal set; }
        /// <summary>
        ///   The path or paths to the .NET assemblies (comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> Assembly => AssemblyInternal.AsReadOnly();
        internal List<string> AssemblyInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The path to the assembly App.config or Web.config (optional).
        /// </summary>
        public virtual string AssemblyConfig { get; internal set; }
        /// <summary>
        ///   The paths to search for referenced assembly files (comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> ReferencePaths => ReferencePathsInternal.AsReadOnly();
        internal List<string> ReferencePathsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Determines if local Nuget's cache folder should be put in the ReferencePaths by default
        /// </summary>
        public virtual bool? UseNuGetCache { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("webapi2openapi")
              .Add("/AllowNullableBodyParameters:{value}", AllowNullableBodyParameters)
              .Add("/AllowReferencesWithProperties:{value}", AllowReferencesWithProperties)
              .Add("/AspNetCoreEnvironment:{value}", AspNetCoreEnvironment)
              .Add("/ContractResolver:{value}", ContractResolver)
              .Add("/CreateWebHostBuilderMethod:{value}", CreateWebHostBuilderMethod)
              .Add("/DefaultDictionaryValueReferenceTypeNullHandling:{value}", DefaultDictionaryValueReferenceTypeNullHandling)
              .Add("/DefaultEnumHandling:{value}", DefaultEnumHandling)
              .Add("/DefaultPropertyNameHandling:{value}", DefaultPropertyNameHandling)
              .Add("/DefaultReferenceTypeNullHandling:{value}", DefaultReferenceTypeNullHandling)
              .Add("/DefaultResponseReferenceTypeNullHandling:{value}", DefaultResponseReferenceTypeNullHandling)
              .Add("/DocumentName:{value}", DocumentName)
              .Add("/DocumentProcessors:{value}", DocumentProcessors)
              .Add("/DocumentTemplate:{value}", DocumentTemplate)
              .Add("/ExcludedTypeNames:{value}", ExcludedTypeNames)
              .Add("/FlattenInheritanceHierarchy:{value}", FlattenInheritanceHierarchy)
              .Add("/GenerateAbstractProperties:{value}", GenerateAbstractProperties)
              .Add("/GenerateAbstractSchemas:{value}", GenerateAbstractSchemas)
              .Add("/GenerateEnumMappingDescription:{value}", GenerateEnumMappingDescription)
              .Add("/GenerateKnownTypes:{value}", GenerateKnownTypes)
              .Add("/GenerateXmlObjects:{value}", GenerateXmlObjects)
              .Add("/IgnoreObsoleteProperties:{value}", IgnoreObsoleteProperties)
              .Add("/InfoDescription:{value}", InfoDescription)
              .Add("/InfoTitle:{value}", InfoTitle)
              .Add("/InfoVersion:{value}", InfoVersion)
              .Add("/OperationProcessors:{value}", OperationProcessors)
              .Add("/SchemaNameGenerator:{value}", SchemaNameGenerator)
              .Add("/SerializerSettings:{value}", SerializerSettings)
              .Add("/ServiceBasePath:{value}", ServiceBasePath)
              .Add("/ServiceHost:{value}", ServiceHost)
              .Add("/ServiceSchemes:{value}", ServiceSchemes)
              .Add("/Startup:{value}", Startup)
              .Add("/TypeNameGenerator:{value}", TypeNameGenerator)
              .Add("/UseDocumentProvider:{value}", UseDocumentProvider)
              .Add("/Output:{value}", Output)
              .Add("/OutputType:{value}", OutputType)
              .Add("/Assembly:{value}", Assembly)
              .Add("/AssemblyConfig:{value}", AssemblyConfig)
              .Add("/ReferencePaths:{value}", ReferencePaths)
              .Add("/UseNuGetCache:{value}", UseNuGetCache)
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagWebApiToSwaggerSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagWebApiToSwaggerSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        /// <summary>
        ///   Specifies whether to add path parameters which are missing in the action method (default: true).
        /// </summary>
        public virtual bool? AddMissingPathParameters { get; internal set; }
        /// <summary>
        ///   Specifies whether the controllers are hosted by ASP.NET Core.
        /// </summary>
        public virtual bool? AspNetCore { get; internal set; }
        /// <summary>
        ///   The Web API controller full class name or empty to load all controllers from the assembly.
        /// </summary>
        public virtual string Controller { get; internal set; }
        /// <summary>
        ///   The Web API controller full class names or empty to load all controllers from the assembly (comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> Controllers => ControllersInternal.AsReadOnly();
        internal List<string> ControllersInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The Web API default URL template (default for Web API: 'api/{controller}/{id}'; for MVC projects: '{controller}/{action}/{id?}').
        /// </summary>
        public virtual string DefaultUrlTemplate { get; internal set; }
        /// <summary>
        ///   The included API versions used by the ApiVersionProcessor (comma separated, default: empty = all).
        /// </summary>
        public virtual IReadOnlyList<string> IncludedVersions => IncludedVersionsInternal.AsReadOnly();
        internal List<string> IncludedVersionsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Specifies whether to resolve MvcJsonOptions to infer serializer settings (recommended, default: false, only available when IsAspNetCore is set).
        /// </summary>
        public virtual bool? ResolveJsonOptions { get; internal set; }
        /// <summary>
        ///   Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).
        /// </summary>
        public virtual bool? AllowNullableBodyParameters { get; internal set; }
        /// <summary>
        ///   Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).
        /// </summary>
        public virtual bool? AllowReferencesWithProperties { get; internal set; }
        /// <summary>
        ///   Sets the ASPNETCORE_ENVIRONMENT if provided (default: empty).
        /// </summary>
        public virtual string AspNetCoreEnvironment { get; internal set; }
        /// <summary>
        ///   DEPRECATED: The custom IContractResolver implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string ContractResolver { get; internal set; }
        /// <summary>
        ///   The CreateWebHostBuilder method in the form 'assemblyName:fullTypeName.methodName' or 'fullTypeName.methodName'.
        /// </summary>
        public virtual string CreateWebHostBuilderMethod { get; internal set; }
        /// <summary>
        ///   The default reference type null handling of dictionary value types (NotNull (default) or Null).
        /// </summary>
        public virtual ReferenceTypeNullHandling DefaultDictionaryValueReferenceTypeNullHandling { get; internal set; }
        /// <summary>
        ///   The default enum handling ('String' or 'Integer'), default: Integer.
        /// </summary>
        public virtual EnumHandling DefaultEnumHandling { get; internal set; }
        /// <summary>
        ///   The default property name handling ('Default' or 'CamelCase').
        /// </summary>
        public virtual PropertyNameHandling DefaultPropertyNameHandling { get; internal set; }
        /// <summary>
        ///   The default reference type null handling (Null (default) or NotNull).
        /// </summary>
        public virtual ReferenceTypeNullHandling DefaultReferenceTypeNullHandling { get; internal set; }
        /// <summary>
        ///   The default response reference type null handling (default: NotNull (default) or Null).
        /// </summary>
        public virtual ReferenceTypeNullHandling DefaultResponseReferenceTypeNullHandling { get; internal set; }
        /// <summary>
        ///   The document name to use in SwaggerDocumentProvider (default: v1).
        /// </summary>
        public virtual string DocumentName { get; internal set; }
        /// <summary>
        ///   The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual IReadOnlyList<string> DocumentProcessors => DocumentProcessorsInternal.AsReadOnly();
        internal List<string> DocumentProcessorsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Specifies the Swagger document template (may be a path or JSON, default: none).
        /// </summary>
        public virtual string DocumentTemplate { get; internal set; }
        /// <summary>
        ///   The excluded type names (same as JsonSchemaIgnoreAttribute).
        /// </summary>
        public virtual IReadOnlyList<string> ExcludedTypeNames => ExcludedTypeNamesInternal.AsReadOnly();
        internal List<string> ExcludedTypeNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).
        /// </summary>
        public virtual bool? FlattenInheritanceHierarchy { get; internal set; }
        /// <summary>
        ///   Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).
        /// </summary>
        public virtual bool? GenerateAbstractProperties { get; internal set; }
        /// <summary>
        ///   Generate the x-abstract flag on schemas (default: true).
        /// </summary>
        public virtual bool? GenerateAbstractSchemas { get; internal set; }
        /// <summary>
        ///   Generate a description with number to enum name mappings (for integer enums only, default: false).
        /// </summary>
        public virtual bool? GenerateEnumMappingDescription { get; internal set; }
        /// <summary>
        ///   Generate schemas for types in KnownTypeAttribute attributes (default: true).
        /// </summary>
        public virtual bool? GenerateKnownTypes { get; internal set; }
        /// <summary>
        ///   Generate xmlObject representation for definitions (default: false).
        /// </summary>
        public virtual bool? GenerateXmlObjects { get; internal set; }
        /// <summary>
        ///   Ignore properties with the ObsoleteAttribute (default: false).
        /// </summary>
        public virtual bool? IgnoreObsoleteProperties { get; internal set; }
        /// <summary>
        ///   Specify the description of the Swagger specification (ignored when DocumentTemplate is set).
        /// </summary>
        public virtual string InfoDescription { get; internal set; }
        /// <summary>
        ///   Specify the title of the Swagger specification (ignored when DocumentTemplate is set).
        /// </summary>
        public virtual string InfoTitle { get; internal set; }
        /// <summary>
        ///   Specify the version of the Swagger specification (default: 1.0.0, ignored when DocumentTemplate is set).
        /// </summary>
        public virtual string InfoVersion { get; internal set; }
        /// <summary>
        ///   The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual IReadOnlyList<string> OperationProcessors => OperationProcessorsInternal.AsReadOnly();
        internal List<string> OperationProcessorsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The custom ISchemaNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string SchemaNameGenerator { get; internal set; }
        /// <summary>
        ///   The custom JsonSerializerSettings implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string SerializerSettings { get; internal set; }
        /// <summary>
        ///   The basePath of the Swagger specification (optional).
        /// </summary>
        public virtual string ServiceBasePath { get; internal set; }
        /// <summary>
        ///   Overrides the service host of the web service (optional, use '.' to remove the hostname).
        /// </summary>
        public virtual string ServiceHost { get; internal set; }
        /// <summary>
        ///   Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').
        /// </summary>
        public virtual IReadOnlyList<string> ServiceSchemes => ServiceSchemesInternal.AsReadOnly();
        internal List<string> ServiceSchemesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The Startup class type in the form 'assemblyName:fullTypeName' or 'fullTypeName'.
        /// </summary>
        public virtual string Startup { get; internal set; }
        /// <summary>
        ///   The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string TypeNameGenerator { get; internal set; }
        /// <summary>
        ///   Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).
        /// </summary>
        public virtual bool? UseDocumentProvider { get; internal set; }
        /// <summary>
        ///   The output file path (optional).
        /// </summary>
        public virtual string Output { get; internal set; }
        /// <summary>
        ///   Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).
        /// </summary>
        public virtual SchemaType OutputType { get; internal set; }
        /// <summary>
        ///   The path or paths to the .NET assemblies (comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> Assembly => AssemblyInternal.AsReadOnly();
        internal List<string> AssemblyInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The path to the assembly App.config or Web.config (optional).
        /// </summary>
        public virtual string AssemblyConfig { get; internal set; }
        /// <summary>
        ///   The paths to search for referenced assembly files (comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> ReferencePaths => ReferencePathsInternal.AsReadOnly();
        internal List<string> ReferencePathsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Determines if local Nuget's cache folder should be put in the ReferencePaths by default
        /// </summary>
        public virtual bool? UseNuGetCache { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("webapi2swagger")
              .Add("/AddMissingPathParameters:{value}", AddMissingPathParameters)
              .Add("/AspNetCore:{value}", AspNetCore)
              .Add("/Controller:{value}", Controller)
              .Add("/Controllers:{value}", Controllers)
              .Add("/DefaultUrlTemplate:{value}", DefaultUrlTemplate)
              .Add("/IncludedVersions:{value}", IncludedVersions)
              .Add("/ResolveJsonOptions:{value}", ResolveJsonOptions)
              .Add("/AllowNullableBodyParameters:{value}", AllowNullableBodyParameters)
              .Add("/AllowReferencesWithProperties:{value}", AllowReferencesWithProperties)
              .Add("/AspNetCoreEnvironment:{value}", AspNetCoreEnvironment)
              .Add("/ContractResolver:{value}", ContractResolver)
              .Add("/CreateWebHostBuilderMethod:{value}", CreateWebHostBuilderMethod)
              .Add("/DefaultDictionaryValueReferenceTypeNullHandling:{value}", DefaultDictionaryValueReferenceTypeNullHandling)
              .Add("/DefaultEnumHandling:{value}", DefaultEnumHandling)
              .Add("/DefaultPropertyNameHandling:{value}", DefaultPropertyNameHandling)
              .Add("/DefaultReferenceTypeNullHandling:{value}", DefaultReferenceTypeNullHandling)
              .Add("/DefaultResponseReferenceTypeNullHandling:{value}", DefaultResponseReferenceTypeNullHandling)
              .Add("/DocumentName:{value}", DocumentName)
              .Add("/DocumentProcessors:{value}", DocumentProcessors)
              .Add("/DocumentTemplate:{value}", DocumentTemplate)
              .Add("/ExcludedTypeNames:{value}", ExcludedTypeNames)
              .Add("/FlattenInheritanceHierarchy:{value}", FlattenInheritanceHierarchy)
              .Add("/GenerateAbstractProperties:{value}", GenerateAbstractProperties)
              .Add("/GenerateAbstractSchemas:{value}", GenerateAbstractSchemas)
              .Add("/GenerateEnumMappingDescription:{value}", GenerateEnumMappingDescription)
              .Add("/GenerateKnownTypes:{value}", GenerateKnownTypes)
              .Add("/GenerateXmlObjects:{value}", GenerateXmlObjects)
              .Add("/IgnoreObsoleteProperties:{value}", IgnoreObsoleteProperties)
              .Add("/InfoDescription:{value}", InfoDescription)
              .Add("/InfoTitle:{value}", InfoTitle)
              .Add("/InfoVersion:{value}", InfoVersion)
              .Add("/OperationProcessors:{value}", OperationProcessors)
              .Add("/SchemaNameGenerator:{value}", SchemaNameGenerator)
              .Add("/SerializerSettings:{value}", SerializerSettings)
              .Add("/ServiceBasePath:{value}", ServiceBasePath)
              .Add("/ServiceHost:{value}", ServiceHost)
              .Add("/ServiceSchemes:{value}", ServiceSchemes)
              .Add("/Startup:{value}", Startup)
              .Add("/TypeNameGenerator:{value}", TypeNameGenerator)
              .Add("/UseDocumentProvider:{value}", UseDocumentProvider)
              .Add("/Output:{value}", Output)
              .Add("/OutputType:{value}", OutputType)
              .Add("/Assembly:{value}", Assembly)
              .Add("/AssemblyConfig:{value}", AssemblyConfig)
              .Add("/ReferencePaths:{value}", ReferencePaths)
              .Add("/UseNuGetCache:{value}", UseNuGetCache)
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagAspNetCoreToOpenApiSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagAspNetCoreToOpenApiSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        /// <summary>
        ///   Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).
        /// </summary>
        public virtual bool? AllowNullableBodyParameters { get; internal set; }
        /// <summary>
        ///   Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).
        /// </summary>
        public virtual bool? AllowReferencesWithProperties { get; internal set; }
        /// <summary>
        ///   Sets the ASPNETCORE_ENVIRONMENT if provided (default: empty).
        /// </summary>
        public virtual string AspNetCoreEnvironment { get; internal set; }
        /// <summary>
        ///   DEPRECATED: The custom IContractResolver implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string ContractResolver { get; internal set; }
        /// <summary>
        ///   The CreateWebHostBuilder method in the form 'assemblyName:fullTypeName.methodName' or 'fullTypeName.methodName'.
        /// </summary>
        public virtual string CreateWebHostBuilderMethod { get; internal set; }
        /// <summary>
        ///   The default reference type null handling of dictionary value types (NotNull (default) or Null).
        /// </summary>
        public virtual ReferenceTypeNullHandling DefaultDictionaryValueReferenceTypeNullHandling { get; internal set; }
        /// <summary>
        ///   The default enum handling ('String' or 'Integer'), default: Integer.
        /// </summary>
        public virtual EnumHandling DefaultEnumHandling { get; internal set; }
        /// <summary>
        ///   The default property name handling ('Default' or 'CamelCase').
        /// </summary>
        public virtual PropertyNameHandling DefaultPropertyNameHandling { get; internal set; }
        /// <summary>
        ///   The default reference type null handling (Null (default) or NotNull).
        /// </summary>
        public virtual ReferenceTypeNullHandling DefaultReferenceTypeNullHandling { get; internal set; }
        /// <summary>
        ///   The default response reference type null handling (default: NotNull (default) or Null).
        /// </summary>
        public virtual ReferenceTypeNullHandling DefaultResponseReferenceTypeNullHandling { get; internal set; }
        /// <summary>
        ///   The document name to use in SwaggerDocumentProvider (default: v1).
        /// </summary>
        public virtual string DocumentName { get; internal set; }
        /// <summary>
        ///   The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual IReadOnlyList<string> DocumentProcessors => DocumentProcessorsInternal.AsReadOnly();
        internal List<string> DocumentProcessorsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Specifies the Swagger document template (may be a path or JSON, default: none).
        /// </summary>
        public virtual string DocumentTemplate { get; internal set; }
        /// <summary>
        ///   The excluded type names (same as JsonSchemaIgnoreAttribute).
        /// </summary>
        public virtual IReadOnlyList<string> ExcludedTypeNames => ExcludedTypeNamesInternal.AsReadOnly();
        internal List<string> ExcludedTypeNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).
        /// </summary>
        public virtual bool? FlattenInheritanceHierarchy { get; internal set; }
        /// <summary>
        ///   Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).
        /// </summary>
        public virtual bool? GenerateAbstractProperties { get; internal set; }
        /// <summary>
        ///   Generate the x-abstract flag on schemas (default: true).
        /// </summary>
        public virtual bool? GenerateAbstractSchemas { get; internal set; }
        /// <summary>
        ///   Generate a description with number to enum name mappings (for integer enums only, default: false).
        /// </summary>
        public virtual bool? GenerateEnumMappingDescription { get; internal set; }
        /// <summary>
        ///   Generate schemas for types in KnownTypeAttribute attributes (default: true).
        /// </summary>
        public virtual bool? GenerateKnownTypes { get; internal set; }
        /// <summary>
        ///   Generate xmlObject representation for definitions (default: false).
        /// </summary>
        public virtual bool? GenerateXmlObjects { get; internal set; }
        /// <summary>
        ///   Ignore properties with the ObsoleteAttribute (default: false).
        /// </summary>
        public virtual bool? IgnoreObsoleteProperties { get; internal set; }
        /// <summary>
        ///   Specify the description of the Swagger specification (ignored when DocumentTemplate is set).
        /// </summary>
        public virtual string InfoDescription { get; internal set; }
        /// <summary>
        ///   Specify the title of the Swagger specification (ignored when DocumentTemplate is set).
        /// </summary>
        public virtual string InfoTitle { get; internal set; }
        /// <summary>
        ///   Specify the version of the Swagger specification (default: 1.0.0, ignored when DocumentTemplate is set).
        /// </summary>
        public virtual string InfoVersion { get; internal set; }
        /// <summary>
        ///   The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual IReadOnlyList<string> OperationProcessors => OperationProcessorsInternal.AsReadOnly();
        internal List<string> OperationProcessorsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The custom ISchemaNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string SchemaNameGenerator { get; internal set; }
        /// <summary>
        ///   The custom JsonSerializerSettings implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string SerializerSettings { get; internal set; }
        /// <summary>
        ///   The basePath of the Swagger specification (optional).
        /// </summary>
        public virtual string ServiceBasePath { get; internal set; }
        /// <summary>
        ///   Overrides the service host of the web service (optional, use '.' to remove the hostname).
        /// </summary>
        public virtual string ServiceHost { get; internal set; }
        /// <summary>
        ///   Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').
        /// </summary>
        public virtual IReadOnlyList<string> ServiceSchemes => ServiceSchemesInternal.AsReadOnly();
        internal List<string> ServiceSchemesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The Startup class type in the form 'assemblyName:fullTypeName' or 'fullTypeName'.
        /// </summary>
        public virtual string Startup { get; internal set; }
        /// <summary>
        ///   The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string TypeNameGenerator { get; internal set; }
        /// <summary>
        ///   Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).
        /// </summary>
        public virtual bool? UseDocumentProvider { get; internal set; }
        /// <summary>
        ///   The output file path (optional).
        /// </summary>
        public virtual string Output { get; internal set; }
        /// <summary>
        ///   Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).
        /// </summary>
        public virtual SchemaType OutputType { get; internal set; }
        /// <summary>
        ///   The path or paths to the .NET assemblies (comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> Assembly => AssemblyInternal.AsReadOnly();
        internal List<string> AssemblyInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The path to the assembly App.config or Web.config (optional).
        /// </summary>
        public virtual string AssemblyConfig { get; internal set; }
        /// <summary>
        ///   The paths to search for referenced assembly files (comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> ReferencePaths => ReferencePathsInternal.AsReadOnly();
        internal List<string> ReferencePathsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Determines if local Nuget's cache folder should be put in the ReferencePaths by default
        /// </summary>
        public virtual bool? UseNuGetCache { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("aspnetcore2openapi")
              .Add("/AllowNullableBodyParameters:{value}", AllowNullableBodyParameters)
              .Add("/AllowReferencesWithProperties:{value}", AllowReferencesWithProperties)
              .Add("/AspNetCoreEnvironment:{value}", AspNetCoreEnvironment)
              .Add("/ContractResolver:{value}", ContractResolver)
              .Add("/CreateWebHostBuilderMethod:{value}", CreateWebHostBuilderMethod)
              .Add("/DefaultDictionaryValueReferenceTypeNullHandling:{value}", DefaultDictionaryValueReferenceTypeNullHandling)
              .Add("/DefaultEnumHandling:{value}", DefaultEnumHandling)
              .Add("/DefaultPropertyNameHandling:{value}", DefaultPropertyNameHandling)
              .Add("/DefaultReferenceTypeNullHandling:{value}", DefaultReferenceTypeNullHandling)
              .Add("/DefaultResponseReferenceTypeNullHandling:{value}", DefaultResponseReferenceTypeNullHandling)
              .Add("/DocumentName:{value}", DocumentName)
              .Add("/DocumentProcessors:{value}", DocumentProcessors)
              .Add("/DocumentTemplate:{value}", DocumentTemplate)
              .Add("/ExcludedTypeNames:{value}", ExcludedTypeNames)
              .Add("/FlattenInheritanceHierarchy:{value}", FlattenInheritanceHierarchy)
              .Add("/GenerateAbstractProperties:{value}", GenerateAbstractProperties)
              .Add("/GenerateAbstractSchemas:{value}", GenerateAbstractSchemas)
              .Add("/GenerateEnumMappingDescription:{value}", GenerateEnumMappingDescription)
              .Add("/GenerateKnownTypes:{value}", GenerateKnownTypes)
              .Add("/GenerateXmlObjects:{value}", GenerateXmlObjects)
              .Add("/IgnoreObsoleteProperties:{value}", IgnoreObsoleteProperties)
              .Add("/InfoDescription:{value}", InfoDescription)
              .Add("/InfoTitle:{value}", InfoTitle)
              .Add("/InfoVersion:{value}", InfoVersion)
              .Add("/OperationProcessors:{value}", OperationProcessors)
              .Add("/SchemaNameGenerator:{value}", SchemaNameGenerator)
              .Add("/SerializerSettings:{value}", SerializerSettings)
              .Add("/ServiceBasePath:{value}", ServiceBasePath)
              .Add("/ServiceHost:{value}", ServiceHost)
              .Add("/ServiceSchemes:{value}", ServiceSchemes)
              .Add("/Startup:{value}", Startup)
              .Add("/TypeNameGenerator:{value}", TypeNameGenerator)
              .Add("/UseDocumentProvider:{value}", UseDocumentProvider)
              .Add("/Output:{value}", Output)
              .Add("/OutputType:{value}", OutputType)
              .Add("/Assembly:{value}", Assembly)
              .Add("/AssemblyConfig:{value}", AssemblyConfig)
              .Add("/ReferencePaths:{value}", ReferencePaths)
              .Add("/UseNuGetCache:{value}", UseNuGetCache)
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagAspNetCoreToSwaggerSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagAspNetCoreToSwaggerSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        /// <summary>
        ///   The ASP.NET Core API Explorer group names to include (comma separated, default: empty = all).
        /// </summary>
        public virtual IReadOnlyList<string> ApiGroupNames => ApiGroupNamesInternal.AsReadOnly();
        internal List<string> ApiGroupNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The configuration to use.
        /// </summary>
        public virtual string Configuration { get; internal set; }
        /// <summary>
        ///   The MSBuild project extensions path. Defaults to "obj".
        /// </summary>
        public virtual string MSBuildProjectExtensionsPath { get; internal set; }
        /// <summary>
        ///   Don't build the project. Only use this when the build is up-to-date.
        /// </summary>
        public virtual bool? NoBuild { get; internal set; }
        /// <summary>
        ///   The working directory to use.
        /// </summary>
        public virtual string NSwagWorkingDirectory { get; internal set; }
        /// <summary>
        ///   The project to use.
        /// </summary>
        public virtual string Project { get; internal set; }
        /// <summary>
        ///   Parameters without default value are always required(i.e. api explorer info and only optional when default is set, legacy, default: false).
        /// </summary>
        public virtual bool? RequireParametersWithoutDefault { get; internal set; }
        /// <summary>
        ///   The runtime to use.
        /// </summary>
        public virtual string Runtime { get; internal set; }
        /// <summary>
        ///   The target framework to use.
        /// </summary>
        public virtual string TargetFramework { get; internal set; }
        /// <summary>
        ///   Print verbose output.
        /// </summary>
        public virtual bool? Verbose { get; internal set; }
        /// <summary>
        ///   Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).
        /// </summary>
        public virtual bool? AllowNullableBodyParameters { get; internal set; }
        /// <summary>
        ///   Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).
        /// </summary>
        public virtual bool? AllowReferencesWithProperties { get; internal set; }
        /// <summary>
        ///   Sets the ASPNETCORE_ENVIRONMENT if provided (default: empty).
        /// </summary>
        public virtual string AspNetCoreEnvironment { get; internal set; }
        /// <summary>
        ///   DEPRECATED: The custom IContractResolver implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string ContractResolver { get; internal set; }
        /// <summary>
        ///   The CreateWebHostBuilder method in the form 'assemblyName:fullTypeName.methodName' or 'fullTypeName.methodName'.
        /// </summary>
        public virtual string CreateWebHostBuilderMethod { get; internal set; }
        /// <summary>
        ///   The default reference type null handling of dictionary value types (NotNull (default) or Null).
        /// </summary>
        public virtual ReferenceTypeNullHandling DefaultDictionaryValueReferenceTypeNullHandling { get; internal set; }
        /// <summary>
        ///   The default enum handling ('String' or 'Integer'), default: Integer.
        /// </summary>
        public virtual EnumHandling DefaultEnumHandling { get; internal set; }
        /// <summary>
        ///   The default property name handling ('Default' or 'CamelCase').
        /// </summary>
        public virtual PropertyNameHandling DefaultPropertyNameHandling { get; internal set; }
        /// <summary>
        ///   The default reference type null handling (Null (default) or NotNull).
        /// </summary>
        public virtual ReferenceTypeNullHandling DefaultReferenceTypeNullHandling { get; internal set; }
        /// <summary>
        ///   The default response reference type null handling (default: NotNull (default) or Null).
        /// </summary>
        public virtual ReferenceTypeNullHandling DefaultResponseReferenceTypeNullHandling { get; internal set; }
        /// <summary>
        ///   The document name to use in SwaggerDocumentProvider (default: v1).
        /// </summary>
        public virtual string DocumentName { get; internal set; }
        /// <summary>
        ///   The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual IReadOnlyList<string> DocumentProcessors => DocumentProcessorsInternal.AsReadOnly();
        internal List<string> DocumentProcessorsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Specifies the Swagger document template (may be a path or JSON, default: none).
        /// </summary>
        public virtual string DocumentTemplate { get; internal set; }
        /// <summary>
        ///   The excluded type names (same as JsonSchemaIgnoreAttribute).
        /// </summary>
        public virtual IReadOnlyList<string> ExcludedTypeNames => ExcludedTypeNamesInternal.AsReadOnly();
        internal List<string> ExcludedTypeNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).
        /// </summary>
        public virtual bool? FlattenInheritanceHierarchy { get; internal set; }
        /// <summary>
        ///   Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).
        /// </summary>
        public virtual bool? GenerateAbstractProperties { get; internal set; }
        /// <summary>
        ///   Generate the x-abstract flag on schemas (default: true).
        /// </summary>
        public virtual bool? GenerateAbstractSchemas { get; internal set; }
        /// <summary>
        ///   Generate a description with number to enum name mappings (for integer enums only, default: false).
        /// </summary>
        public virtual bool? GenerateEnumMappingDescription { get; internal set; }
        /// <summary>
        ///   Generate schemas for types in KnownTypeAttribute attributes (default: true).
        /// </summary>
        public virtual bool? GenerateKnownTypes { get; internal set; }
        /// <summary>
        ///   Generate xmlObject representation for definitions (default: false).
        /// </summary>
        public virtual bool? GenerateXmlObjects { get; internal set; }
        /// <summary>
        ///   Ignore properties with the ObsoleteAttribute (default: false).
        /// </summary>
        public virtual bool? IgnoreObsoleteProperties { get; internal set; }
        /// <summary>
        ///   Specify the description of the Swagger specification (ignored when DocumentTemplate is set).
        /// </summary>
        public virtual string InfoDescription { get; internal set; }
        /// <summary>
        ///   Specify the title of the Swagger specification (ignored when DocumentTemplate is set).
        /// </summary>
        public virtual string InfoTitle { get; internal set; }
        /// <summary>
        ///   Specify the version of the Swagger specification (default: 1.0.0, ignored when DocumentTemplate is set).
        /// </summary>
        public virtual string InfoVersion { get; internal set; }
        /// <summary>
        ///   The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual IReadOnlyList<string> OperationProcessors => OperationProcessorsInternal.AsReadOnly();
        internal List<string> OperationProcessorsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The custom ISchemaNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string SchemaNameGenerator { get; internal set; }
        /// <summary>
        ///   The custom JsonSerializerSettings implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string SerializerSettings { get; internal set; }
        /// <summary>
        ///   The basePath of the Swagger specification (optional).
        /// </summary>
        public virtual string ServiceBasePath { get; internal set; }
        /// <summary>
        ///   Overrides the service host of the web service (optional, use '.' to remove the hostname).
        /// </summary>
        public virtual string ServiceHost { get; internal set; }
        /// <summary>
        ///   Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').
        /// </summary>
        public virtual IReadOnlyList<string> ServiceSchemes => ServiceSchemesInternal.AsReadOnly();
        internal List<string> ServiceSchemesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The Startup class type in the form 'assemblyName:fullTypeName' or 'fullTypeName'.
        /// </summary>
        public virtual string Startup { get; internal set; }
        /// <summary>
        ///   The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string TypeNameGenerator { get; internal set; }
        /// <summary>
        ///   Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).
        /// </summary>
        public virtual bool? UseDocumentProvider { get; internal set; }
        /// <summary>
        ///   The output file path (optional).
        /// </summary>
        public virtual string Output { get; internal set; }
        /// <summary>
        ///   Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).
        /// </summary>
        public virtual SchemaType OutputType { get; internal set; }
        /// <summary>
        ///   The path or paths to the .NET assemblies (comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> Assembly => AssemblyInternal.AsReadOnly();
        internal List<string> AssemblyInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The path to the assembly App.config or Web.config (optional).
        /// </summary>
        public virtual string AssemblyConfig { get; internal set; }
        /// <summary>
        ///   The paths to search for referenced assembly files (comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> ReferencePaths => ReferencePathsInternal.AsReadOnly();
        internal List<string> ReferencePathsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Determines if local Nuget's cache folder should be put in the ReferencePaths by default
        /// </summary>
        public virtual bool? UseNuGetCache { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("aspnetcore2swagger")
              .Add("/ApiGroupNames:{value}", ApiGroupNames)
              .Add("/Configuration:{value}", Configuration)
              .Add("/MSBuildProjectExtensionsPath:{value}", MSBuildProjectExtensionsPath)
              .Add("/NoBuild:{value}", NoBuild)
              .Add("/WorkingDirectory:{value}", NSwagWorkingDirectory)
              .Add("/Project:{value}", Project)
              .Add("/RequireParametersWithoutDefault:{value}", RequireParametersWithoutDefault)
              .Add("/Runtime:{value}", Runtime)
              .Add("/TargetFramework:{value}", TargetFramework)
              .Add("/Verbose:{value}", Verbose)
              .Add("/AllowNullableBodyParameters:{value}", AllowNullableBodyParameters)
              .Add("/AllowReferencesWithProperties:{value}", AllowReferencesWithProperties)
              .Add("/AspNetCoreEnvironment:{value}", AspNetCoreEnvironment)
              .Add("/ContractResolver:{value}", ContractResolver)
              .Add("/CreateWebHostBuilderMethod:{value}", CreateWebHostBuilderMethod)
              .Add("/DefaultDictionaryValueReferenceTypeNullHandling:{value}", DefaultDictionaryValueReferenceTypeNullHandling)
              .Add("/DefaultEnumHandling:{value}", DefaultEnumHandling)
              .Add("/DefaultPropertyNameHandling:{value}", DefaultPropertyNameHandling)
              .Add("/DefaultReferenceTypeNullHandling:{value}", DefaultReferenceTypeNullHandling)
              .Add("/DefaultResponseReferenceTypeNullHandling:{value}", DefaultResponseReferenceTypeNullHandling)
              .Add("/DocumentName:{value}", DocumentName)
              .Add("/DocumentProcessors:{value}", DocumentProcessors)
              .Add("/DocumentTemplate:{value}", DocumentTemplate)
              .Add("/ExcludedTypeNames:{value}", ExcludedTypeNames)
              .Add("/FlattenInheritanceHierarchy:{value}", FlattenInheritanceHierarchy)
              .Add("/GenerateAbstractProperties:{value}", GenerateAbstractProperties)
              .Add("/GenerateAbstractSchemas:{value}", GenerateAbstractSchemas)
              .Add("/GenerateEnumMappingDescription:{value}", GenerateEnumMappingDescription)
              .Add("/GenerateKnownTypes:{value}", GenerateKnownTypes)
              .Add("/GenerateXmlObjects:{value}", GenerateXmlObjects)
              .Add("/IgnoreObsoleteProperties:{value}", IgnoreObsoleteProperties)
              .Add("/InfoDescription:{value}", InfoDescription)
              .Add("/InfoTitle:{value}", InfoTitle)
              .Add("/InfoVersion:{value}", InfoVersion)
              .Add("/OperationProcessors:{value}", OperationProcessors)
              .Add("/SchemaNameGenerator:{value}", SchemaNameGenerator)
              .Add("/SerializerSettings:{value}", SerializerSettings)
              .Add("/ServiceBasePath:{value}", ServiceBasePath)
              .Add("/ServiceHost:{value}", ServiceHost)
              .Add("/ServiceSchemes:{value}", ServiceSchemes)
              .Add("/Startup:{value}", Startup)
              .Add("/TypeNameGenerator:{value}", TypeNameGenerator)
              .Add("/UseDocumentProvider:{value}", UseDocumentProvider)
              .Add("/Output:{value}", Output)
              .Add("/OutputType:{value}", OutputType)
              .Add("/Assembly:{value}", Assembly)
              .Add("/AssemblyConfig:{value}", AssemblyConfig)
              .Add("/ReferencePaths:{value}", ReferencePaths)
              .Add("/UseNuGetCache:{value}", UseNuGetCache)
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagCreateDocumentSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagCreateDocumentSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("new")
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagExecuteDocumentSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagExecuteDocumentSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        public virtual string Input { get; internal set; }
        public virtual IReadOnlyDictionary<string, object> Variables => VariablesInternal.AsReadOnly();
        internal Dictionary<string,object> VariablesInternal { get; set; } = new Dictionary<string,object>(StringComparer.OrdinalIgnoreCase);
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("run")
              .Add("/Input:{value}", Input)
              .Add("/Variables:{value}", Variables, "{key}={value}")
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagJsonSchemaToCSharpSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagJsonSchemaToCSharpSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        /// <summary>
        ///   The any .NET type (default: 'object').
        /// </summary>
        public virtual string AnyType { get; internal set; }
        /// <summary>
        ///   The generic array .NET instance type (default: empty = ArrayType).
        /// </summary>
        public virtual string ArrayInstanceType { get; internal set; }
        /// <summary>
        ///   The generic array .NET type (default: 'ObservableCollection').
        /// </summary>
        public virtual string ArrayType { get; internal set; }
        /// <summary>
        ///   The date time .NET type (default: 'DateTime').
        /// </summary>
        public virtual string DateTimeType { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET instance type (default: empty = DictionaryType).
        /// </summary>
        public virtual string DictionaryInstanceType { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET type (default: 'Dictionary').
        /// </summary>
        public virtual string DictionaryType { get; internal set; }
        /// <summary>
        ///   Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).
        /// </summary>
        public virtual bool? GenerateOptionalPropertiesAsNullable { get; internal set; }
        /// <summary>
        ///   The class name of the root schema.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   The namespace of the generated classes.
        /// </summary>
        public virtual string Namespace { get; internal set; }
        /// <summary>
        ///   Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).
        /// </summary>
        public virtual bool? RequiredPropertiesMustBeDefined { get; internal set; }
        /// <summary>
        ///   A file path or URL to the data or the JSON data itself.
        /// </summary>
        public virtual string Input { get; internal set; }
        /// <summary>
        ///   Overrides the service host of the web document (optional, use '.' to remove the hostname).
        /// </summary>
        public virtual string ServiceHost { get; internal set; }
        /// <summary>
        ///   Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').
        /// </summary>
        public virtual IReadOnlyList<string> ServiceSchemes => ServiceSchemesInternal.AsReadOnly();
        internal List<string> ServiceSchemesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The output file path (optional).
        /// </summary>
        public virtual string Output { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("jsonschema2csclient")
              .Add("/AnyType:{value}", AnyType)
              .Add("/ArrayInstanceType:{value}", ArrayInstanceType)
              .Add("/ArrayType:{value}", ArrayType)
              .Add("/DateTimeType:{value}", DateTimeType)
              .Add("/DictionaryInstanceType:{value}", DictionaryInstanceType)
              .Add("/DictionaryType:{value}", DictionaryType)
              .Add("/GenerateOptionalPropertiesAsNullable:{value}", GenerateOptionalPropertiesAsNullable)
              .Add("/Name:{value}", Name)
              .Add("/Namespace:{value}", Namespace)
              .Add("/RequiredPropertiesMustBeDefined:{value}", RequiredPropertiesMustBeDefined)
              .Add("/Input:{value}", Input)
              .Add("/ServiceHost:{value}", ServiceHost)
              .Add("/ServiceSchemes:{value}", ServiceSchemes)
              .Add("/Output:{value}", Output)
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagJsonSchemaToTypeScriptSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagJsonSchemaToTypeScriptSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        /// <summary>
        ///   The type name of the root schema.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   A file path or URL to the data or the JSON data itself.
        /// </summary>
        public virtual string Input { get; internal set; }
        /// <summary>
        ///   Overrides the service host of the web document (optional, use '.' to remove the hostname).
        /// </summary>
        public virtual string ServiceHost { get; internal set; }
        /// <summary>
        ///   Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').
        /// </summary>
        public virtual IReadOnlyList<string> ServiceSchemes => ServiceSchemesInternal.AsReadOnly();
        internal List<string> ServiceSchemesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The output file path (optional).
        /// </summary>
        public virtual string Output { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("jsonschema2tsclient")
              .Add("/Name:{value}", Name)
              .Add("/Input:{value}", Input)
              .Add("/ServiceHost:{value}", ServiceHost)
              .Add("/ServiceSchemes:{value}", ServiceSchemes)
              .Add("/Output:{value}", Output)
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagOpenApiToCSharpClientSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagOpenApiToCSharpClientSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        /// <summary>
        ///   The additional contract namespace usages.
        /// </summary>
        public virtual IReadOnlyList<string> AdditionalContractNamespaceUsages => AdditionalContractNamespaceUsagesInternal.AsReadOnly();
        internal List<string> AdditionalContractNamespaceUsagesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The additional namespace usages.
        /// </summary>
        public virtual IReadOnlyList<string> AdditionalNamespaceUsages => AdditionalNamespaceUsagesInternal.AsReadOnly();
        internal List<string> AdditionalNamespaceUsagesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The any .NET type (default: 'object').
        /// </summary>
        public virtual string AnyType { get; internal set; }
        /// <summary>
        ///   The generic array .NET type (default: 'Collection').
        /// </summary>
        public virtual string ArrayBaseType { get; internal set; }
        /// <summary>
        ///   The generic array .NET instance type (default: empty = ArrayType).
        /// </summary>
        public virtual string ArrayInstanceType { get; internal set; }
        /// <summary>
        ///   The generic array .NET type (default: 'ICollection').
        /// </summary>
        public virtual string ArrayType { get; internal set; }
        /// <summary>
        ///   The class name of the generated client.
        /// </summary>
        public virtual string ClassName { get; internal set; }
        /// <summary>
        ///   The CSharp class style, 'Poco' or 'Inpc' (default: 'Poco').
        /// </summary>
        public virtual CSharpClassStyle ClassStyle { get; internal set; }
        /// <summary>
        ///   The date time .NET type (default: 'DateTimeOffset').
        /// </summary>
        public virtual string DateTimeType { get; internal set; }
        /// <summary>
        ///   The date .NET type (default: 'DateTimeOffset').
        /// </summary>
        public virtual string DateType { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET type (default: 'Dictionary').
        /// </summary>
        public virtual string DictionaryBaseType { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET instance type (default: empty = DictionaryType).
        /// </summary>
        public virtual string DictionaryInstanceType { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET type (default: 'IDictionary').
        /// </summary>
        public virtual string DictionaryType { get; internal set; }
        /// <summary>
        ///   Specifies whether enums should be always generated as bit flags (default: false).
        /// </summary>
        public virtual bool? EnforceFlagEnums { get; internal set; }
        /// <summary>
        ///   The globally excluded parameter names.
        /// </summary>
        public virtual IReadOnlyList<string> ExcludedParameterNames => ExcludedParameterNamesInternal.AsReadOnly();
        internal List<string> ExcludedParameterNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The excluded DTO type names (must be defined in an import or other namespace).
        /// </summary>
        public virtual IReadOnlyList<string> ExcludedTypeNames => ExcludedTypeNamesInternal.AsReadOnly();
        internal List<string> ExcludedTypeNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Specifies whether to generate data annotation attributes on DTO classes (default: true).
        /// </summary>
        public virtual bool? GenerateDataAnnotations { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).
        /// </summary>
        public virtual bool? GenerateDefaultValues { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate DTO classes.
        /// </summary>
        public virtual bool? GenerateDtoTypes { get; internal set; }
        /// <summary>
        ///   Specifies whether to remove the setter for non-nullable array properties (default: false).
        /// </summary>
        public virtual bool? GenerateImmutableArrayProperties { get; internal set; }
        /// <summary>
        ///   Specifies whether to remove the setter for non-nullable dictionary properties (default: false).
        /// </summary>
        public virtual bool? GenerateImmutableDictionaryProperties { get; internal set; }
        /// <summary>
        ///   Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).
        /// </summary>
        public virtual bool? GenerateJsonMethods { get; internal set; }
        /// <summary>
        ///   Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).
        /// </summary>
        public virtual bool? GenerateOptionalParameters { get; internal set; }
        /// <summary>
        ///   Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).
        /// </summary>
        public virtual bool? GenerateOptionalPropertiesAsNullable { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate response classes (default: true).
        /// </summary>
        public virtual bool? GenerateResponseClasses { get; internal set; }
        /// <summary>
        ///   Use preserve references handling (All) in the JSON serializer (default: false).
        /// </summary>
        public virtual bool? HandleReferences { get; internal set; }
        /// <summary>
        ///   Inline named any types (default: false).
        /// </summary>
        public virtual bool? InlineNamedAny { get; internal set; }
        /// <summary>
        ///   Inline named arrays (default: false).
        /// </summary>
        public virtual bool? InlineNamedArrays { get; internal set; }
        /// <summary>
        ///   Inline named dictionaries (default: false).
        /// </summary>
        public virtual bool? InlineNamedDictionaries { get; internal set; }
        /// <summary>
        ///   Inline named tuples (default: true).
        /// </summary>
        public virtual bool? InlineNamedTuples { get; internal set; }
        /// <summary>
        ///   Specifies the custom Json.NET converter types (optional, comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> JsonConverters => JsonConvertersInternal.AsReadOnly();
        internal List<string> JsonConvertersInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of a static method which is called to transform the JsonSerializerSettings used in the generated ToJson()/FromJson() methods (default: none).
        /// </summary>
        public virtual string JsonSerializerSettingsTransformationMethod { get; internal set; }
        /// <summary>
        ///   The namespace of the generated classes.
        /// </summary>
        public virtual string Namespace { get; internal set; }
        /// <summary>
        ///   The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').
        /// </summary>
        public virtual OperationGenerationMode OperationGenerationMode { get; internal set; }
        /// <summary>
        ///   The generic array .NET type of operation parameters (default: 'IEnumerable').
        /// </summary>
        public virtual string ParameterArrayType { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET type of operation parameters (default: 'IDictionary').
        /// </summary>
        public virtual string ParameterDictionaryType { get; internal set; }
        /// <summary>
        ///   Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).
        /// </summary>
        public virtual bool? RequiredPropertiesMustBeDefined { get; internal set; }
        /// <summary>
        ///   The generic array .NET type of operation responses (default: 'ICollection').
        /// </summary>
        public virtual string ResponseArrayType { get; internal set; }
        /// <summary>
        ///   The response class (default 'SwaggerResponse', may use '{controller}' placeholder).
        /// </summary>
        public virtual string ResponseClass { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET type of operation responses (default: 'IDictionary').
        /// </summary>
        public virtual string ResponseDictionaryType { get; internal set; }
        /// <summary>
        ///   The time span .NET type (default: 'TimeSpan').
        /// </summary>
        public virtual string TimeSpanType { get; internal set; }
        /// <summary>
        ///   The time .NET type (default: 'TimeSpan').
        /// </summary>
        public virtual string TimeType { get; internal set; }
        /// <summary>
        ///   List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).
        /// </summary>
        public virtual IReadOnlyList<string> WrapResponseMethods => WrapResponseMethodsInternal.AsReadOnly();
        internal List<string> WrapResponseMethodsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Specifies whether to wrap success responses to allow full response access.
        /// </summary>
        public virtual bool? WrapResponses { get; internal set; }
        /// <summary>
        ///   The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string EnumNameGeneratorType { get; internal set; }
        /// <summary>
        ///   The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string PropertyNameGeneratorType { get; internal set; }
        /// <summary>
        ///   The Liquid template directory (experimental).
        /// </summary>
        public virtual string TemplateDirectory { get; internal set; }
        /// <summary>
        ///   The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string TypeNameGenerator { get; internal set; }
        /// <summary>
        ///   A file path or URL to the data or the JSON data itself.
        /// </summary>
        public virtual string Input { get; internal set; }
        /// <summary>
        ///   Overrides the service host of the web document (optional, use '.' to remove the hostname).
        /// </summary>
        public virtual string ServiceHost { get; internal set; }
        /// <summary>
        ///   Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').
        /// </summary>
        public virtual IReadOnlyList<string> ServiceSchemes => ServiceSchemesInternal.AsReadOnly();
        internal List<string> ServiceSchemesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The output file path (optional).
        /// </summary>
        public virtual string Output { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("openapi2csclient")
              .Add("/AdditionalContractNamespaceUsages:{value}", AdditionalContractNamespaceUsages)
              .Add("/AdditionalNamespaceUsages:{value}", AdditionalNamespaceUsages)
              .Add("/AnyType:{value}", AnyType)
              .Add("/ArrayBaseType:{value}", ArrayBaseType)
              .Add("/ArrayInstanceType:{value}", ArrayInstanceType)
              .Add("/ArrayType:{value}", ArrayType)
              .Add("/ClassName:{value}", ClassName)
              .Add("/ClassStyle:{value}", ClassStyle)
              .Add("/DateTimeType:{value}", DateTimeType)
              .Add("/DateType:{value}", DateType)
              .Add("/DictionaryBaseType:{value}", DictionaryBaseType)
              .Add("/DictionaryInstanceType:{value}", DictionaryInstanceType)
              .Add("/DictionaryType:{value}", DictionaryType)
              .Add("/EnforceFlagEnums:{value}", EnforceFlagEnums)
              .Add("/ExcludedParameterNames:{value}", ExcludedParameterNames)
              .Add("/ExcludedTypeNames:{value}", ExcludedTypeNames)
              .Add("/GenerateDataAnnotations:{value}", GenerateDataAnnotations)
              .Add("/GenerateDefaultValues:{value}", GenerateDefaultValues)
              .Add("/GenerateDtoTypes:{value}", GenerateDtoTypes)
              .Add("/GenerateImmutableArrayProperties:{value}", GenerateImmutableArrayProperties)
              .Add("/GenerateImmutableDictionaryProperties:{value}", GenerateImmutableDictionaryProperties)
              .Add("/GenerateJsonMethods:{value}", GenerateJsonMethods)
              .Add("/GenerateOptionalParameters:{value}", GenerateOptionalParameters)
              .Add("/GenerateOptionalPropertiesAsNullable:{value}", GenerateOptionalPropertiesAsNullable)
              .Add("/GenerateResponseClasses:{value}", GenerateResponseClasses)
              .Add("/HandleReferences:{value}", HandleReferences)
              .Add("/InlineNamedAny:{value}", InlineNamedAny)
              .Add("/InlineNamedArrays:{value}", InlineNamedArrays)
              .Add("/InlineNamedDictionaries:{value}", InlineNamedDictionaries)
              .Add("/InlineNamedTuples:{value}", InlineNamedTuples)
              .Add("/JsonConverters:{value}", JsonConverters)
              .Add("/JsonSerializerSettingsTransformationMethod:{value}", JsonSerializerSettingsTransformationMethod)
              .Add("/Namespace:{value}", Namespace)
              .Add("/OperationGenerationMode:{value}", OperationGenerationMode)
              .Add("/ParameterArrayType:{value}", ParameterArrayType)
              .Add("/ParameterDictionaryType:{value}", ParameterDictionaryType)
              .Add("/RequiredPropertiesMustBeDefined:{value}", RequiredPropertiesMustBeDefined)
              .Add("/ResponseArrayType:{value}", ResponseArrayType)
              .Add("/ResponseClass:{value}", ResponseClass)
              .Add("/ResponseDictionaryType:{value}", ResponseDictionaryType)
              .Add("/TimeSpanType:{value}", TimeSpanType)
              .Add("/TimeType:{value}", TimeType)
              .Add("/WrapResponseMethods:{value}", WrapResponseMethods)
              .Add("/WrapResponses:{value}", WrapResponses)
              .Add("/EnumNameGeneratorType:{value}", EnumNameGeneratorType)
              .Add("/PropertyNameGeneratorType:{value}", PropertyNameGeneratorType)
              .Add("/TemplateDirectory:{value}", TemplateDirectory)
              .Add("/TypeNameGenerator:{value}", TypeNameGenerator)
              .Add("/Input:{value}", Input)
              .Add("/ServiceHost:{value}", ServiceHost)
              .Add("/ServiceSchemes:{value}", ServiceSchemes)
              .Add("/Output:{value}", Output)
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagSwaggerToCSharpClientSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagSwaggerToCSharpClientSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        /// <summary>
        ///   The client base class (empty for no base class).
        /// </summary>
        public virtual string ClientBaseClass { get; internal set; }
        /// <summary>
        ///   The client class access modifier (default: public).
        /// </summary>
        public virtual string ClientClassAccessModifier { get; internal set; }
        /// <summary>
        ///   The configuration class. The setting ClientBaseClass must be set. (empty for no configuration class).
        /// </summary>
        public virtual string ConfigurationClass { get; internal set; }
        /// <summary>
        ///   The contracts .NET namespace.
        /// </summary>
        public virtual string ContractsNamespace { get; internal set; }
        /// <summary>
        ///   The contracts output file path (optional, if no path is set then a single file with the implementation and contracts is generated).
        /// </summary>
        public virtual string ContractsOutput { get; internal set; }
        /// <summary>
        ///   Specifies whether to dispose the HttpClient (injected HttpClient is never disposed).
        /// </summary>
        public virtual bool? DisposeHttpClient { get; internal set; }
        /// <summary>
        ///   The exception class (default 'SwaggerException', may use '{controller}' placeholder).
        /// </summary>
        public virtual string ExceptionClass { get; internal set; }
        /// <summary>
        ///   Specifies whether to expose the JsonSerializerSettings property (default: false).
        /// </summary>
        public virtual bool? ExposeJsonSerializerSettings { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate the BaseUrl property, must be defined on the base class otherwise (default: true).
        /// </summary>
        public virtual bool? GenerateBaseUrlProperty { get; internal set; }
        /// <summary>
        ///   Specifies whether generate client classes.
        /// </summary>
        public virtual bool? GenerateClientClasses { get; internal set; }
        /// <summary>
        ///   Specifies whether generate interfaces for the client classes.
        /// </summary>
        public virtual bool? GenerateClientInterfaces { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate contracts output (interface and models in a separate file set with the ContractsOutput parameter).
        /// </summary>
        public virtual bool? GenerateContractsOutput { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate exception classes (default: true).
        /// </summary>
        public virtual bool? GenerateExceptionClasses { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate synchronous methods (not recommended, default: false).
        /// </summary>
        public virtual bool? GenerateSyncMethods { get; internal set; }
        /// <summary>
        ///   Generate the UpdateJsonSerializerSettings method (must be implemented in the base class otherwise, default: true).
        /// </summary>
        public virtual bool? GenerateUpdateJsonSerializerSettingsMethod { get; internal set; }
        /// <summary>
        ///   Specifies the HttpClient type. By default the 'System.Net.Http.HttpClient' is used.
        /// </summary>
        public virtual string HttpClientType { get; internal set; }
        /// <summary>
        ///   Specifies whether an HttpClient instance is injected (default: true).
        /// </summary>
        public virtual bool? InjectHttpClient { get; internal set; }
        /// <summary>
        ///   Specifies the format for Date type method parameters (default: yyyy-MM-dd).
        /// </summary>
        public virtual string ParameterDateFormat { get; internal set; }
        /// <summary>
        ///   Specifies the format for DateTime type method parameters (default: s).
        /// </summary>
        public virtual string ParameterDateTimeFormat { get; internal set; }
        /// <summary>
        ///   List of methods with a protected access modifier ('classname.methodname').
        /// </summary>
        public virtual IReadOnlyList<string> ProtectedMethods => ProtectedMethodsInternal.AsReadOnly();
        internal List<string> ProtectedMethodsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The null value used for query parameters which are null (default: '').
        /// </summary>
        public virtual string QueryNullValue { get; internal set; }
        /// <summary>
        ///   Serialize the type information in a $type property (not recommended, also sets TypeNameHandling = Auto, default: true).
        /// </summary>
        public virtual bool? SerializeTypeInformation { get; internal set; }
        /// <summary>
        ///   The DTO class/enum access modifier (default: public).
        /// </summary>
        public virtual string TypeAccessModifier { get; internal set; }
        /// <summary>
        ///   Specifies whether to use and expose the base URL (default: true).
        /// </summary>
        public virtual bool? UseBaseUrl { get; internal set; }
        /// <summary>
        ///   Specifies whether to call CreateHttpClientAsync on the base class to create a new HttpClient.
        /// </summary>
        public virtual bool? UseHttpClientCreationMethod { get; internal set; }
        /// <summary>
        ///   Specifies whether to call CreateHttpRequestMessageAsync on the base class to create a new HttpRequestMethod.
        /// </summary>
        public virtual bool? UseHttpRequestMessageCreationMethod { get; internal set; }
        /// <summary>
        ///   Specifies whether DTO exceptions are wrapped in a SwaggerException instance (default: true).
        /// </summary>
        public virtual bool? WrapDtoExceptions { get; internal set; }
        /// <summary>
        ///   The additional contract namespace usages.
        /// </summary>
        public virtual IReadOnlyList<string> AdditionalContractNamespaceUsages => AdditionalContractNamespaceUsagesInternal.AsReadOnly();
        internal List<string> AdditionalContractNamespaceUsagesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The additional namespace usages.
        /// </summary>
        public virtual IReadOnlyList<string> AdditionalNamespaceUsages => AdditionalNamespaceUsagesInternal.AsReadOnly();
        internal List<string> AdditionalNamespaceUsagesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The any .NET type (default: 'object').
        /// </summary>
        public virtual string AnyType { get; internal set; }
        /// <summary>
        ///   The generic array .NET type (default: 'Collection').
        /// </summary>
        public virtual string ArrayBaseType { get; internal set; }
        /// <summary>
        ///   The generic array .NET instance type (default: empty = ArrayType).
        /// </summary>
        public virtual string ArrayInstanceType { get; internal set; }
        /// <summary>
        ///   The generic array .NET type (default: 'ICollection').
        /// </summary>
        public virtual string ArrayType { get; internal set; }
        /// <summary>
        ///   The class name of the generated client.
        /// </summary>
        public virtual string ClassName { get; internal set; }
        /// <summary>
        ///   The CSharp class style, 'Poco' or 'Inpc' (default: 'Poco').
        /// </summary>
        public virtual CSharpClassStyle ClassStyle { get; internal set; }
        /// <summary>
        ///   The date time .NET type (default: 'DateTimeOffset').
        /// </summary>
        public virtual string DateTimeType { get; internal set; }
        /// <summary>
        ///   The date .NET type (default: 'DateTimeOffset').
        /// </summary>
        public virtual string DateType { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET type (default: 'Dictionary').
        /// </summary>
        public virtual string DictionaryBaseType { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET instance type (default: empty = DictionaryType).
        /// </summary>
        public virtual string DictionaryInstanceType { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET type (default: 'IDictionary').
        /// </summary>
        public virtual string DictionaryType { get; internal set; }
        /// <summary>
        ///   Specifies whether enums should be always generated as bit flags (default: false).
        /// </summary>
        public virtual bool? EnforceFlagEnums { get; internal set; }
        /// <summary>
        ///   The globally excluded parameter names.
        /// </summary>
        public virtual IReadOnlyList<string> ExcludedParameterNames => ExcludedParameterNamesInternal.AsReadOnly();
        internal List<string> ExcludedParameterNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The excluded DTO type names (must be defined in an import or other namespace).
        /// </summary>
        public virtual IReadOnlyList<string> ExcludedTypeNames => ExcludedTypeNamesInternal.AsReadOnly();
        internal List<string> ExcludedTypeNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Specifies whether to generate data annotation attributes on DTO classes (default: true).
        /// </summary>
        public virtual bool? GenerateDataAnnotations { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).
        /// </summary>
        public virtual bool? GenerateDefaultValues { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate DTO classes.
        /// </summary>
        public virtual bool? GenerateDtoTypes { get; internal set; }
        /// <summary>
        ///   Specifies whether to remove the setter for non-nullable array properties (default: false).
        /// </summary>
        public virtual bool? GenerateImmutableArrayProperties { get; internal set; }
        /// <summary>
        ///   Specifies whether to remove the setter for non-nullable dictionary properties (default: false).
        /// </summary>
        public virtual bool? GenerateImmutableDictionaryProperties { get; internal set; }
        /// <summary>
        ///   Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).
        /// </summary>
        public virtual bool? GenerateJsonMethods { get; internal set; }
        /// <summary>
        ///   Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).
        /// </summary>
        public virtual bool? GenerateOptionalParameters { get; internal set; }
        /// <summary>
        ///   Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).
        /// </summary>
        public virtual bool? GenerateOptionalPropertiesAsNullable { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate response classes (default: true).
        /// </summary>
        public virtual bool? GenerateResponseClasses { get; internal set; }
        /// <summary>
        ///   Use preserve references handling (All) in the JSON serializer (default: false).
        /// </summary>
        public virtual bool? HandleReferences { get; internal set; }
        /// <summary>
        ///   Inline named any types (default: false).
        /// </summary>
        public virtual bool? InlineNamedAny { get; internal set; }
        /// <summary>
        ///   Inline named arrays (default: false).
        /// </summary>
        public virtual bool? InlineNamedArrays { get; internal set; }
        /// <summary>
        ///   Inline named dictionaries (default: false).
        /// </summary>
        public virtual bool? InlineNamedDictionaries { get; internal set; }
        /// <summary>
        ///   Inline named tuples (default: true).
        /// </summary>
        public virtual bool? InlineNamedTuples { get; internal set; }
        /// <summary>
        ///   Specifies the custom Json.NET converter types (optional, comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> JsonConverters => JsonConvertersInternal.AsReadOnly();
        internal List<string> JsonConvertersInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of a static method which is called to transform the JsonSerializerSettings used in the generated ToJson()/FromJson() methods (default: none).
        /// </summary>
        public virtual string JsonSerializerSettingsTransformationMethod { get; internal set; }
        /// <summary>
        ///   The namespace of the generated classes.
        /// </summary>
        public virtual string Namespace { get; internal set; }
        /// <summary>
        ///   The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').
        /// </summary>
        public virtual OperationGenerationMode OperationGenerationMode { get; internal set; }
        /// <summary>
        ///   The generic array .NET type of operation parameters (default: 'IEnumerable').
        /// </summary>
        public virtual string ParameterArrayType { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET type of operation parameters (default: 'IDictionary').
        /// </summary>
        public virtual string ParameterDictionaryType { get; internal set; }
        /// <summary>
        ///   Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).
        /// </summary>
        public virtual bool? RequiredPropertiesMustBeDefined { get; internal set; }
        /// <summary>
        ///   The generic array .NET type of operation responses (default: 'ICollection').
        /// </summary>
        public virtual string ResponseArrayType { get; internal set; }
        /// <summary>
        ///   The response class (default 'SwaggerResponse', may use '{controller}' placeholder).
        /// </summary>
        public virtual string ResponseClass { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET type of operation responses (default: 'IDictionary').
        /// </summary>
        public virtual string ResponseDictionaryType { get; internal set; }
        /// <summary>
        ///   The time span .NET type (default: 'TimeSpan').
        /// </summary>
        public virtual string TimeSpanType { get; internal set; }
        /// <summary>
        ///   The time .NET type (default: 'TimeSpan').
        /// </summary>
        public virtual string TimeType { get; internal set; }
        /// <summary>
        ///   List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).
        /// </summary>
        public virtual IReadOnlyList<string> WrapResponseMethods => WrapResponseMethodsInternal.AsReadOnly();
        internal List<string> WrapResponseMethodsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Specifies whether to wrap success responses to allow full response access.
        /// </summary>
        public virtual bool? WrapResponses { get; internal set; }
        /// <summary>
        ///   The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string EnumNameGeneratorType { get; internal set; }
        /// <summary>
        ///   The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string PropertyNameGeneratorType { get; internal set; }
        /// <summary>
        ///   The Liquid template directory (experimental).
        /// </summary>
        public virtual string TemplateDirectory { get; internal set; }
        /// <summary>
        ///   The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string TypeNameGenerator { get; internal set; }
        /// <summary>
        ///   A file path or URL to the data or the JSON data itself.
        /// </summary>
        public virtual string Input { get; internal set; }
        /// <summary>
        ///   Overrides the service host of the web document (optional, use '.' to remove the hostname).
        /// </summary>
        public virtual string ServiceHost { get; internal set; }
        /// <summary>
        ///   Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').
        /// </summary>
        public virtual IReadOnlyList<string> ServiceSchemes => ServiceSchemesInternal.AsReadOnly();
        internal List<string> ServiceSchemesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The output file path (optional).
        /// </summary>
        public virtual string Output { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("swagger2csclient")
              .Add("/ClientBaseClass:{value}", ClientBaseClass)
              .Add("/ClientClassAccessModifier:{value}", ClientClassAccessModifier)
              .Add("/ConfigurationClass:{value}", ConfigurationClass)
              .Add("/ContractsNamespace:{value}", ContractsNamespace)
              .Add("/ContractsOutput:{value}", ContractsOutput)
              .Add("/DisposeHttpClient:{value}", DisposeHttpClient)
              .Add("/ExceptionClass:{value}", ExceptionClass)
              .Add("/ExposeJsonSerializerSettings:{value}", ExposeJsonSerializerSettings)
              .Add("/GenerateBaseUrlProperty:{value}", GenerateBaseUrlProperty)
              .Add("/GenerateClientClasses:{value}", GenerateClientClasses)
              .Add("/GenerateClientInterfaces:{value}", GenerateClientInterfaces)
              .Add("/GenerateContractsOutput:{value}", GenerateContractsOutput)
              .Add("/GenerateExceptionClasses:{value}", GenerateExceptionClasses)
              .Add("/GenerateSyncMethods:{value}", GenerateSyncMethods)
              .Add("/GenerateUpdateJsonSerializerSettingsMethod:{value}", GenerateUpdateJsonSerializerSettingsMethod)
              .Add("/HttpClientType:{value}", HttpClientType)
              .Add("/InjectHttpClient:{value}", InjectHttpClient)
              .Add("/ParameterDateFormat:{value}", ParameterDateFormat)
              .Add("/ParameterDateTimeFormat:{value}", ParameterDateTimeFormat)
              .Add("/ProtectedMethods:{value}", ProtectedMethods)
              .Add("/QueryNullValue:{value}", QueryNullValue)
              .Add("/SerializeTypeInformation:{value}", SerializeTypeInformation)
              .Add("/TypeAccessModifier:{value}", TypeAccessModifier)
              .Add("/UseBaseUrl:{value}", UseBaseUrl)
              .Add("/UseHttpClientCreationMethod:{value}", UseHttpClientCreationMethod)
              .Add("/UseHttpRequestMessageCreationMethod:{value}", UseHttpRequestMessageCreationMethod)
              .Add("/WrapDtoExceptions:{value}", WrapDtoExceptions)
              .Add("/AdditionalContractNamespaceUsages:{value}", AdditionalContractNamespaceUsages)
              .Add("/AdditionalNamespaceUsages:{value}", AdditionalNamespaceUsages)
              .Add("/AnyType:{value}", AnyType)
              .Add("/ArrayBaseType:{value}", ArrayBaseType)
              .Add("/ArrayInstanceType:{value}", ArrayInstanceType)
              .Add("/ArrayType:{value}", ArrayType)
              .Add("/ClassName:{value}", ClassName)
              .Add("/ClassStyle:{value}", ClassStyle)
              .Add("/DateTimeType:{value}", DateTimeType)
              .Add("/DateType:{value}", DateType)
              .Add("/DictionaryBaseType:{value}", DictionaryBaseType)
              .Add("/DictionaryInstanceType:{value}", DictionaryInstanceType)
              .Add("/DictionaryType:{value}", DictionaryType)
              .Add("/EnforceFlagEnums:{value}", EnforceFlagEnums)
              .Add("/ExcludedParameterNames:{value}", ExcludedParameterNames)
              .Add("/ExcludedTypeNames:{value}", ExcludedTypeNames)
              .Add("/GenerateDataAnnotations:{value}", GenerateDataAnnotations)
              .Add("/GenerateDefaultValues:{value}", GenerateDefaultValues)
              .Add("/GenerateDtoTypes:{value}", GenerateDtoTypes)
              .Add("/GenerateImmutableArrayProperties:{value}", GenerateImmutableArrayProperties)
              .Add("/GenerateImmutableDictionaryProperties:{value}", GenerateImmutableDictionaryProperties)
              .Add("/GenerateJsonMethods:{value}", GenerateJsonMethods)
              .Add("/GenerateOptionalParameters:{value}", GenerateOptionalParameters)
              .Add("/GenerateOptionalPropertiesAsNullable:{value}", GenerateOptionalPropertiesAsNullable)
              .Add("/GenerateResponseClasses:{value}", GenerateResponseClasses)
              .Add("/HandleReferences:{value}", HandleReferences)
              .Add("/InlineNamedAny:{value}", InlineNamedAny)
              .Add("/InlineNamedArrays:{value}", InlineNamedArrays)
              .Add("/InlineNamedDictionaries:{value}", InlineNamedDictionaries)
              .Add("/InlineNamedTuples:{value}", InlineNamedTuples)
              .Add("/JsonConverters:{value}", JsonConverters)
              .Add("/JsonSerializerSettingsTransformationMethod:{value}", JsonSerializerSettingsTransformationMethod)
              .Add("/Namespace:{value}", Namespace)
              .Add("/OperationGenerationMode:{value}", OperationGenerationMode)
              .Add("/ParameterArrayType:{value}", ParameterArrayType)
              .Add("/ParameterDictionaryType:{value}", ParameterDictionaryType)
              .Add("/RequiredPropertiesMustBeDefined:{value}", RequiredPropertiesMustBeDefined)
              .Add("/ResponseArrayType:{value}", ResponseArrayType)
              .Add("/ResponseClass:{value}", ResponseClass)
              .Add("/ResponseDictionaryType:{value}", ResponseDictionaryType)
              .Add("/TimeSpanType:{value}", TimeSpanType)
              .Add("/TimeType:{value}", TimeType)
              .Add("/WrapResponseMethods:{value}", WrapResponseMethods)
              .Add("/WrapResponses:{value}", WrapResponses)
              .Add("/EnumNameGeneratorType:{value}", EnumNameGeneratorType)
              .Add("/PropertyNameGeneratorType:{value}", PropertyNameGeneratorType)
              .Add("/TemplateDirectory:{value}", TemplateDirectory)
              .Add("/TypeNameGenerator:{value}", TypeNameGenerator)
              .Add("/Input:{value}", Input)
              .Add("/ServiceHost:{value}", ServiceHost)
              .Add("/ServiceSchemes:{value}", ServiceSchemes)
              .Add("/Output:{value}", Output)
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagOpenApiToCSharpControllerSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagOpenApiToCSharpControllerSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        /// <summary>
        ///   The additional contract namespace usages.
        /// </summary>
        public virtual IReadOnlyList<string> AdditionalContractNamespaceUsages => AdditionalContractNamespaceUsagesInternal.AsReadOnly();
        internal List<string> AdditionalContractNamespaceUsagesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The additional namespace usages.
        /// </summary>
        public virtual IReadOnlyList<string> AdditionalNamespaceUsages => AdditionalNamespaceUsagesInternal.AsReadOnly();
        internal List<string> AdditionalNamespaceUsagesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The any .NET type (default: 'object').
        /// </summary>
        public virtual string AnyType { get; internal set; }
        /// <summary>
        ///   The generic array .NET type (default: 'Collection').
        /// </summary>
        public virtual string ArrayBaseType { get; internal set; }
        /// <summary>
        ///   The generic array .NET instance type (default: empty = ArrayType).
        /// </summary>
        public virtual string ArrayInstanceType { get; internal set; }
        /// <summary>
        ///   The generic array .NET type (default: 'ICollection').
        /// </summary>
        public virtual string ArrayType { get; internal set; }
        /// <summary>
        ///   The class name of the generated client.
        /// </summary>
        public virtual string ClassName { get; internal set; }
        /// <summary>
        ///   The CSharp class style, 'Poco' or 'Inpc' (default: 'Poco').
        /// </summary>
        public virtual CSharpClassStyle ClassStyle { get; internal set; }
        /// <summary>
        ///   The date time .NET type (default: 'DateTimeOffset').
        /// </summary>
        public virtual string DateTimeType { get; internal set; }
        /// <summary>
        ///   The date .NET type (default: 'DateTimeOffset').
        /// </summary>
        public virtual string DateType { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET type (default: 'Dictionary').
        /// </summary>
        public virtual string DictionaryBaseType { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET instance type (default: empty = DictionaryType).
        /// </summary>
        public virtual string DictionaryInstanceType { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET type (default: 'IDictionary').
        /// </summary>
        public virtual string DictionaryType { get; internal set; }
        /// <summary>
        ///   Specifies whether enums should be always generated as bit flags (default: false).
        /// </summary>
        public virtual bool? EnforceFlagEnums { get; internal set; }
        /// <summary>
        ///   The globally excluded parameter names.
        /// </summary>
        public virtual IReadOnlyList<string> ExcludedParameterNames => ExcludedParameterNamesInternal.AsReadOnly();
        internal List<string> ExcludedParameterNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The excluded DTO type names (must be defined in an import or other namespace).
        /// </summary>
        public virtual IReadOnlyList<string> ExcludedTypeNames => ExcludedTypeNamesInternal.AsReadOnly();
        internal List<string> ExcludedTypeNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Specifies whether to generate data annotation attributes on DTO classes (default: true).
        /// </summary>
        public virtual bool? GenerateDataAnnotations { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).
        /// </summary>
        public virtual bool? GenerateDefaultValues { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate DTO classes.
        /// </summary>
        public virtual bool? GenerateDtoTypes { get; internal set; }
        /// <summary>
        ///   Specifies whether to remove the setter for non-nullable array properties (default: false).
        /// </summary>
        public virtual bool? GenerateImmutableArrayProperties { get; internal set; }
        /// <summary>
        ///   Specifies whether to remove the setter for non-nullable dictionary properties (default: false).
        /// </summary>
        public virtual bool? GenerateImmutableDictionaryProperties { get; internal set; }
        /// <summary>
        ///   Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).
        /// </summary>
        public virtual bool? GenerateJsonMethods { get; internal set; }
        /// <summary>
        ///   Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).
        /// </summary>
        public virtual bool? GenerateOptionalParameters { get; internal set; }
        /// <summary>
        ///   Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).
        /// </summary>
        public virtual bool? GenerateOptionalPropertiesAsNullable { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate response classes (default: true).
        /// </summary>
        public virtual bool? GenerateResponseClasses { get; internal set; }
        /// <summary>
        ///   Use preserve references handling (All) in the JSON serializer (default: false).
        /// </summary>
        public virtual bool? HandleReferences { get; internal set; }
        /// <summary>
        ///   Inline named any types (default: false).
        /// </summary>
        public virtual bool? InlineNamedAny { get; internal set; }
        /// <summary>
        ///   Inline named arrays (default: false).
        /// </summary>
        public virtual bool? InlineNamedArrays { get; internal set; }
        /// <summary>
        ///   Inline named dictionaries (default: false).
        /// </summary>
        public virtual bool? InlineNamedDictionaries { get; internal set; }
        /// <summary>
        ///   Inline named tuples (default: true).
        /// </summary>
        public virtual bool? InlineNamedTuples { get; internal set; }
        /// <summary>
        ///   Specifies the custom Json.NET converter types (optional, comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> JsonConverters => JsonConvertersInternal.AsReadOnly();
        internal List<string> JsonConvertersInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of a static method which is called to transform the JsonSerializerSettings used in the generated ToJson()/FromJson() methods (default: none).
        /// </summary>
        public virtual string JsonSerializerSettingsTransformationMethod { get; internal set; }
        /// <summary>
        ///   The namespace of the generated classes.
        /// </summary>
        public virtual string Namespace { get; internal set; }
        /// <summary>
        ///   The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').
        /// </summary>
        public virtual OperationGenerationMode OperationGenerationMode { get; internal set; }
        /// <summary>
        ///   The generic array .NET type of operation parameters (default: 'IEnumerable').
        /// </summary>
        public virtual string ParameterArrayType { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET type of operation parameters (default: 'IDictionary').
        /// </summary>
        public virtual string ParameterDictionaryType { get; internal set; }
        /// <summary>
        ///   Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).
        /// </summary>
        public virtual bool? RequiredPropertiesMustBeDefined { get; internal set; }
        /// <summary>
        ///   The generic array .NET type of operation responses (default: 'ICollection').
        /// </summary>
        public virtual string ResponseArrayType { get; internal set; }
        /// <summary>
        ///   The response class (default 'SwaggerResponse', may use '{controller}' placeholder).
        /// </summary>
        public virtual string ResponseClass { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET type of operation responses (default: 'IDictionary').
        /// </summary>
        public virtual string ResponseDictionaryType { get; internal set; }
        /// <summary>
        ///   The time span .NET type (default: 'TimeSpan').
        /// </summary>
        public virtual string TimeSpanType { get; internal set; }
        /// <summary>
        ///   The time .NET type (default: 'TimeSpan').
        /// </summary>
        public virtual string TimeType { get; internal set; }
        /// <summary>
        ///   List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).
        /// </summary>
        public virtual IReadOnlyList<string> WrapResponseMethods => WrapResponseMethodsInternal.AsReadOnly();
        internal List<string> WrapResponseMethodsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Specifies whether to wrap success responses to allow full response access.
        /// </summary>
        public virtual bool? WrapResponses { get; internal set; }
        /// <summary>
        ///   The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string EnumNameGeneratorType { get; internal set; }
        /// <summary>
        ///   The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string PropertyNameGeneratorType { get; internal set; }
        /// <summary>
        ///   The Liquid template directory (experimental).
        /// </summary>
        public virtual string TemplateDirectory { get; internal set; }
        /// <summary>
        ///   The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string TypeNameGenerator { get; internal set; }
        /// <summary>
        ///   A file path or URL to the data or the JSON data itself.
        /// </summary>
        public virtual string Input { get; internal set; }
        /// <summary>
        ///   Overrides the service host of the web document (optional, use '.' to remove the hostname).
        /// </summary>
        public virtual string ServiceHost { get; internal set; }
        /// <summary>
        ///   Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').
        /// </summary>
        public virtual IReadOnlyList<string> ServiceSchemes => ServiceSchemesInternal.AsReadOnly();
        internal List<string> ServiceSchemesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The output file path (optional).
        /// </summary>
        public virtual string Output { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("openapi2cscontroller")
              .Add("/AdditionalContractNamespaceUsages:{value}", AdditionalContractNamespaceUsages)
              .Add("/AdditionalNamespaceUsages:{value}", AdditionalNamespaceUsages)
              .Add("/AnyType:{value}", AnyType)
              .Add("/ArrayBaseType:{value}", ArrayBaseType)
              .Add("/ArrayInstanceType:{value}", ArrayInstanceType)
              .Add("/ArrayType:{value}", ArrayType)
              .Add("/ClassName:{value}", ClassName)
              .Add("/ClassStyle:{value}", ClassStyle)
              .Add("/DateTimeType:{value}", DateTimeType)
              .Add("/DateType:{value}", DateType)
              .Add("/DictionaryBaseType:{value}", DictionaryBaseType)
              .Add("/DictionaryInstanceType:{value}", DictionaryInstanceType)
              .Add("/DictionaryType:{value}", DictionaryType)
              .Add("/EnforceFlagEnums:{value}", EnforceFlagEnums)
              .Add("/ExcludedParameterNames:{value}", ExcludedParameterNames)
              .Add("/ExcludedTypeNames:{value}", ExcludedTypeNames)
              .Add("/GenerateDataAnnotations:{value}", GenerateDataAnnotations)
              .Add("/GenerateDefaultValues:{value}", GenerateDefaultValues)
              .Add("/GenerateDtoTypes:{value}", GenerateDtoTypes)
              .Add("/GenerateImmutableArrayProperties:{value}", GenerateImmutableArrayProperties)
              .Add("/GenerateImmutableDictionaryProperties:{value}", GenerateImmutableDictionaryProperties)
              .Add("/GenerateJsonMethods:{value}", GenerateJsonMethods)
              .Add("/GenerateOptionalParameters:{value}", GenerateOptionalParameters)
              .Add("/GenerateOptionalPropertiesAsNullable:{value}", GenerateOptionalPropertiesAsNullable)
              .Add("/GenerateResponseClasses:{value}", GenerateResponseClasses)
              .Add("/HandleReferences:{value}", HandleReferences)
              .Add("/InlineNamedAny:{value}", InlineNamedAny)
              .Add("/InlineNamedArrays:{value}", InlineNamedArrays)
              .Add("/InlineNamedDictionaries:{value}", InlineNamedDictionaries)
              .Add("/InlineNamedTuples:{value}", InlineNamedTuples)
              .Add("/JsonConverters:{value}", JsonConverters)
              .Add("/JsonSerializerSettingsTransformationMethod:{value}", JsonSerializerSettingsTransformationMethod)
              .Add("/Namespace:{value}", Namespace)
              .Add("/OperationGenerationMode:{value}", OperationGenerationMode)
              .Add("/ParameterArrayType:{value}", ParameterArrayType)
              .Add("/ParameterDictionaryType:{value}", ParameterDictionaryType)
              .Add("/RequiredPropertiesMustBeDefined:{value}", RequiredPropertiesMustBeDefined)
              .Add("/ResponseArrayType:{value}", ResponseArrayType)
              .Add("/ResponseClass:{value}", ResponseClass)
              .Add("/ResponseDictionaryType:{value}", ResponseDictionaryType)
              .Add("/TimeSpanType:{value}", TimeSpanType)
              .Add("/TimeType:{value}", TimeType)
              .Add("/WrapResponseMethods:{value}", WrapResponseMethods)
              .Add("/WrapResponses:{value}", WrapResponses)
              .Add("/EnumNameGeneratorType:{value}", EnumNameGeneratorType)
              .Add("/PropertyNameGeneratorType:{value}", PropertyNameGeneratorType)
              .Add("/TemplateDirectory:{value}", TemplateDirectory)
              .Add("/TypeNameGenerator:{value}", TypeNameGenerator)
              .Add("/Input:{value}", Input)
              .Add("/ServiceHost:{value}", ServiceHost)
              .Add("/ServiceSchemes:{value}", ServiceSchemes)
              .Add("/Output:{value}", Output)
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagSwaggerToCSharpControllerSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagSwaggerToCSharpControllerSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        /// <summary>
        ///   The Base path on which the API is served, which is relative to the Host
        /// </summary>
        public virtual string BasePath { get; internal set; }
        /// <summary>
        ///   The controller base class (empty for 'ApiController').
        /// </summary>
        public virtual string ControllerBaseClass { get; internal set; }
        /// <summary>
        ///   The controller generation style (partial, abstract; default: partial).
        /// </summary>
        public virtual CSharpControllerStyle ControllerStyle { get; internal set; }
        /// <summary>
        ///   controller target framework (default: AspNetCore).
        /// </summary>
        public virtual CSharpControllerTarget ControllerTarget { get; internal set; }
        /// <summary>
        ///   Add model validation attributes (default: false).
        /// </summary>
        public virtual bool? GenerateModelValidationAttributes { get; internal set; }
        /// <summary>
        ///   The strategy for naming controller routes (none, operationid; default: none).
        /// </summary>
        public virtual CSharpControllerRouteNamingStrategy RouteNamingStrategy { get; internal set; }
        /// <summary>
        ///   Use ASP.Net Core (2.1) ActionResult type as return type (default: false)
        /// </summary>
        public virtual bool? UseActionResultType { get; internal set; }
        /// <summary>
        ///   Add a cancellation token parameter (default: false).
        /// </summary>
        public virtual bool? UseCancellationToken { get; internal set; }
        /// <summary>
        ///   The additional contract namespace usages.
        /// </summary>
        public virtual IReadOnlyList<string> AdditionalContractNamespaceUsages => AdditionalContractNamespaceUsagesInternal.AsReadOnly();
        internal List<string> AdditionalContractNamespaceUsagesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The additional namespace usages.
        /// </summary>
        public virtual IReadOnlyList<string> AdditionalNamespaceUsages => AdditionalNamespaceUsagesInternal.AsReadOnly();
        internal List<string> AdditionalNamespaceUsagesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The any .NET type (default: 'object').
        /// </summary>
        public virtual string AnyType { get; internal set; }
        /// <summary>
        ///   The generic array .NET type (default: 'Collection').
        /// </summary>
        public virtual string ArrayBaseType { get; internal set; }
        /// <summary>
        ///   The generic array .NET instance type (default: empty = ArrayType).
        /// </summary>
        public virtual string ArrayInstanceType { get; internal set; }
        /// <summary>
        ///   The generic array .NET type (default: 'ICollection').
        /// </summary>
        public virtual string ArrayType { get; internal set; }
        /// <summary>
        ///   The class name of the generated client.
        /// </summary>
        public virtual string ClassName { get; internal set; }
        /// <summary>
        ///   The CSharp class style, 'Poco' or 'Inpc' (default: 'Poco').
        /// </summary>
        public virtual CSharpClassStyle ClassStyle { get; internal set; }
        /// <summary>
        ///   The date time .NET type (default: 'DateTimeOffset').
        /// </summary>
        public virtual string DateTimeType { get; internal set; }
        /// <summary>
        ///   The date .NET type (default: 'DateTimeOffset').
        /// </summary>
        public virtual string DateType { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET type (default: 'Dictionary').
        /// </summary>
        public virtual string DictionaryBaseType { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET instance type (default: empty = DictionaryType).
        /// </summary>
        public virtual string DictionaryInstanceType { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET type (default: 'IDictionary').
        /// </summary>
        public virtual string DictionaryType { get; internal set; }
        /// <summary>
        ///   Specifies whether enums should be always generated as bit flags (default: false).
        /// </summary>
        public virtual bool? EnforceFlagEnums { get; internal set; }
        /// <summary>
        ///   The globally excluded parameter names.
        /// </summary>
        public virtual IReadOnlyList<string> ExcludedParameterNames => ExcludedParameterNamesInternal.AsReadOnly();
        internal List<string> ExcludedParameterNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The excluded DTO type names (must be defined in an import or other namespace).
        /// </summary>
        public virtual IReadOnlyList<string> ExcludedTypeNames => ExcludedTypeNamesInternal.AsReadOnly();
        internal List<string> ExcludedTypeNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Specifies whether to generate data annotation attributes on DTO classes (default: true).
        /// </summary>
        public virtual bool? GenerateDataAnnotations { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).
        /// </summary>
        public virtual bool? GenerateDefaultValues { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate DTO classes.
        /// </summary>
        public virtual bool? GenerateDtoTypes { get; internal set; }
        /// <summary>
        ///   Specifies whether to remove the setter for non-nullable array properties (default: false).
        /// </summary>
        public virtual bool? GenerateImmutableArrayProperties { get; internal set; }
        /// <summary>
        ///   Specifies whether to remove the setter for non-nullable dictionary properties (default: false).
        /// </summary>
        public virtual bool? GenerateImmutableDictionaryProperties { get; internal set; }
        /// <summary>
        ///   Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).
        /// </summary>
        public virtual bool? GenerateJsonMethods { get; internal set; }
        /// <summary>
        ///   Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).
        /// </summary>
        public virtual bool? GenerateOptionalParameters { get; internal set; }
        /// <summary>
        ///   Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).
        /// </summary>
        public virtual bool? GenerateOptionalPropertiesAsNullable { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate response classes (default: true).
        /// </summary>
        public virtual bool? GenerateResponseClasses { get; internal set; }
        /// <summary>
        ///   Use preserve references handling (All) in the JSON serializer (default: false).
        /// </summary>
        public virtual bool? HandleReferences { get; internal set; }
        /// <summary>
        ///   Inline named any types (default: false).
        /// </summary>
        public virtual bool? InlineNamedAny { get; internal set; }
        /// <summary>
        ///   Inline named arrays (default: false).
        /// </summary>
        public virtual bool? InlineNamedArrays { get; internal set; }
        /// <summary>
        ///   Inline named dictionaries (default: false).
        /// </summary>
        public virtual bool? InlineNamedDictionaries { get; internal set; }
        /// <summary>
        ///   Inline named tuples (default: true).
        /// </summary>
        public virtual bool? InlineNamedTuples { get; internal set; }
        /// <summary>
        ///   Specifies the custom Json.NET converter types (optional, comma separated).
        /// </summary>
        public virtual IReadOnlyList<string> JsonConverters => JsonConvertersInternal.AsReadOnly();
        internal List<string> JsonConvertersInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The name of a static method which is called to transform the JsonSerializerSettings used in the generated ToJson()/FromJson() methods (default: none).
        /// </summary>
        public virtual string JsonSerializerSettingsTransformationMethod { get; internal set; }
        /// <summary>
        ///   The namespace of the generated classes.
        /// </summary>
        public virtual string Namespace { get; internal set; }
        /// <summary>
        ///   The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').
        /// </summary>
        public virtual OperationGenerationMode OperationGenerationMode { get; internal set; }
        /// <summary>
        ///   The generic array .NET type of operation parameters (default: 'IEnumerable').
        /// </summary>
        public virtual string ParameterArrayType { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET type of operation parameters (default: 'IDictionary').
        /// </summary>
        public virtual string ParameterDictionaryType { get; internal set; }
        /// <summary>
        ///   Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).
        /// </summary>
        public virtual bool? RequiredPropertiesMustBeDefined { get; internal set; }
        /// <summary>
        ///   The generic array .NET type of operation responses (default: 'ICollection').
        /// </summary>
        public virtual string ResponseArrayType { get; internal set; }
        /// <summary>
        ///   The response class (default 'SwaggerResponse', may use '{controller}' placeholder).
        /// </summary>
        public virtual string ResponseClass { get; internal set; }
        /// <summary>
        ///   The generic dictionary .NET type of operation responses (default: 'IDictionary').
        /// </summary>
        public virtual string ResponseDictionaryType { get; internal set; }
        /// <summary>
        ///   The time span .NET type (default: 'TimeSpan').
        /// </summary>
        public virtual string TimeSpanType { get; internal set; }
        /// <summary>
        ///   The time .NET type (default: 'TimeSpan').
        /// </summary>
        public virtual string TimeType { get; internal set; }
        /// <summary>
        ///   List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).
        /// </summary>
        public virtual IReadOnlyList<string> WrapResponseMethods => WrapResponseMethodsInternal.AsReadOnly();
        internal List<string> WrapResponseMethodsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Specifies whether to wrap success responses to allow full response access.
        /// </summary>
        public virtual bool? WrapResponses { get; internal set; }
        /// <summary>
        ///   The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string EnumNameGeneratorType { get; internal set; }
        /// <summary>
        ///   The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string PropertyNameGeneratorType { get; internal set; }
        /// <summary>
        ///   The Liquid template directory (experimental).
        /// </summary>
        public virtual string TemplateDirectory { get; internal set; }
        /// <summary>
        ///   The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string TypeNameGenerator { get; internal set; }
        /// <summary>
        ///   A file path or URL to the data or the JSON data itself.
        /// </summary>
        public virtual string Input { get; internal set; }
        /// <summary>
        ///   Overrides the service host of the web document (optional, use '.' to remove the hostname).
        /// </summary>
        public virtual string ServiceHost { get; internal set; }
        /// <summary>
        ///   Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').
        /// </summary>
        public virtual IReadOnlyList<string> ServiceSchemes => ServiceSchemesInternal.AsReadOnly();
        internal List<string> ServiceSchemesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The output file path (optional).
        /// </summary>
        public virtual string Output { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("swagger2cscontroller")
              .Add("/BasePath:{value}", BasePath)
              .Add("/ControllerBaseClass:{value}", ControllerBaseClass)
              .Add("/ControllerStyle:{value}", ControllerStyle)
              .Add("/ControllerTarget:{value}", ControllerTarget)
              .Add("/GenerateModelValidationAttributes:{value}", GenerateModelValidationAttributes)
              .Add("/RouteNamingStrategy:{value}", RouteNamingStrategy)
              .Add("/UseActionResultType:{value}", UseActionResultType)
              .Add("/UseCancellationToken:{value}", UseCancellationToken)
              .Add("/AdditionalContractNamespaceUsages:{value}", AdditionalContractNamespaceUsages)
              .Add("/AdditionalNamespaceUsages:{value}", AdditionalNamespaceUsages)
              .Add("/AnyType:{value}", AnyType)
              .Add("/ArrayBaseType:{value}", ArrayBaseType)
              .Add("/ArrayInstanceType:{value}", ArrayInstanceType)
              .Add("/ArrayType:{value}", ArrayType)
              .Add("/ClassName:{value}", ClassName)
              .Add("/ClassStyle:{value}", ClassStyle)
              .Add("/DateTimeType:{value}", DateTimeType)
              .Add("/DateType:{value}", DateType)
              .Add("/DictionaryBaseType:{value}", DictionaryBaseType)
              .Add("/DictionaryInstanceType:{value}", DictionaryInstanceType)
              .Add("/DictionaryType:{value}", DictionaryType)
              .Add("/EnforceFlagEnums:{value}", EnforceFlagEnums)
              .Add("/ExcludedParameterNames:{value}", ExcludedParameterNames)
              .Add("/ExcludedTypeNames:{value}", ExcludedTypeNames)
              .Add("/GenerateDataAnnotations:{value}", GenerateDataAnnotations)
              .Add("/GenerateDefaultValues:{value}", GenerateDefaultValues)
              .Add("/GenerateDtoTypes:{value}", GenerateDtoTypes)
              .Add("/GenerateImmutableArrayProperties:{value}", GenerateImmutableArrayProperties)
              .Add("/GenerateImmutableDictionaryProperties:{value}", GenerateImmutableDictionaryProperties)
              .Add("/GenerateJsonMethods:{value}", GenerateJsonMethods)
              .Add("/GenerateOptionalParameters:{value}", GenerateOptionalParameters)
              .Add("/GenerateOptionalPropertiesAsNullable:{value}", GenerateOptionalPropertiesAsNullable)
              .Add("/GenerateResponseClasses:{value}", GenerateResponseClasses)
              .Add("/HandleReferences:{value}", HandleReferences)
              .Add("/InlineNamedAny:{value}", InlineNamedAny)
              .Add("/InlineNamedArrays:{value}", InlineNamedArrays)
              .Add("/InlineNamedDictionaries:{value}", InlineNamedDictionaries)
              .Add("/InlineNamedTuples:{value}", InlineNamedTuples)
              .Add("/JsonConverters:{value}", JsonConverters)
              .Add("/JsonSerializerSettingsTransformationMethod:{value}", JsonSerializerSettingsTransformationMethod)
              .Add("/Namespace:{value}", Namespace)
              .Add("/OperationGenerationMode:{value}", OperationGenerationMode)
              .Add("/ParameterArrayType:{value}", ParameterArrayType)
              .Add("/ParameterDictionaryType:{value}", ParameterDictionaryType)
              .Add("/RequiredPropertiesMustBeDefined:{value}", RequiredPropertiesMustBeDefined)
              .Add("/ResponseArrayType:{value}", ResponseArrayType)
              .Add("/ResponseClass:{value}", ResponseClass)
              .Add("/ResponseDictionaryType:{value}", ResponseDictionaryType)
              .Add("/TimeSpanType:{value}", TimeSpanType)
              .Add("/TimeType:{value}", TimeType)
              .Add("/WrapResponseMethods:{value}", WrapResponseMethods)
              .Add("/WrapResponses:{value}", WrapResponses)
              .Add("/EnumNameGeneratorType:{value}", EnumNameGeneratorType)
              .Add("/PropertyNameGeneratorType:{value}", PropertyNameGeneratorType)
              .Add("/TemplateDirectory:{value}", TemplateDirectory)
              .Add("/TypeNameGenerator:{value}", TypeNameGenerator)
              .Add("/Input:{value}", Input)
              .Add("/ServiceHost:{value}", ServiceHost)
              .Add("/ServiceSchemes:{value}", ServiceSchemes)
              .Add("/Output:{value}", Output)
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagOpenApiToTypeScriptClientSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagOpenApiToTypeScriptClientSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        /// <summary>
        ///   The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string EnumNameGeneratorType { get; internal set; }
        /// <summary>
        ///   The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string PropertyNameGeneratorType { get; internal set; }
        /// <summary>
        ///   The Liquid template directory (experimental).
        /// </summary>
        public virtual string TemplateDirectory { get; internal set; }
        /// <summary>
        ///   The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string TypeNameGenerator { get; internal set; }
        /// <summary>
        ///   A file path or URL to the data or the JSON data itself.
        /// </summary>
        public virtual string Input { get; internal set; }
        /// <summary>
        ///   Overrides the service host of the web document (optional, use '.' to remove the hostname).
        /// </summary>
        public virtual string ServiceHost { get; internal set; }
        /// <summary>
        ///   Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').
        /// </summary>
        public virtual IReadOnlyList<string> ServiceSchemes => ServiceSchemesInternal.AsReadOnly();
        internal List<string> ServiceSchemesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The output file path (optional).
        /// </summary>
        public virtual string Output { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("openapi2tsclient")
              .Add("/EnumNameGeneratorType:{value}", EnumNameGeneratorType)
              .Add("/PropertyNameGeneratorType:{value}", PropertyNameGeneratorType)
              .Add("/TemplateDirectory:{value}", TemplateDirectory)
              .Add("/TypeNameGenerator:{value}", TypeNameGenerator)
              .Add("/Input:{value}", Input)
              .Add("/ServiceHost:{value}", ServiceHost)
              .Add("/ServiceSchemes:{value}", ServiceSchemes)
              .Add("/Output:{value}", Output)
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagSwaggerToTypeScriptClientSettings
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class NSwagSwaggerToTypeScriptClientSettings : NSwagSettings
    {
        /// <summary>
        ///   Path to the NSwag executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? GetToolPath();
        public override Action<OutputType, string> CustomLogger => NSwagTasks.NSwagLogger;
        /// <summary>
        ///   The token name for injecting the API base URL string (used in the Angular template, default: 'API_BASE_URL').
        /// </summary>
        public virtual string BaseUrlTokenName { get; internal set; }
        /// <summary>
        ///   The class name of the generated client.
        /// </summary>
        public virtual string ClassName { get; internal set; }
        /// <summary>
        ///   The type names which always generate plain TypeScript classes.
        /// </summary>
        public virtual IReadOnlyList<string> ClassTypes => ClassTypesInternal.AsReadOnly();
        internal List<string> ClassTypesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The base class of the generated client classes (optional, must be imported or implemented in the extension code).
        /// </summary>
        public virtual string ClientBaseClass { get; internal set; }
        /// <summary>
        ///   The configuration class. The setting ClientBaseClass must be set. (empty for no configuration class).
        /// </summary>
        public virtual string ConfigurationClass { get; internal set; }
        /// <summary>
        ///   Convert POJO objects in the constructor data to DTO instances (GenerateConstructorInterface must be enabled, default: false).
        /// </summary>
        public virtual bool? ConvertConstructorInterfaceData { get; internal set; }
        /// <summary>
        ///   The date time type ('Date', 'MomentJS', 'OffsetMomentJS', 'string').
        /// </summary>
        public virtual TypeScriptDateTimeType DateTimeType { get; internal set; }
        /// <summary>
        ///   The exception class (default 'ApiException').
        /// </summary>
        public virtual string ExceptionClass { get; internal set; }
        /// <summary>
        ///   The globally excluded parameter names.
        /// </summary>
        public virtual IReadOnlyList<string> ExcludedParameterNames => ExcludedParameterNamesInternal.AsReadOnly();
        internal List<string> ExcludedParameterNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The excluded DTO type names (must be defined in an import or other namespace).
        /// </summary>
        public virtual IReadOnlyList<string> ExcludedTypeNames => ExcludedTypeNamesInternal.AsReadOnly();
        internal List<string> ExcludedTypeNamesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Specifies whether the export keyword should be added to all classes, interfaces and enums (default: true).
        /// </summary>
        public virtual bool? ExportTypes { get; internal set; }
        /// <summary>
        ///   The list of extended classes.
        /// </summary>
        public virtual IReadOnlyList<string> ExtendedClasses => ExtendedClassesInternal.AsReadOnly();
        internal List<string> ExtendedClassesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The extension code (string or file path).
        /// </summary>
        public virtual string ExtensionCode { get; internal set; }
        /// <summary>
        ///   Specifies whether generate client classes.
        /// </summary>
        public virtual bool? GenerateClientClasses { get; internal set; }
        /// <summary>
        ///   Specifies whether generate interfaces for the client classes (default: false).
        /// </summary>
        public virtual bool? GenerateClientInterfaces { get; internal set; }
        /// <summary>
        ///   Specifies whether a clone() method should be generated in the DTO classes (default: false).
        /// </summary>
        public virtual bool? GenerateCloneMethod { get; internal set; }
        /// <summary>
        ///   Generate an class interface which is used in the constructor to initialize the class (only available when TypeStyle is Class, default: true).
        /// </summary>
        public virtual bool? GenerateConstructorInterface { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate default values for properties (default: true).
        /// </summary>
        public virtual bool? GenerateDefaultValues { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate DTO classes.
        /// </summary>
        public virtual bool? GenerateDtoTypes { get; internal set; }
        /// <summary>
        ///   Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).
        /// </summary>
        public virtual bool? GenerateOptionalParameters { get; internal set; }
        /// <summary>
        ///   Specifies whether to generate response classes (default: true).
        /// </summary>
        public virtual bool? GenerateResponseClasses { get; internal set; }
        /// <summary>
        ///   Handle JSON references (default: false).
        /// </summary>
        public virtual bool? HandleReferences { get; internal set; }
        /// <summary>
        ///   The Angular HTTP service class (default 'Http', 'HttpClient').
        /// </summary>
        public virtual HttpClass HttpClass { get; internal set; }
        /// <summary>
        ///   Specifies whether required types should be imported (default: true).
        /// </summary>
        public virtual bool? ImportRequiredTypes { get; internal set; }
        /// <summary>
        ///   The Angular injection token type (default 'InjectionToken', 'OpaqueToken').
        /// </summary>
        public virtual InjectionTokenType InjectionTokenType { get; internal set; }
        /// <summary>
        ///   Inline named any types (default: false).
        /// </summary>
        public virtual bool? InlineNamedAny { get; internal set; }
        /// <summary>
        ///   Inline named dictionaries (default: false).
        /// </summary>
        public virtual bool? InlineNamedDictionaries { get; internal set; }
        /// <summary>
        ///   Specifies whether to mark optional properties with ? (default: false).
        /// </summary>
        public virtual bool? MarkOptionalProperties { get; internal set; }
        /// <summary>
        ///   The TypeScript module name (default: '', no module).
        /// </summary>
        public virtual string ModuleName { get; internal set; }
        /// <summary>
        ///   The TypeScript namespace (default: '', no namespace).
        /// </summary>
        public virtual string Namespace { get; internal set; }
        /// <summary>
        ///   The null value used in object initializers (default 'Undefined', 'Null').
        /// </summary>
        public virtual TypeScriptNullValue NullValue { get; internal set; }
        /// <summary>
        ///   The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').
        /// </summary>
        public virtual OperationGenerationMode OperationGenerationMode { get; internal set; }
        /// <summary>
        ///   The promise type ('Promise' or 'QPromise').
        /// </summary>
        public virtual PromiseType PromiseType { get; internal set; }
        /// <summary>
        ///   List of methods with a protected access modifier ('classname.methodname').
        /// </summary>
        public virtual IReadOnlyList<string> ProtectedMethods => ProtectedMethodsInternal.AsReadOnly();
        internal List<string> ProtectedMethodsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The null value used for query parameters which are null (default: '').
        /// </summary>
        public virtual string QueryNullValue { get; internal set; }
        /// <summary>
        ///   The response class (default 'SwaggerResponse', may use '{controller}' placeholder).
        /// </summary>
        public virtual string ResponseClass { get; internal set; }
        /// <summary>
        ///   The target RxJs version (default: 6.0).
        /// </summary>
        public virtual decimal? RxJsVersion { get; internal set; }
        /// <summary>
        ///   The type of the asynchronism handling ('JQueryCallbacks', 'JQueryPromises', 'AngularJS', 'Angular', 'Fetch', 'Aurelia').
        /// </summary>
        public virtual TypeScriptTemplate Template { get; internal set; }
        /// <summary>
        ///   The target TypeScript version (default: 2.7).
        /// </summary>
        public virtual decimal? TypeScriptVersion { get; internal set; }
        /// <summary>
        ///   The type style (default: Class).
        /// </summary>
        public virtual TypeScriptTypeStyle TypeStyle { get; internal set; }
        /// <summary>
        ///   Specifies whether to use the 'getBaseUrl(defaultUrl: string)' method from the base class (default: false).
        /// </summary>
        public virtual bool? UseGetBaseUrlMethod { get; internal set; }
        /// <summary>
        ///   Specifies whether to use the Angular 6 Singleton Provider (Angular template only, default: false).
        /// </summary>
        public virtual bool? UseSingletonProvider { get; internal set; }
        /// <summary>
        ///   Call 'transformOptions' on the base class or extension class (default: false).
        /// </summary>
        public virtual bool? UseTransformOptionsMethod { get; internal set; }
        /// <summary>
        ///   Call 'transformResult' on the base class or extension class (default: false).
        /// </summary>
        public virtual bool? UseTransformResultMethod { get; internal set; }
        /// <summary>
        ///   Specifies whether DTO exceptions are wrapped in a SwaggerException instance (default: false).
        /// </summary>
        public virtual bool? WrapDtoExceptions { get; internal set; }
        /// <summary>
        ///   List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).
        /// </summary>
        public virtual IReadOnlyList<string> WrapResponseMethods => WrapResponseMethodsInternal.AsReadOnly();
        internal List<string> WrapResponseMethodsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Specifies whether to wrap success responses to allow full response access (experimental).
        /// </summary>
        public virtual bool? WrapResponses { get; internal set; }
        /// <summary>
        ///   The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string EnumNameGeneratorType { get; internal set; }
        /// <summary>
        ///   The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string PropertyNameGeneratorType { get; internal set; }
        /// <summary>
        ///   The Liquid template directory (experimental).
        /// </summary>
        public virtual string TemplateDirectory { get; internal set; }
        /// <summary>
        ///   The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').
        /// </summary>
        public virtual string TypeNameGenerator { get; internal set; }
        /// <summary>
        ///   A file path or URL to the data or the JSON data itself.
        /// </summary>
        public virtual string Input { get; internal set; }
        /// <summary>
        ///   Overrides the service host of the web document (optional, use '.' to remove the hostname).
        /// </summary>
        public virtual string ServiceHost { get; internal set; }
        /// <summary>
        ///   Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').
        /// </summary>
        public virtual IReadOnlyList<string> ServiceSchemes => ServiceSchemesInternal.AsReadOnly();
        internal List<string> ServiceSchemesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   The output file path (optional).
        /// </summary>
        public virtual string Output { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("swagger2tsclient")
              .Add("/BaseUrlTokenName:{value}", BaseUrlTokenName)
              .Add("/ClassName:{value}", ClassName)
              .Add("/ClassTypes:{value}", ClassTypes)
              .Add("/ClientBaseClass:{value}", ClientBaseClass)
              .Add("/ConfigurationClass:{value}", ConfigurationClass)
              .Add("/ConvertConstructorInterfaceData:{value}", ConvertConstructorInterfaceData)
              .Add("/DateTimeType:{value}", DateTimeType)
              .Add("/ExceptionClass:{value}", ExceptionClass)
              .Add("/ExcludedParameterNames:{value}", ExcludedParameterNames)
              .Add("/ExcludedTypeNames:{value}", ExcludedTypeNames)
              .Add("/ExportTypes:{value}", ExportTypes)
              .Add("/ExtendedClasses:{value}", ExtendedClasses)
              .Add("/ExtensionCode:{value}", ExtensionCode)
              .Add("/GenerateClientClasses:{value}", GenerateClientClasses)
              .Add("/GenerateClientInterfaces:{value}", GenerateClientInterfaces)
              .Add("/GenerateCloneMethod:{value}", GenerateCloneMethod)
              .Add("/GenerateConstructorInterface:{value}", GenerateConstructorInterface)
              .Add("/GenerateDefaultValues:{value}", GenerateDefaultValues)
              .Add("/GenerateDtoTypes:{value}", GenerateDtoTypes)
              .Add("/GenerateOptionalParameters:{value}", GenerateOptionalParameters)
              .Add("/GenerateResponseClasses:{value}", GenerateResponseClasses)
              .Add("/HandleReferences:{value}", HandleReferences)
              .Add("/HttpClass:{value}", HttpClass)
              .Add("/ImportRequiredTypes:{value}", ImportRequiredTypes)
              .Add("/InjectionTokenType:{value}", InjectionTokenType)
              .Add("/InlineNamedAny:{value}", InlineNamedAny)
              .Add("/InlineNamedDictionaries:{value}", InlineNamedDictionaries)
              .Add("/MarkOptionalProperties:{value}", MarkOptionalProperties)
              .Add("/ModuleName:{value}", ModuleName)
              .Add("/Namespace:{value}", Namespace)
              .Add("/NullValue:{value}", NullValue)
              .Add("/OperationGenerationMode:{value}", OperationGenerationMode)
              .Add("/PromiseType:{value}", PromiseType)
              .Add("/ProtectedMethods:{value}", ProtectedMethods)
              .Add("/QueryNullValue:{value}", QueryNullValue)
              .Add("/ResponseClass:{value}", ResponseClass)
              .Add("/RxJsVersion:{value}", RxJsVersion)
              .Add("/Template:{value}", Template)
              .Add("/TypeScriptVersion:{value}", TypeScriptVersion)
              .Add("/TypeStyle:{value}", TypeStyle)
              .Add("/UseGetBaseUrlMethod:{value}", UseGetBaseUrlMethod)
              .Add("/UseSingletonProvider:{value}", UseSingletonProvider)
              .Add("/UseTransformOptionsMethod:{value}", UseTransformOptionsMethod)
              .Add("/UseTransformResultMethod:{value}", UseTransformResultMethod)
              .Add("/WrapDtoExceptions:{value}", WrapDtoExceptions)
              .Add("/WrapResponseMethods:{value}", WrapResponseMethods)
              .Add("/WrapResponses:{value}", WrapResponses)
              .Add("/EnumNameGeneratorType:{value}", EnumNameGeneratorType)
              .Add("/PropertyNameGeneratorType:{value}", PropertyNameGeneratorType)
              .Add("/TemplateDirectory:{value}", TemplateDirectory)
              .Add("/TypeNameGenerator:{value}", TypeNameGenerator)
              .Add("/Input:{value}", Input)
              .Add("/ServiceHost:{value}", ServiceHost)
              .Add("/ServiceSchemes:{value}", ServiceSchemes)
              .Add("/Output:{value}", Output)
              .Add("{value}", GetNSwagRuntime(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region NSwagVersionSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagVersionSettingsExtensions
    {
    }
    #endregion
    #region NSwagListTypesSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagListTypesSettingsExtensions
    {
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagListTypesSettings.File"/></em></p>
        ///   <p>The nswag.json configuration file path.</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings SetFile(this NSwagListTypesSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagListTypesSettings.File"/></em></p>
        ///   <p>The nswag.json configuration file path.</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings ResetFile(this NSwagListTypesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
        #region Variables
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagListTypesSettings.Variables"/> to a new dictionary</em></p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings SetVariables(this NSwagListTypesSettings toolSettings, IDictionary<string, object> variables)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VariablesInternal = variables.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagListTypesSettings.Variables"/></em></p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings ClearVariables(this NSwagListTypesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VariablesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds a new key-value-pair <see cref="NSwagListTypesSettings.Variables"/></em></p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings AddVariable(this NSwagListTypesSettings toolSettings, string variableKey, object variableValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VariablesInternal.Add(variableKey, variableValue);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes a key-value-pair from <see cref="NSwagListTypesSettings.Variables"/></em></p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings RemoveVariable(this NSwagListTypesSettings toolSettings, string variableKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VariablesInternal.Remove(variableKey);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets a key-value-pair in <see cref="NSwagListTypesSettings.Variables"/></em></p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings SetVariable(this NSwagListTypesSettings toolSettings, string variableKey, object variableValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VariablesInternal[variableKey] = variableValue;
            return toolSettings;
        }
        #endregion
        #region Assembly
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagListTypesSettings.Assembly"/> to a new list</em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings SetAssembly(this NSwagListTypesSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal = assembly.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagListTypesSettings.Assembly"/> to a new list</em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings SetAssembly(this NSwagListTypesSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal = assembly.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagListTypesSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings AddAssembly(this NSwagListTypesSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.AddRange(assembly);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagListTypesSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings AddAssembly(this NSwagListTypesSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.AddRange(assembly);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagListTypesSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings ClearAssembly(this NSwagListTypesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagListTypesSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings RemoveAssembly(this NSwagListTypesSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(assembly);
            toolSettings.AssemblyInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagListTypesSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings RemoveAssembly(this NSwagListTypesSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(assembly);
            toolSettings.AssemblyInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AssemblyConfig
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagListTypesSettings.AssemblyConfig"/></em></p>
        ///   <p>The path to the assembly App.config or Web.config (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings SetAssemblyConfig(this NSwagListTypesSettings toolSettings, string assemblyConfig)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyConfig = assemblyConfig;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagListTypesSettings.AssemblyConfig"/></em></p>
        ///   <p>The path to the assembly App.config or Web.config (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings ResetAssemblyConfig(this NSwagListTypesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyConfig = null;
            return toolSettings;
        }
        #endregion
        #region ReferencePaths
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagListTypesSettings.ReferencePaths"/> to a new list</em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings SetReferencePaths(this NSwagListTypesSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal = referencePaths.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagListTypesSettings.ReferencePaths"/> to a new list</em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings SetReferencePaths(this NSwagListTypesSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal = referencePaths.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagListTypesSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings AddReferencePaths(this NSwagListTypesSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.AddRange(referencePaths);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagListTypesSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings AddReferencePaths(this NSwagListTypesSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.AddRange(referencePaths);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagListTypesSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings ClearReferencePaths(this NSwagListTypesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagListTypesSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings RemoveReferencePaths(this NSwagListTypesSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(referencePaths);
            toolSettings.ReferencePathsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagListTypesSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings RemoveReferencePaths(this NSwagListTypesSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(referencePaths);
            toolSettings.ReferencePathsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region UseNuGetCache
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagListTypesSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings SetUseNuGetCache(this NSwagListTypesSettings toolSettings, bool? useNuGetCache)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = useNuGetCache;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagListTypesSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings ResetUseNuGetCache(this NSwagListTypesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagListTypesSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings EnableUseNuGetCache(this NSwagListTypesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagListTypesSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings DisableUseNuGetCache(this NSwagListTypesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagListTypesSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagListTypesSettings ToggleUseNuGetCache(this NSwagListTypesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = !toolSettings.UseNuGetCache;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region NSwagListWebApiControllersSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagListWebApiControllersSettingsExtensions
    {
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagListWebApiControllersSettings.File"/></em></p>
        ///   <p>The nswag.json configuration file path.</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings SetFile(this NSwagListWebApiControllersSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagListWebApiControllersSettings.File"/></em></p>
        ///   <p>The nswag.json configuration file path.</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings ResetFile(this NSwagListWebApiControllersSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
        #region Variables
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagListWebApiControllersSettings.Variables"/> to a new dictionary</em></p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings SetVariables(this NSwagListWebApiControllersSettings toolSettings, IDictionary<string, object> variables)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VariablesInternal = variables.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagListWebApiControllersSettings.Variables"/></em></p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings ClearVariables(this NSwagListWebApiControllersSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VariablesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds a new key-value-pair <see cref="NSwagListWebApiControllersSettings.Variables"/></em></p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings AddVariable(this NSwagListWebApiControllersSettings toolSettings, string variableKey, object variableValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VariablesInternal.Add(variableKey, variableValue);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes a key-value-pair from <see cref="NSwagListWebApiControllersSettings.Variables"/></em></p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings RemoveVariable(this NSwagListWebApiControllersSettings toolSettings, string variableKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VariablesInternal.Remove(variableKey);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets a key-value-pair in <see cref="NSwagListWebApiControllersSettings.Variables"/></em></p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings SetVariable(this NSwagListWebApiControllersSettings toolSettings, string variableKey, object variableValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VariablesInternal[variableKey] = variableValue;
            return toolSettings;
        }
        #endregion
        #region Assembly
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagListWebApiControllersSettings.Assembly"/> to a new list</em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings SetAssembly(this NSwagListWebApiControllersSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal = assembly.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagListWebApiControllersSettings.Assembly"/> to a new list</em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings SetAssembly(this NSwagListWebApiControllersSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal = assembly.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagListWebApiControllersSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings AddAssembly(this NSwagListWebApiControllersSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.AddRange(assembly);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagListWebApiControllersSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings AddAssembly(this NSwagListWebApiControllersSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.AddRange(assembly);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagListWebApiControllersSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings ClearAssembly(this NSwagListWebApiControllersSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagListWebApiControllersSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings RemoveAssembly(this NSwagListWebApiControllersSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(assembly);
            toolSettings.AssemblyInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagListWebApiControllersSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings RemoveAssembly(this NSwagListWebApiControllersSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(assembly);
            toolSettings.AssemblyInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AssemblyConfig
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagListWebApiControllersSettings.AssemblyConfig"/></em></p>
        ///   <p>The path to the assembly App.config or Web.config (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings SetAssemblyConfig(this NSwagListWebApiControllersSettings toolSettings, string assemblyConfig)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyConfig = assemblyConfig;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagListWebApiControllersSettings.AssemblyConfig"/></em></p>
        ///   <p>The path to the assembly App.config or Web.config (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings ResetAssemblyConfig(this NSwagListWebApiControllersSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyConfig = null;
            return toolSettings;
        }
        #endregion
        #region ReferencePaths
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagListWebApiControllersSettings.ReferencePaths"/> to a new list</em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings SetReferencePaths(this NSwagListWebApiControllersSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal = referencePaths.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagListWebApiControllersSettings.ReferencePaths"/> to a new list</em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings SetReferencePaths(this NSwagListWebApiControllersSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal = referencePaths.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagListWebApiControllersSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings AddReferencePaths(this NSwagListWebApiControllersSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.AddRange(referencePaths);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagListWebApiControllersSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings AddReferencePaths(this NSwagListWebApiControllersSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.AddRange(referencePaths);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagListWebApiControllersSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings ClearReferencePaths(this NSwagListWebApiControllersSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagListWebApiControllersSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings RemoveReferencePaths(this NSwagListWebApiControllersSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(referencePaths);
            toolSettings.ReferencePathsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagListWebApiControllersSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings RemoveReferencePaths(this NSwagListWebApiControllersSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(referencePaths);
            toolSettings.ReferencePathsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region UseNuGetCache
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagListWebApiControllersSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings SetUseNuGetCache(this NSwagListWebApiControllersSettings toolSettings, bool? useNuGetCache)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = useNuGetCache;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagListWebApiControllersSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings ResetUseNuGetCache(this NSwagListWebApiControllersSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagListWebApiControllersSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings EnableUseNuGetCache(this NSwagListWebApiControllersSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagListWebApiControllersSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings DisableUseNuGetCache(this NSwagListWebApiControllersSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagListWebApiControllersSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagListWebApiControllersSettings ToggleUseNuGetCache(this NSwagListWebApiControllersSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = !toolSettings.UseNuGetCache;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region NSwagTypesToOpenApiSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagTypesToOpenApiSettingsExtensions
    {
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToOpenApiSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings SetOutput(this NSwagTypesToOpenApiSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagTypesToOpenApiSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings ResetOutput(this NSwagTypesToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region OutputType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToOpenApiSettings.OutputType"/></em></p>
        ///   <p>Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings SetOutputType(this NSwagTypesToOpenApiSettings toolSettings, SchemaType outputType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputType = outputType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagTypesToOpenApiSettings.OutputType"/></em></p>
        ///   <p>Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings ResetOutputType(this NSwagTypesToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputType = null;
            return toolSettings;
        }
        #endregion
        #region Assembly
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToOpenApiSettings.Assembly"/> to a new list</em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings SetAssembly(this NSwagTypesToOpenApiSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal = assembly.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToOpenApiSettings.Assembly"/> to a new list</em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings SetAssembly(this NSwagTypesToOpenApiSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal = assembly.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagTypesToOpenApiSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings AddAssembly(this NSwagTypesToOpenApiSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.AddRange(assembly);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagTypesToOpenApiSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings AddAssembly(this NSwagTypesToOpenApiSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.AddRange(assembly);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagTypesToOpenApiSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings ClearAssembly(this NSwagTypesToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagTypesToOpenApiSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings RemoveAssembly(this NSwagTypesToOpenApiSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(assembly);
            toolSettings.AssemblyInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagTypesToOpenApiSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings RemoveAssembly(this NSwagTypesToOpenApiSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(assembly);
            toolSettings.AssemblyInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AssemblyConfig
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToOpenApiSettings.AssemblyConfig"/></em></p>
        ///   <p>The path to the assembly App.config or Web.config (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings SetAssemblyConfig(this NSwagTypesToOpenApiSettings toolSettings, string assemblyConfig)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyConfig = assemblyConfig;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagTypesToOpenApiSettings.AssemblyConfig"/></em></p>
        ///   <p>The path to the assembly App.config or Web.config (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings ResetAssemblyConfig(this NSwagTypesToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyConfig = null;
            return toolSettings;
        }
        #endregion
        #region ReferencePaths
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToOpenApiSettings.ReferencePaths"/> to a new list</em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings SetReferencePaths(this NSwagTypesToOpenApiSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal = referencePaths.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToOpenApiSettings.ReferencePaths"/> to a new list</em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings SetReferencePaths(this NSwagTypesToOpenApiSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal = referencePaths.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagTypesToOpenApiSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings AddReferencePaths(this NSwagTypesToOpenApiSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.AddRange(referencePaths);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagTypesToOpenApiSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings AddReferencePaths(this NSwagTypesToOpenApiSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.AddRange(referencePaths);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagTypesToOpenApiSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings ClearReferencePaths(this NSwagTypesToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagTypesToOpenApiSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings RemoveReferencePaths(this NSwagTypesToOpenApiSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(referencePaths);
            toolSettings.ReferencePathsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagTypesToOpenApiSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings RemoveReferencePaths(this NSwagTypesToOpenApiSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(referencePaths);
            toolSettings.ReferencePathsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region UseNuGetCache
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToOpenApiSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings SetUseNuGetCache(this NSwagTypesToOpenApiSettings toolSettings, bool? useNuGetCache)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = useNuGetCache;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagTypesToOpenApiSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings ResetUseNuGetCache(this NSwagTypesToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagTypesToOpenApiSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings EnableUseNuGetCache(this NSwagTypesToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagTypesToOpenApiSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings DisableUseNuGetCache(this NSwagTypesToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagTypesToOpenApiSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToOpenApiSettings ToggleUseNuGetCache(this NSwagTypesToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = !toolSettings.UseNuGetCache;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region NSwagTypesToSwaggerSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagTypesToSwaggerSettingsExtensions
    {
        #region AllowReferencesWithProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetAllowReferencesWithProperties(this NSwagTypesToSwaggerSettings toolSettings, bool? allowReferencesWithProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = allowReferencesWithProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagTypesToSwaggerSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ResetAllowReferencesWithProperties(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagTypesToSwaggerSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings EnableAllowReferencesWithProperties(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagTypesToSwaggerSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings DisableAllowReferencesWithProperties(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagTypesToSwaggerSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ToggleAllowReferencesWithProperties(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = !toolSettings.AllowReferencesWithProperties;
            return toolSettings;
        }
        #endregion
        #region ClassNames
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.ClassNames"/> to a new list</em></p>
        ///   <p>The class names.</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetClassNames(this NSwagTypesToSwaggerSettings toolSettings, params string[] classNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassNamesInternal = classNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.ClassNames"/> to a new list</em></p>
        ///   <p>The class names.</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetClassNames(this NSwagTypesToSwaggerSettings toolSettings, IEnumerable<string> classNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassNamesInternal = classNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagTypesToSwaggerSettings.ClassNames"/></em></p>
        ///   <p>The class names.</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings AddClassNames(this NSwagTypesToSwaggerSettings toolSettings, params string[] classNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassNamesInternal.AddRange(classNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagTypesToSwaggerSettings.ClassNames"/></em></p>
        ///   <p>The class names.</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings AddClassNames(this NSwagTypesToSwaggerSettings toolSettings, IEnumerable<string> classNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassNamesInternal.AddRange(classNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagTypesToSwaggerSettings.ClassNames"/></em></p>
        ///   <p>The class names.</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ClearClassNames(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagTypesToSwaggerSettings.ClassNames"/></em></p>
        ///   <p>The class names.</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings RemoveClassNames(this NSwagTypesToSwaggerSettings toolSettings, params string[] classNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(classNames);
            toolSettings.ClassNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagTypesToSwaggerSettings.ClassNames"/></em></p>
        ///   <p>The class names.</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings RemoveClassNames(this NSwagTypesToSwaggerSettings toolSettings, IEnumerable<string> classNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(classNames);
            toolSettings.ClassNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DefaultDictionaryValueReferenceTypeNullHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling of dictionary value types (NotNull (default) or Null).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetDefaultDictionaryValueReferenceTypeNullHandling(this NSwagTypesToSwaggerSettings toolSettings, ReferenceTypeNullHandling defaultDictionaryValueReferenceTypeNullHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultDictionaryValueReferenceTypeNullHandling = defaultDictionaryValueReferenceTypeNullHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagTypesToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling of dictionary value types (NotNull (default) or Null).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ResetDefaultDictionaryValueReferenceTypeNullHandling(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultDictionaryValueReferenceTypeNullHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultEnumHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.DefaultEnumHandling"/></em></p>
        ///   <p>The default enum handling ('String' or 'Integer'), default: Integer.</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetDefaultEnumHandling(this NSwagTypesToSwaggerSettings toolSettings, EnumHandling defaultEnumHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultEnumHandling = defaultEnumHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagTypesToSwaggerSettings.DefaultEnumHandling"/></em></p>
        ///   <p>The default enum handling ('String' or 'Integer'), default: Integer.</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ResetDefaultEnumHandling(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultEnumHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultPropertyNameHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.DefaultPropertyNameHandling"/></em></p>
        ///   <p>The default property name handling ('Default' or 'CamelCase').</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetDefaultPropertyNameHandling(this NSwagTypesToSwaggerSettings toolSettings, PropertyNameHandling defaultPropertyNameHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultPropertyNameHandling = defaultPropertyNameHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagTypesToSwaggerSettings.DefaultPropertyNameHandling"/></em></p>
        ///   <p>The default property name handling ('Default' or 'CamelCase').</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ResetDefaultPropertyNameHandling(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultPropertyNameHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultReferenceTypeNullHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.DefaultReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling (Null (default) or NotNull).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetDefaultReferenceTypeNullHandling(this NSwagTypesToSwaggerSettings toolSettings, ReferenceTypeNullHandling defaultReferenceTypeNullHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultReferenceTypeNullHandling = defaultReferenceTypeNullHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagTypesToSwaggerSettings.DefaultReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling (Null (default) or NotNull).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ResetDefaultReferenceTypeNullHandling(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultReferenceTypeNullHandling = null;
            return toolSettings;
        }
        #endregion
        #region FlattenInheritanceHierarchy
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetFlattenInheritanceHierarchy(this NSwagTypesToSwaggerSettings toolSettings, bool? flattenInheritanceHierarchy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = flattenInheritanceHierarchy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ResetFlattenInheritanceHierarchy(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings EnableFlattenInheritanceHierarchy(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings DisableFlattenInheritanceHierarchy(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagTypesToSwaggerSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ToggleFlattenInheritanceHierarchy(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = !toolSettings.FlattenInheritanceHierarchy;
            return toolSettings;
        }
        #endregion
        #region GenerateKnownTypes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetGenerateKnownTypes(this NSwagTypesToSwaggerSettings toolSettings, bool? generateKnownTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = generateKnownTypes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagTypesToSwaggerSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ResetGenerateKnownTypes(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagTypesToSwaggerSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings EnableGenerateKnownTypes(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagTypesToSwaggerSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings DisableGenerateKnownTypes(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagTypesToSwaggerSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ToggleGenerateKnownTypes(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = !toolSettings.GenerateKnownTypes;
            return toolSettings;
        }
        #endregion
        #region GenerateXmlObjects
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetGenerateXmlObjects(this NSwagTypesToSwaggerSettings toolSettings, bool? generateXmlObjects)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = generateXmlObjects;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagTypesToSwaggerSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ResetGenerateXmlObjects(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagTypesToSwaggerSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings EnableGenerateXmlObjects(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagTypesToSwaggerSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings DisableGenerateXmlObjects(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagTypesToSwaggerSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ToggleGenerateXmlObjects(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = !toolSettings.GenerateXmlObjects;
            return toolSettings;
        }
        #endregion
        #region IgnoreObsoleteProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetIgnoreObsoleteProperties(this NSwagTypesToSwaggerSettings toolSettings, bool? ignoreObsoleteProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = ignoreObsoleteProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ResetIgnoreObsoleteProperties(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings EnableIgnoreObsoleteProperties(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings DisableIgnoreObsoleteProperties(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagTypesToSwaggerSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ToggleIgnoreObsoleteProperties(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = !toolSettings.IgnoreObsoleteProperties;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetOutput(this NSwagTypesToSwaggerSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagTypesToSwaggerSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ResetOutput(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region OutputType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.OutputType"/></em></p>
        ///   <p>Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetOutputType(this NSwagTypesToSwaggerSettings toolSettings, SchemaType outputType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputType = outputType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagTypesToSwaggerSettings.OutputType"/></em></p>
        ///   <p>Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ResetOutputType(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputType = null;
            return toolSettings;
        }
        #endregion
        #region Assembly
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.Assembly"/> to a new list</em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetAssembly(this NSwagTypesToSwaggerSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal = assembly.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.Assembly"/> to a new list</em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetAssembly(this NSwagTypesToSwaggerSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal = assembly.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagTypesToSwaggerSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings AddAssembly(this NSwagTypesToSwaggerSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.AddRange(assembly);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagTypesToSwaggerSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings AddAssembly(this NSwagTypesToSwaggerSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.AddRange(assembly);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagTypesToSwaggerSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ClearAssembly(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagTypesToSwaggerSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings RemoveAssembly(this NSwagTypesToSwaggerSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(assembly);
            toolSettings.AssemblyInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagTypesToSwaggerSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings RemoveAssembly(this NSwagTypesToSwaggerSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(assembly);
            toolSettings.AssemblyInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AssemblyConfig
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.AssemblyConfig"/></em></p>
        ///   <p>The path to the assembly App.config or Web.config (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetAssemblyConfig(this NSwagTypesToSwaggerSettings toolSettings, string assemblyConfig)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyConfig = assemblyConfig;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagTypesToSwaggerSettings.AssemblyConfig"/></em></p>
        ///   <p>The path to the assembly App.config or Web.config (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ResetAssemblyConfig(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyConfig = null;
            return toolSettings;
        }
        #endregion
        #region ReferencePaths
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.ReferencePaths"/> to a new list</em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetReferencePaths(this NSwagTypesToSwaggerSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal = referencePaths.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.ReferencePaths"/> to a new list</em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetReferencePaths(this NSwagTypesToSwaggerSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal = referencePaths.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagTypesToSwaggerSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings AddReferencePaths(this NSwagTypesToSwaggerSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.AddRange(referencePaths);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagTypesToSwaggerSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings AddReferencePaths(this NSwagTypesToSwaggerSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.AddRange(referencePaths);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagTypesToSwaggerSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ClearReferencePaths(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagTypesToSwaggerSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings RemoveReferencePaths(this NSwagTypesToSwaggerSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(referencePaths);
            toolSettings.ReferencePathsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagTypesToSwaggerSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings RemoveReferencePaths(this NSwagTypesToSwaggerSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(referencePaths);
            toolSettings.ReferencePathsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region UseNuGetCache
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagTypesToSwaggerSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings SetUseNuGetCache(this NSwagTypesToSwaggerSettings toolSettings, bool? useNuGetCache)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = useNuGetCache;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagTypesToSwaggerSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ResetUseNuGetCache(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagTypesToSwaggerSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings EnableUseNuGetCache(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagTypesToSwaggerSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings DisableUseNuGetCache(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagTypesToSwaggerSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagTypesToSwaggerSettings ToggleUseNuGetCache(this NSwagTypesToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = !toolSettings.UseNuGetCache;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region NSwagWebApiToOpenApiSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagWebApiToOpenApiSettingsExtensions
    {
        #region AllowNullableBodyParameters
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetAllowNullableBodyParameters(this NSwagWebApiToOpenApiSettings toolSettings, bool? allowNullableBodyParameters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = allowNullableBodyParameters;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetAllowNullableBodyParameters(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings EnableAllowNullableBodyParameters(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings DisableAllowNullableBodyParameters(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToOpenApiSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ToggleAllowNullableBodyParameters(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = !toolSettings.AllowNullableBodyParameters;
            return toolSettings;
        }
        #endregion
        #region AllowReferencesWithProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetAllowReferencesWithProperties(this NSwagWebApiToOpenApiSettings toolSettings, bool? allowReferencesWithProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = allowReferencesWithProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetAllowReferencesWithProperties(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings EnableAllowReferencesWithProperties(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings DisableAllowReferencesWithProperties(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToOpenApiSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ToggleAllowReferencesWithProperties(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = !toolSettings.AllowReferencesWithProperties;
            return toolSettings;
        }
        #endregion
        #region AspNetCoreEnvironment
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.AspNetCoreEnvironment"/></em></p>
        ///   <p>Sets the ASPNETCORE_ENVIRONMENT if provided (default: empty).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetAspNetCoreEnvironment(this NSwagWebApiToOpenApiSettings toolSettings, string aspNetCoreEnvironment)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AspNetCoreEnvironment = aspNetCoreEnvironment;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.AspNetCoreEnvironment"/></em></p>
        ///   <p>Sets the ASPNETCORE_ENVIRONMENT if provided (default: empty).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetAspNetCoreEnvironment(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AspNetCoreEnvironment = null;
            return toolSettings;
        }
        #endregion
        #region ContractResolver
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.ContractResolver"/></em></p>
        ///   <p>DEPRECATED: The custom IContractResolver implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetContractResolver(this NSwagWebApiToOpenApiSettings toolSettings, string contractResolver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContractResolver = contractResolver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.ContractResolver"/></em></p>
        ///   <p>DEPRECATED: The custom IContractResolver implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetContractResolver(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContractResolver = null;
            return toolSettings;
        }
        #endregion
        #region CreateWebHostBuilderMethod
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.CreateWebHostBuilderMethod"/></em></p>
        ///   <p>The CreateWebHostBuilder method in the form 'assemblyName:fullTypeName.methodName' or 'fullTypeName.methodName'.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetCreateWebHostBuilderMethod(this NSwagWebApiToOpenApiSettings toolSettings, string createWebHostBuilderMethod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CreateWebHostBuilderMethod = createWebHostBuilderMethod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.CreateWebHostBuilderMethod"/></em></p>
        ///   <p>The CreateWebHostBuilder method in the form 'assemblyName:fullTypeName.methodName' or 'fullTypeName.methodName'.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetCreateWebHostBuilderMethod(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CreateWebHostBuilderMethod = null;
            return toolSettings;
        }
        #endregion
        #region DefaultDictionaryValueReferenceTypeNullHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling of dictionary value types (NotNull (default) or Null).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetDefaultDictionaryValueReferenceTypeNullHandling(this NSwagWebApiToOpenApiSettings toolSettings, ReferenceTypeNullHandling defaultDictionaryValueReferenceTypeNullHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultDictionaryValueReferenceTypeNullHandling = defaultDictionaryValueReferenceTypeNullHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling of dictionary value types (NotNull (default) or Null).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetDefaultDictionaryValueReferenceTypeNullHandling(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultDictionaryValueReferenceTypeNullHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultEnumHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.DefaultEnumHandling"/></em></p>
        ///   <p>The default enum handling ('String' or 'Integer'), default: Integer.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetDefaultEnumHandling(this NSwagWebApiToOpenApiSettings toolSettings, EnumHandling defaultEnumHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultEnumHandling = defaultEnumHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.DefaultEnumHandling"/></em></p>
        ///   <p>The default enum handling ('String' or 'Integer'), default: Integer.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetDefaultEnumHandling(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultEnumHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultPropertyNameHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.DefaultPropertyNameHandling"/></em></p>
        ///   <p>The default property name handling ('Default' or 'CamelCase').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetDefaultPropertyNameHandling(this NSwagWebApiToOpenApiSettings toolSettings, PropertyNameHandling defaultPropertyNameHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultPropertyNameHandling = defaultPropertyNameHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.DefaultPropertyNameHandling"/></em></p>
        ///   <p>The default property name handling ('Default' or 'CamelCase').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetDefaultPropertyNameHandling(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultPropertyNameHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultReferenceTypeNullHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.DefaultReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling (Null (default) or NotNull).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetDefaultReferenceTypeNullHandling(this NSwagWebApiToOpenApiSettings toolSettings, ReferenceTypeNullHandling defaultReferenceTypeNullHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultReferenceTypeNullHandling = defaultReferenceTypeNullHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.DefaultReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling (Null (default) or NotNull).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetDefaultReferenceTypeNullHandling(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultReferenceTypeNullHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultResponseReferenceTypeNullHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/></em></p>
        ///   <p>The default response reference type null handling (default: NotNull (default) or Null).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetDefaultResponseReferenceTypeNullHandling(this NSwagWebApiToOpenApiSettings toolSettings, ReferenceTypeNullHandling defaultResponseReferenceTypeNullHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultResponseReferenceTypeNullHandling = defaultResponseReferenceTypeNullHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/></em></p>
        ///   <p>The default response reference type null handling (default: NotNull (default) or Null).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetDefaultResponseReferenceTypeNullHandling(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultResponseReferenceTypeNullHandling = null;
            return toolSettings;
        }
        #endregion
        #region DocumentName
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.DocumentName"/></em></p>
        ///   <p>The document name to use in SwaggerDocumentProvider (default: v1).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetDocumentName(this NSwagWebApiToOpenApiSettings toolSettings, string documentName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentName = documentName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.DocumentName"/></em></p>
        ///   <p>The document name to use in SwaggerDocumentProvider (default: v1).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetDocumentName(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentName = null;
            return toolSettings;
        }
        #endregion
        #region DocumentProcessors
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/> to a new list</em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetDocumentProcessors(this NSwagWebApiToOpenApiSettings toolSettings, params string[] documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal = documentProcessors.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/> to a new list</em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetDocumentProcessors(this NSwagWebApiToOpenApiSettings toolSettings, IEnumerable<string> documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal = documentProcessors.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings AddDocumentProcessors(this NSwagWebApiToOpenApiSettings toolSettings, params string[] documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal.AddRange(documentProcessors);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings AddDocumentProcessors(this NSwagWebApiToOpenApiSettings toolSettings, IEnumerable<string> documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal.AddRange(documentProcessors);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ClearDocumentProcessors(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings RemoveDocumentProcessors(this NSwagWebApiToOpenApiSettings toolSettings, params string[] documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(documentProcessors);
            toolSettings.DocumentProcessorsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToOpenApiSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings RemoveDocumentProcessors(this NSwagWebApiToOpenApiSettings toolSettings, IEnumerable<string> documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(documentProcessors);
            toolSettings.DocumentProcessorsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DocumentTemplate
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.DocumentTemplate"/></em></p>
        ///   <p>Specifies the Swagger document template (may be a path or JSON, default: none).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetDocumentTemplate(this NSwagWebApiToOpenApiSettings toolSettings, string documentTemplate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentTemplate = documentTemplate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.DocumentTemplate"/></em></p>
        ///   <p>Specifies the Swagger document template (may be a path or JSON, default: none).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetDocumentTemplate(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentTemplate = null;
            return toolSettings;
        }
        #endregion
        #region ExcludedTypeNames
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/> to a new list</em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetExcludedTypeNames(this NSwagWebApiToOpenApiSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal = excludedTypeNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/> to a new list</em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetExcludedTypeNames(this NSwagWebApiToOpenApiSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal = excludedTypeNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings AddExcludedTypeNames(this NSwagWebApiToOpenApiSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.AddRange(excludedTypeNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings AddExcludedTypeNames(this NSwagWebApiToOpenApiSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.AddRange(excludedTypeNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ClearExcludedTypeNames(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings RemoveExcludedTypeNames(this NSwagWebApiToOpenApiSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedTypeNames);
            toolSettings.ExcludedTypeNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToOpenApiSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings RemoveExcludedTypeNames(this NSwagWebApiToOpenApiSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedTypeNames);
            toolSettings.ExcludedTypeNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region FlattenInheritanceHierarchy
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetFlattenInheritanceHierarchy(this NSwagWebApiToOpenApiSettings toolSettings, bool? flattenInheritanceHierarchy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = flattenInheritanceHierarchy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetFlattenInheritanceHierarchy(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings EnableFlattenInheritanceHierarchy(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings DisableFlattenInheritanceHierarchy(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToOpenApiSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ToggleFlattenInheritanceHierarchy(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = !toolSettings.FlattenInheritanceHierarchy;
            return toolSettings;
        }
        #endregion
        #region GenerateAbstractProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetGenerateAbstractProperties(this NSwagWebApiToOpenApiSettings toolSettings, bool? generateAbstractProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = generateAbstractProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetGenerateAbstractProperties(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings EnableGenerateAbstractProperties(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings DisableGenerateAbstractProperties(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ToggleGenerateAbstractProperties(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = !toolSettings.GenerateAbstractProperties;
            return toolSettings;
        }
        #endregion
        #region GenerateAbstractSchemas
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetGenerateAbstractSchemas(this NSwagWebApiToOpenApiSettings toolSettings, bool? generateAbstractSchemas)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = generateAbstractSchemas;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetGenerateAbstractSchemas(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings EnableGenerateAbstractSchemas(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings DisableGenerateAbstractSchemas(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToOpenApiSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ToggleGenerateAbstractSchemas(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = !toolSettings.GenerateAbstractSchemas;
            return toolSettings;
        }
        #endregion
        #region GenerateEnumMappingDescription
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetGenerateEnumMappingDescription(this NSwagWebApiToOpenApiSettings toolSettings, bool? generateEnumMappingDescription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = generateEnumMappingDescription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetGenerateEnumMappingDescription(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings EnableGenerateEnumMappingDescription(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings DisableGenerateEnumMappingDescription(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToOpenApiSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ToggleGenerateEnumMappingDescription(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = !toolSettings.GenerateEnumMappingDescription;
            return toolSettings;
        }
        #endregion
        #region GenerateKnownTypes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetGenerateKnownTypes(this NSwagWebApiToOpenApiSettings toolSettings, bool? generateKnownTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = generateKnownTypes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetGenerateKnownTypes(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToOpenApiSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings EnableGenerateKnownTypes(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToOpenApiSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings DisableGenerateKnownTypes(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToOpenApiSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ToggleGenerateKnownTypes(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = !toolSettings.GenerateKnownTypes;
            return toolSettings;
        }
        #endregion
        #region GenerateXmlObjects
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetGenerateXmlObjects(this NSwagWebApiToOpenApiSettings toolSettings, bool? generateXmlObjects)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = generateXmlObjects;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetGenerateXmlObjects(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToOpenApiSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings EnableGenerateXmlObjects(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToOpenApiSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings DisableGenerateXmlObjects(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToOpenApiSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ToggleGenerateXmlObjects(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = !toolSettings.GenerateXmlObjects;
            return toolSettings;
        }
        #endregion
        #region IgnoreObsoleteProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetIgnoreObsoleteProperties(this NSwagWebApiToOpenApiSettings toolSettings, bool? ignoreObsoleteProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = ignoreObsoleteProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetIgnoreObsoleteProperties(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings EnableIgnoreObsoleteProperties(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings DisableIgnoreObsoleteProperties(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToOpenApiSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ToggleIgnoreObsoleteProperties(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = !toolSettings.IgnoreObsoleteProperties;
            return toolSettings;
        }
        #endregion
        #region InfoDescription
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.InfoDescription"/></em></p>
        ///   <p>Specify the description of the Swagger specification (ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetInfoDescription(this NSwagWebApiToOpenApiSettings toolSettings, string infoDescription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoDescription = infoDescription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.InfoDescription"/></em></p>
        ///   <p>Specify the description of the Swagger specification (ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetInfoDescription(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoDescription = null;
            return toolSettings;
        }
        #endregion
        #region InfoTitle
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.InfoTitle"/></em></p>
        ///   <p>Specify the title of the Swagger specification (ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetInfoTitle(this NSwagWebApiToOpenApiSettings toolSettings, string infoTitle)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoTitle = infoTitle;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.InfoTitle"/></em></p>
        ///   <p>Specify the title of the Swagger specification (ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetInfoTitle(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoTitle = null;
            return toolSettings;
        }
        #endregion
        #region InfoVersion
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.InfoVersion"/></em></p>
        ///   <p>Specify the version of the Swagger specification (default: 1.0.0, ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetInfoVersion(this NSwagWebApiToOpenApiSettings toolSettings, string infoVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoVersion = infoVersion;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.InfoVersion"/></em></p>
        ///   <p>Specify the version of the Swagger specification (default: 1.0.0, ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetInfoVersion(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoVersion = null;
            return toolSettings;
        }
        #endregion
        #region OperationProcessors
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/> to a new list</em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetOperationProcessors(this NSwagWebApiToOpenApiSettings toolSettings, params string[] operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal = operationProcessors.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/> to a new list</em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetOperationProcessors(this NSwagWebApiToOpenApiSettings toolSettings, IEnumerable<string> operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal = operationProcessors.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings AddOperationProcessors(this NSwagWebApiToOpenApiSettings toolSettings, params string[] operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal.AddRange(operationProcessors);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings AddOperationProcessors(this NSwagWebApiToOpenApiSettings toolSettings, IEnumerable<string> operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal.AddRange(operationProcessors);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ClearOperationProcessors(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings RemoveOperationProcessors(this NSwagWebApiToOpenApiSettings toolSettings, params string[] operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(operationProcessors);
            toolSettings.OperationProcessorsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToOpenApiSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings RemoveOperationProcessors(this NSwagWebApiToOpenApiSettings toolSettings, IEnumerable<string> operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(operationProcessors);
            toolSettings.OperationProcessorsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region SchemaNameGenerator
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.SchemaNameGenerator"/></em></p>
        ///   <p>The custom ISchemaNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetSchemaNameGenerator(this NSwagWebApiToOpenApiSettings toolSettings, string schemaNameGenerator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SchemaNameGenerator = schemaNameGenerator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.SchemaNameGenerator"/></em></p>
        ///   <p>The custom ISchemaNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetSchemaNameGenerator(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SchemaNameGenerator = null;
            return toolSettings;
        }
        #endregion
        #region SerializerSettings
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.SerializerSettings"/></em></p>
        ///   <p>The custom JsonSerializerSettings implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetSerializerSettings(this NSwagWebApiToOpenApiSettings toolSettings, string serializerSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SerializerSettings = serializerSettings;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.SerializerSettings"/></em></p>
        ///   <p>The custom JsonSerializerSettings implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetSerializerSettings(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SerializerSettings = null;
            return toolSettings;
        }
        #endregion
        #region ServiceBasePath
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.ServiceBasePath"/></em></p>
        ///   <p>The basePath of the Swagger specification (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetServiceBasePath(this NSwagWebApiToOpenApiSettings toolSettings, string serviceBasePath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceBasePath = serviceBasePath;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.ServiceBasePath"/></em></p>
        ///   <p>The basePath of the Swagger specification (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetServiceBasePath(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceBasePath = null;
            return toolSettings;
        }
        #endregion
        #region ServiceHost
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web service (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetServiceHost(this NSwagWebApiToOpenApiSettings toolSettings, string serviceHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = serviceHost;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web service (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetServiceHost(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = null;
            return toolSettings;
        }
        #endregion
        #region ServiceSchemes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetServiceSchemes(this NSwagWebApiToOpenApiSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetServiceSchemes(this NSwagWebApiToOpenApiSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings AddServiceSchemes(this NSwagWebApiToOpenApiSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings AddServiceSchemes(this NSwagWebApiToOpenApiSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ClearServiceSchemes(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings RemoveServiceSchemes(this NSwagWebApiToOpenApiSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToOpenApiSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings RemoveServiceSchemes(this NSwagWebApiToOpenApiSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Startup
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.Startup"/></em></p>
        ///   <p>The Startup class type in the form 'assemblyName:fullTypeName' or 'fullTypeName'.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetStartup(this NSwagWebApiToOpenApiSettings toolSettings, string startup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Startup = startup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.Startup"/></em></p>
        ///   <p>The Startup class type in the form 'assemblyName:fullTypeName' or 'fullTypeName'.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetStartup(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Startup = null;
            return toolSettings;
        }
        #endregion
        #region TypeNameGenerator
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetTypeNameGenerator(this NSwagWebApiToOpenApiSettings toolSettings, string typeNameGenerator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = typeNameGenerator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetTypeNameGenerator(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = null;
            return toolSettings;
        }
        #endregion
        #region UseDocumentProvider
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetUseDocumentProvider(this NSwagWebApiToOpenApiSettings toolSettings, bool? useDocumentProvider)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = useDocumentProvider;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetUseDocumentProvider(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToOpenApiSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings EnableUseDocumentProvider(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToOpenApiSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings DisableUseDocumentProvider(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToOpenApiSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ToggleUseDocumentProvider(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = !toolSettings.UseDocumentProvider;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetOutput(this NSwagWebApiToOpenApiSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetOutput(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region OutputType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.OutputType"/></em></p>
        ///   <p>Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetOutputType(this NSwagWebApiToOpenApiSettings toolSettings, SchemaType outputType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputType = outputType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.OutputType"/></em></p>
        ///   <p>Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetOutputType(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputType = null;
            return toolSettings;
        }
        #endregion
        #region Assembly
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.Assembly"/> to a new list</em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetAssembly(this NSwagWebApiToOpenApiSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal = assembly.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.Assembly"/> to a new list</em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetAssembly(this NSwagWebApiToOpenApiSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal = assembly.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToOpenApiSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings AddAssembly(this NSwagWebApiToOpenApiSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.AddRange(assembly);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToOpenApiSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings AddAssembly(this NSwagWebApiToOpenApiSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.AddRange(assembly);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagWebApiToOpenApiSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ClearAssembly(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToOpenApiSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings RemoveAssembly(this NSwagWebApiToOpenApiSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(assembly);
            toolSettings.AssemblyInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToOpenApiSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings RemoveAssembly(this NSwagWebApiToOpenApiSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(assembly);
            toolSettings.AssemblyInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AssemblyConfig
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.AssemblyConfig"/></em></p>
        ///   <p>The path to the assembly App.config or Web.config (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetAssemblyConfig(this NSwagWebApiToOpenApiSettings toolSettings, string assemblyConfig)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyConfig = assemblyConfig;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.AssemblyConfig"/></em></p>
        ///   <p>The path to the assembly App.config or Web.config (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetAssemblyConfig(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyConfig = null;
            return toolSettings;
        }
        #endregion
        #region ReferencePaths
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/> to a new list</em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetReferencePaths(this NSwagWebApiToOpenApiSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal = referencePaths.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/> to a new list</em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetReferencePaths(this NSwagWebApiToOpenApiSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal = referencePaths.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings AddReferencePaths(this NSwagWebApiToOpenApiSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.AddRange(referencePaths);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings AddReferencePaths(this NSwagWebApiToOpenApiSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.AddRange(referencePaths);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ClearReferencePaths(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings RemoveReferencePaths(this NSwagWebApiToOpenApiSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(referencePaths);
            toolSettings.ReferencePathsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToOpenApiSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings RemoveReferencePaths(this NSwagWebApiToOpenApiSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(referencePaths);
            toolSettings.ReferencePathsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region UseNuGetCache
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToOpenApiSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings SetUseNuGetCache(this NSwagWebApiToOpenApiSettings toolSettings, bool? useNuGetCache)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = useNuGetCache;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToOpenApiSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ResetUseNuGetCache(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToOpenApiSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings EnableUseNuGetCache(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToOpenApiSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings DisableUseNuGetCache(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToOpenApiSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToOpenApiSettings ToggleUseNuGetCache(this NSwagWebApiToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = !toolSettings.UseNuGetCache;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region NSwagWebApiToSwaggerSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagWebApiToSwaggerSettingsExtensions
    {
        #region AddMissingPathParameters
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.AddMissingPathParameters"/></em></p>
        ///   <p>Specifies whether to add path parameters which are missing in the action method (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetAddMissingPathParameters(this NSwagWebApiToSwaggerSettings toolSettings, bool? addMissingPathParameters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddMissingPathParameters = addMissingPathParameters;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.AddMissingPathParameters"/></em></p>
        ///   <p>Specifies whether to add path parameters which are missing in the action method (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetAddMissingPathParameters(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddMissingPathParameters = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToSwaggerSettings.AddMissingPathParameters"/></em></p>
        ///   <p>Specifies whether to add path parameters which are missing in the action method (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings EnableAddMissingPathParameters(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddMissingPathParameters = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToSwaggerSettings.AddMissingPathParameters"/></em></p>
        ///   <p>Specifies whether to add path parameters which are missing in the action method (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings DisableAddMissingPathParameters(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddMissingPathParameters = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToSwaggerSettings.AddMissingPathParameters"/></em></p>
        ///   <p>Specifies whether to add path parameters which are missing in the action method (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ToggleAddMissingPathParameters(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddMissingPathParameters = !toolSettings.AddMissingPathParameters;
            return toolSettings;
        }
        #endregion
        #region AspNetCore
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.AspNetCore"/></em></p>
        ///   <p>Specifies whether the controllers are hosted by ASP.NET Core.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetAspNetCore(this NSwagWebApiToSwaggerSettings toolSettings, bool? aspNetCore)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AspNetCore = aspNetCore;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.AspNetCore"/></em></p>
        ///   <p>Specifies whether the controllers are hosted by ASP.NET Core.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetAspNetCore(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AspNetCore = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToSwaggerSettings.AspNetCore"/></em></p>
        ///   <p>Specifies whether the controllers are hosted by ASP.NET Core.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings EnableAspNetCore(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AspNetCore = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToSwaggerSettings.AspNetCore"/></em></p>
        ///   <p>Specifies whether the controllers are hosted by ASP.NET Core.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings DisableAspNetCore(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AspNetCore = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToSwaggerSettings.AspNetCore"/></em></p>
        ///   <p>Specifies whether the controllers are hosted by ASP.NET Core.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ToggleAspNetCore(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AspNetCore = !toolSettings.AspNetCore;
            return toolSettings;
        }
        #endregion
        #region Controller
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.Controller"/></em></p>
        ///   <p>The Web API controller full class name or empty to load all controllers from the assembly.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetController(this NSwagWebApiToSwaggerSettings toolSettings, string controller)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Controller = controller;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.Controller"/></em></p>
        ///   <p>The Web API controller full class name or empty to load all controllers from the assembly.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetController(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Controller = null;
            return toolSettings;
        }
        #endregion
        #region Controllers
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.Controllers"/> to a new list</em></p>
        ///   <p>The Web API controller full class names or empty to load all controllers from the assembly (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetControllers(this NSwagWebApiToSwaggerSettings toolSettings, params string[] controllers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ControllersInternal = controllers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.Controllers"/> to a new list</em></p>
        ///   <p>The Web API controller full class names or empty to load all controllers from the assembly (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetControllers(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> controllers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ControllersInternal = controllers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToSwaggerSettings.Controllers"/></em></p>
        ///   <p>The Web API controller full class names or empty to load all controllers from the assembly (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings AddControllers(this NSwagWebApiToSwaggerSettings toolSettings, params string[] controllers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ControllersInternal.AddRange(controllers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToSwaggerSettings.Controllers"/></em></p>
        ///   <p>The Web API controller full class names or empty to load all controllers from the assembly (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings AddControllers(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> controllers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ControllersInternal.AddRange(controllers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagWebApiToSwaggerSettings.Controllers"/></em></p>
        ///   <p>The Web API controller full class names or empty to load all controllers from the assembly (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ClearControllers(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ControllersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToSwaggerSettings.Controllers"/></em></p>
        ///   <p>The Web API controller full class names or empty to load all controllers from the assembly (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings RemoveControllers(this NSwagWebApiToSwaggerSettings toolSettings, params string[] controllers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(controllers);
            toolSettings.ControllersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToSwaggerSettings.Controllers"/></em></p>
        ///   <p>The Web API controller full class names or empty to load all controllers from the assembly (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings RemoveControllers(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> controllers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(controllers);
            toolSettings.ControllersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DefaultUrlTemplate
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.DefaultUrlTemplate"/></em></p>
        ///   <p>The Web API default URL template (default for Web API: 'api/{controller}/{id}'; for MVC projects: '{controller}/{action}/{id?}').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetDefaultUrlTemplate(this NSwagWebApiToSwaggerSettings toolSettings, string defaultUrlTemplate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultUrlTemplate = defaultUrlTemplate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.DefaultUrlTemplate"/></em></p>
        ///   <p>The Web API default URL template (default for Web API: 'api/{controller}/{id}'; for MVC projects: '{controller}/{action}/{id?}').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetDefaultUrlTemplate(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultUrlTemplate = null;
            return toolSettings;
        }
        #endregion
        #region IncludedVersions
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/> to a new list</em></p>
        ///   <p>The included API versions used by the ApiVersionProcessor (comma separated, default: empty = all).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetIncludedVersions(this NSwagWebApiToSwaggerSettings toolSettings, params string[] includedVersions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IncludedVersionsInternal = includedVersions.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/> to a new list</em></p>
        ///   <p>The included API versions used by the ApiVersionProcessor (comma separated, default: empty = all).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetIncludedVersions(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> includedVersions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IncludedVersionsInternal = includedVersions.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/></em></p>
        ///   <p>The included API versions used by the ApiVersionProcessor (comma separated, default: empty = all).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings AddIncludedVersions(this NSwagWebApiToSwaggerSettings toolSettings, params string[] includedVersions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IncludedVersionsInternal.AddRange(includedVersions);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/></em></p>
        ///   <p>The included API versions used by the ApiVersionProcessor (comma separated, default: empty = all).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings AddIncludedVersions(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> includedVersions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IncludedVersionsInternal.AddRange(includedVersions);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/></em></p>
        ///   <p>The included API versions used by the ApiVersionProcessor (comma separated, default: empty = all).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ClearIncludedVersions(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IncludedVersionsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/></em></p>
        ///   <p>The included API versions used by the ApiVersionProcessor (comma separated, default: empty = all).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings RemoveIncludedVersions(this NSwagWebApiToSwaggerSettings toolSettings, params string[] includedVersions)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(includedVersions);
            toolSettings.IncludedVersionsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToSwaggerSettings.IncludedVersions"/></em></p>
        ///   <p>The included API versions used by the ApiVersionProcessor (comma separated, default: empty = all).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings RemoveIncludedVersions(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> includedVersions)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(includedVersions);
            toolSettings.IncludedVersionsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ResolveJsonOptions
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.ResolveJsonOptions"/></em></p>
        ///   <p>Specifies whether to resolve MvcJsonOptions to infer serializer settings (recommended, default: false, only available when IsAspNetCore is set).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetResolveJsonOptions(this NSwagWebApiToSwaggerSettings toolSettings, bool? resolveJsonOptions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResolveJsonOptions = resolveJsonOptions;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.ResolveJsonOptions"/></em></p>
        ///   <p>Specifies whether to resolve MvcJsonOptions to infer serializer settings (recommended, default: false, only available when IsAspNetCore is set).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetResolveJsonOptions(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResolveJsonOptions = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToSwaggerSettings.ResolveJsonOptions"/></em></p>
        ///   <p>Specifies whether to resolve MvcJsonOptions to infer serializer settings (recommended, default: false, only available when IsAspNetCore is set).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings EnableResolveJsonOptions(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResolveJsonOptions = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToSwaggerSettings.ResolveJsonOptions"/></em></p>
        ///   <p>Specifies whether to resolve MvcJsonOptions to infer serializer settings (recommended, default: false, only available when IsAspNetCore is set).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings DisableResolveJsonOptions(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResolveJsonOptions = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToSwaggerSettings.ResolveJsonOptions"/></em></p>
        ///   <p>Specifies whether to resolve MvcJsonOptions to infer serializer settings (recommended, default: false, only available when IsAspNetCore is set).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ToggleResolveJsonOptions(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResolveJsonOptions = !toolSettings.ResolveJsonOptions;
            return toolSettings;
        }
        #endregion
        #region AllowNullableBodyParameters
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetAllowNullableBodyParameters(this NSwagWebApiToSwaggerSettings toolSettings, bool? allowNullableBodyParameters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = allowNullableBodyParameters;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetAllowNullableBodyParameters(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings EnableAllowNullableBodyParameters(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings DisableAllowNullableBodyParameters(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToSwaggerSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ToggleAllowNullableBodyParameters(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = !toolSettings.AllowNullableBodyParameters;
            return toolSettings;
        }
        #endregion
        #region AllowReferencesWithProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetAllowReferencesWithProperties(this NSwagWebApiToSwaggerSettings toolSettings, bool? allowReferencesWithProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = allowReferencesWithProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetAllowReferencesWithProperties(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings EnableAllowReferencesWithProperties(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings DisableAllowReferencesWithProperties(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToSwaggerSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ToggleAllowReferencesWithProperties(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = !toolSettings.AllowReferencesWithProperties;
            return toolSettings;
        }
        #endregion
        #region AspNetCoreEnvironment
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.AspNetCoreEnvironment"/></em></p>
        ///   <p>Sets the ASPNETCORE_ENVIRONMENT if provided (default: empty).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetAspNetCoreEnvironment(this NSwagWebApiToSwaggerSettings toolSettings, string aspNetCoreEnvironment)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AspNetCoreEnvironment = aspNetCoreEnvironment;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.AspNetCoreEnvironment"/></em></p>
        ///   <p>Sets the ASPNETCORE_ENVIRONMENT if provided (default: empty).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetAspNetCoreEnvironment(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AspNetCoreEnvironment = null;
            return toolSettings;
        }
        #endregion
        #region ContractResolver
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.ContractResolver"/></em></p>
        ///   <p>DEPRECATED: The custom IContractResolver implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetContractResolver(this NSwagWebApiToSwaggerSettings toolSettings, string contractResolver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContractResolver = contractResolver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.ContractResolver"/></em></p>
        ///   <p>DEPRECATED: The custom IContractResolver implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetContractResolver(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContractResolver = null;
            return toolSettings;
        }
        #endregion
        #region CreateWebHostBuilderMethod
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.CreateWebHostBuilderMethod"/></em></p>
        ///   <p>The CreateWebHostBuilder method in the form 'assemblyName:fullTypeName.methodName' or 'fullTypeName.methodName'.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetCreateWebHostBuilderMethod(this NSwagWebApiToSwaggerSettings toolSettings, string createWebHostBuilderMethod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CreateWebHostBuilderMethod = createWebHostBuilderMethod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.CreateWebHostBuilderMethod"/></em></p>
        ///   <p>The CreateWebHostBuilder method in the form 'assemblyName:fullTypeName.methodName' or 'fullTypeName.methodName'.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetCreateWebHostBuilderMethod(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CreateWebHostBuilderMethod = null;
            return toolSettings;
        }
        #endregion
        #region DefaultDictionaryValueReferenceTypeNullHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling of dictionary value types (NotNull (default) or Null).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetDefaultDictionaryValueReferenceTypeNullHandling(this NSwagWebApiToSwaggerSettings toolSettings, ReferenceTypeNullHandling defaultDictionaryValueReferenceTypeNullHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultDictionaryValueReferenceTypeNullHandling = defaultDictionaryValueReferenceTypeNullHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling of dictionary value types (NotNull (default) or Null).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetDefaultDictionaryValueReferenceTypeNullHandling(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultDictionaryValueReferenceTypeNullHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultEnumHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.DefaultEnumHandling"/></em></p>
        ///   <p>The default enum handling ('String' or 'Integer'), default: Integer.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetDefaultEnumHandling(this NSwagWebApiToSwaggerSettings toolSettings, EnumHandling defaultEnumHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultEnumHandling = defaultEnumHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.DefaultEnumHandling"/></em></p>
        ///   <p>The default enum handling ('String' or 'Integer'), default: Integer.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetDefaultEnumHandling(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultEnumHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultPropertyNameHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.DefaultPropertyNameHandling"/></em></p>
        ///   <p>The default property name handling ('Default' or 'CamelCase').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetDefaultPropertyNameHandling(this NSwagWebApiToSwaggerSettings toolSettings, PropertyNameHandling defaultPropertyNameHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultPropertyNameHandling = defaultPropertyNameHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.DefaultPropertyNameHandling"/></em></p>
        ///   <p>The default property name handling ('Default' or 'CamelCase').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetDefaultPropertyNameHandling(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultPropertyNameHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultReferenceTypeNullHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.DefaultReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling (Null (default) or NotNull).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetDefaultReferenceTypeNullHandling(this NSwagWebApiToSwaggerSettings toolSettings, ReferenceTypeNullHandling defaultReferenceTypeNullHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultReferenceTypeNullHandling = defaultReferenceTypeNullHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.DefaultReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling (Null (default) or NotNull).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetDefaultReferenceTypeNullHandling(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultReferenceTypeNullHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultResponseReferenceTypeNullHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/></em></p>
        ///   <p>The default response reference type null handling (default: NotNull (default) or Null).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetDefaultResponseReferenceTypeNullHandling(this NSwagWebApiToSwaggerSettings toolSettings, ReferenceTypeNullHandling defaultResponseReferenceTypeNullHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultResponseReferenceTypeNullHandling = defaultResponseReferenceTypeNullHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/></em></p>
        ///   <p>The default response reference type null handling (default: NotNull (default) or Null).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetDefaultResponseReferenceTypeNullHandling(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultResponseReferenceTypeNullHandling = null;
            return toolSettings;
        }
        #endregion
        #region DocumentName
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.DocumentName"/></em></p>
        ///   <p>The document name to use in SwaggerDocumentProvider (default: v1).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetDocumentName(this NSwagWebApiToSwaggerSettings toolSettings, string documentName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentName = documentName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.DocumentName"/></em></p>
        ///   <p>The document name to use in SwaggerDocumentProvider (default: v1).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetDocumentName(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentName = null;
            return toolSettings;
        }
        #endregion
        #region DocumentProcessors
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/> to a new list</em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetDocumentProcessors(this NSwagWebApiToSwaggerSettings toolSettings, params string[] documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal = documentProcessors.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/> to a new list</em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetDocumentProcessors(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal = documentProcessors.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings AddDocumentProcessors(this NSwagWebApiToSwaggerSettings toolSettings, params string[] documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal.AddRange(documentProcessors);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings AddDocumentProcessors(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal.AddRange(documentProcessors);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ClearDocumentProcessors(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings RemoveDocumentProcessors(this NSwagWebApiToSwaggerSettings toolSettings, params string[] documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(documentProcessors);
            toolSettings.DocumentProcessorsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToSwaggerSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings RemoveDocumentProcessors(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(documentProcessors);
            toolSettings.DocumentProcessorsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DocumentTemplate
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.DocumentTemplate"/></em></p>
        ///   <p>Specifies the Swagger document template (may be a path or JSON, default: none).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetDocumentTemplate(this NSwagWebApiToSwaggerSettings toolSettings, string documentTemplate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentTemplate = documentTemplate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.DocumentTemplate"/></em></p>
        ///   <p>Specifies the Swagger document template (may be a path or JSON, default: none).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetDocumentTemplate(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentTemplate = null;
            return toolSettings;
        }
        #endregion
        #region ExcludedTypeNames
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/> to a new list</em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetExcludedTypeNames(this NSwagWebApiToSwaggerSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal = excludedTypeNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/> to a new list</em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetExcludedTypeNames(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal = excludedTypeNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings AddExcludedTypeNames(this NSwagWebApiToSwaggerSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.AddRange(excludedTypeNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings AddExcludedTypeNames(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.AddRange(excludedTypeNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ClearExcludedTypeNames(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings RemoveExcludedTypeNames(this NSwagWebApiToSwaggerSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedTypeNames);
            toolSettings.ExcludedTypeNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToSwaggerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings RemoveExcludedTypeNames(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedTypeNames);
            toolSettings.ExcludedTypeNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region FlattenInheritanceHierarchy
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetFlattenInheritanceHierarchy(this NSwagWebApiToSwaggerSettings toolSettings, bool? flattenInheritanceHierarchy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = flattenInheritanceHierarchy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetFlattenInheritanceHierarchy(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings EnableFlattenInheritanceHierarchy(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings DisableFlattenInheritanceHierarchy(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToSwaggerSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ToggleFlattenInheritanceHierarchy(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = !toolSettings.FlattenInheritanceHierarchy;
            return toolSettings;
        }
        #endregion
        #region GenerateAbstractProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetGenerateAbstractProperties(this NSwagWebApiToSwaggerSettings toolSettings, bool? generateAbstractProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = generateAbstractProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetGenerateAbstractProperties(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings EnableGenerateAbstractProperties(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings DisableGenerateAbstractProperties(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ToggleGenerateAbstractProperties(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = !toolSettings.GenerateAbstractProperties;
            return toolSettings;
        }
        #endregion
        #region GenerateAbstractSchemas
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetGenerateAbstractSchemas(this NSwagWebApiToSwaggerSettings toolSettings, bool? generateAbstractSchemas)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = generateAbstractSchemas;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetGenerateAbstractSchemas(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings EnableGenerateAbstractSchemas(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings DisableGenerateAbstractSchemas(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToSwaggerSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ToggleGenerateAbstractSchemas(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = !toolSettings.GenerateAbstractSchemas;
            return toolSettings;
        }
        #endregion
        #region GenerateEnumMappingDescription
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetGenerateEnumMappingDescription(this NSwagWebApiToSwaggerSettings toolSettings, bool? generateEnumMappingDescription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = generateEnumMappingDescription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetGenerateEnumMappingDescription(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings EnableGenerateEnumMappingDescription(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings DisableGenerateEnumMappingDescription(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToSwaggerSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ToggleGenerateEnumMappingDescription(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = !toolSettings.GenerateEnumMappingDescription;
            return toolSettings;
        }
        #endregion
        #region GenerateKnownTypes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetGenerateKnownTypes(this NSwagWebApiToSwaggerSettings toolSettings, bool? generateKnownTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = generateKnownTypes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetGenerateKnownTypes(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToSwaggerSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings EnableGenerateKnownTypes(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToSwaggerSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings DisableGenerateKnownTypes(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToSwaggerSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ToggleGenerateKnownTypes(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = !toolSettings.GenerateKnownTypes;
            return toolSettings;
        }
        #endregion
        #region GenerateXmlObjects
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetGenerateXmlObjects(this NSwagWebApiToSwaggerSettings toolSettings, bool? generateXmlObjects)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = generateXmlObjects;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetGenerateXmlObjects(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToSwaggerSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings EnableGenerateXmlObjects(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToSwaggerSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings DisableGenerateXmlObjects(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToSwaggerSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ToggleGenerateXmlObjects(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = !toolSettings.GenerateXmlObjects;
            return toolSettings;
        }
        #endregion
        #region IgnoreObsoleteProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetIgnoreObsoleteProperties(this NSwagWebApiToSwaggerSettings toolSettings, bool? ignoreObsoleteProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = ignoreObsoleteProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetIgnoreObsoleteProperties(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings EnableIgnoreObsoleteProperties(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings DisableIgnoreObsoleteProperties(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToSwaggerSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ToggleIgnoreObsoleteProperties(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = !toolSettings.IgnoreObsoleteProperties;
            return toolSettings;
        }
        #endregion
        #region InfoDescription
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.InfoDescription"/></em></p>
        ///   <p>Specify the description of the Swagger specification (ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetInfoDescription(this NSwagWebApiToSwaggerSettings toolSettings, string infoDescription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoDescription = infoDescription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.InfoDescription"/></em></p>
        ///   <p>Specify the description of the Swagger specification (ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetInfoDescription(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoDescription = null;
            return toolSettings;
        }
        #endregion
        #region InfoTitle
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.InfoTitle"/></em></p>
        ///   <p>Specify the title of the Swagger specification (ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetInfoTitle(this NSwagWebApiToSwaggerSettings toolSettings, string infoTitle)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoTitle = infoTitle;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.InfoTitle"/></em></p>
        ///   <p>Specify the title of the Swagger specification (ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetInfoTitle(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoTitle = null;
            return toolSettings;
        }
        #endregion
        #region InfoVersion
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.InfoVersion"/></em></p>
        ///   <p>Specify the version of the Swagger specification (default: 1.0.0, ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetInfoVersion(this NSwagWebApiToSwaggerSettings toolSettings, string infoVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoVersion = infoVersion;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.InfoVersion"/></em></p>
        ///   <p>Specify the version of the Swagger specification (default: 1.0.0, ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetInfoVersion(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoVersion = null;
            return toolSettings;
        }
        #endregion
        #region OperationProcessors
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/> to a new list</em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetOperationProcessors(this NSwagWebApiToSwaggerSettings toolSettings, params string[] operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal = operationProcessors.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/> to a new list</em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetOperationProcessors(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal = operationProcessors.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings AddOperationProcessors(this NSwagWebApiToSwaggerSettings toolSettings, params string[] operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal.AddRange(operationProcessors);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings AddOperationProcessors(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal.AddRange(operationProcessors);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ClearOperationProcessors(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings RemoveOperationProcessors(this NSwagWebApiToSwaggerSettings toolSettings, params string[] operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(operationProcessors);
            toolSettings.OperationProcessorsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToSwaggerSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings RemoveOperationProcessors(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(operationProcessors);
            toolSettings.OperationProcessorsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region SchemaNameGenerator
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.SchemaNameGenerator"/></em></p>
        ///   <p>The custom ISchemaNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetSchemaNameGenerator(this NSwagWebApiToSwaggerSettings toolSettings, string schemaNameGenerator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SchemaNameGenerator = schemaNameGenerator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.SchemaNameGenerator"/></em></p>
        ///   <p>The custom ISchemaNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetSchemaNameGenerator(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SchemaNameGenerator = null;
            return toolSettings;
        }
        #endregion
        #region SerializerSettings
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.SerializerSettings"/></em></p>
        ///   <p>The custom JsonSerializerSettings implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetSerializerSettings(this NSwagWebApiToSwaggerSettings toolSettings, string serializerSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SerializerSettings = serializerSettings;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.SerializerSettings"/></em></p>
        ///   <p>The custom JsonSerializerSettings implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetSerializerSettings(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SerializerSettings = null;
            return toolSettings;
        }
        #endregion
        #region ServiceBasePath
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.ServiceBasePath"/></em></p>
        ///   <p>The basePath of the Swagger specification (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetServiceBasePath(this NSwagWebApiToSwaggerSettings toolSettings, string serviceBasePath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceBasePath = serviceBasePath;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.ServiceBasePath"/></em></p>
        ///   <p>The basePath of the Swagger specification (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetServiceBasePath(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceBasePath = null;
            return toolSettings;
        }
        #endregion
        #region ServiceHost
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web service (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetServiceHost(this NSwagWebApiToSwaggerSettings toolSettings, string serviceHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = serviceHost;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web service (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetServiceHost(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = null;
            return toolSettings;
        }
        #endregion
        #region ServiceSchemes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetServiceSchemes(this NSwagWebApiToSwaggerSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetServiceSchemes(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings AddServiceSchemes(this NSwagWebApiToSwaggerSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings AddServiceSchemes(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ClearServiceSchemes(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings RemoveServiceSchemes(this NSwagWebApiToSwaggerSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToSwaggerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings RemoveServiceSchemes(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Startup
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.Startup"/></em></p>
        ///   <p>The Startup class type in the form 'assemblyName:fullTypeName' or 'fullTypeName'.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetStartup(this NSwagWebApiToSwaggerSettings toolSettings, string startup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Startup = startup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.Startup"/></em></p>
        ///   <p>The Startup class type in the form 'assemblyName:fullTypeName' or 'fullTypeName'.</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetStartup(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Startup = null;
            return toolSettings;
        }
        #endregion
        #region TypeNameGenerator
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetTypeNameGenerator(this NSwagWebApiToSwaggerSettings toolSettings, string typeNameGenerator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = typeNameGenerator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetTypeNameGenerator(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = null;
            return toolSettings;
        }
        #endregion
        #region UseDocumentProvider
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetUseDocumentProvider(this NSwagWebApiToSwaggerSettings toolSettings, bool? useDocumentProvider)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = useDocumentProvider;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetUseDocumentProvider(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToSwaggerSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings EnableUseDocumentProvider(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToSwaggerSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings DisableUseDocumentProvider(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToSwaggerSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ToggleUseDocumentProvider(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = !toolSettings.UseDocumentProvider;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetOutput(this NSwagWebApiToSwaggerSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetOutput(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region OutputType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.OutputType"/></em></p>
        ///   <p>Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetOutputType(this NSwagWebApiToSwaggerSettings toolSettings, SchemaType outputType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputType = outputType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.OutputType"/></em></p>
        ///   <p>Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetOutputType(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputType = null;
            return toolSettings;
        }
        #endregion
        #region Assembly
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.Assembly"/> to a new list</em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetAssembly(this NSwagWebApiToSwaggerSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal = assembly.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.Assembly"/> to a new list</em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetAssembly(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal = assembly.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToSwaggerSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings AddAssembly(this NSwagWebApiToSwaggerSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.AddRange(assembly);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToSwaggerSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings AddAssembly(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.AddRange(assembly);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagWebApiToSwaggerSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ClearAssembly(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToSwaggerSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings RemoveAssembly(this NSwagWebApiToSwaggerSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(assembly);
            toolSettings.AssemblyInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToSwaggerSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings RemoveAssembly(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(assembly);
            toolSettings.AssemblyInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AssemblyConfig
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.AssemblyConfig"/></em></p>
        ///   <p>The path to the assembly App.config or Web.config (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetAssemblyConfig(this NSwagWebApiToSwaggerSettings toolSettings, string assemblyConfig)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyConfig = assemblyConfig;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.AssemblyConfig"/></em></p>
        ///   <p>The path to the assembly App.config or Web.config (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetAssemblyConfig(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyConfig = null;
            return toolSettings;
        }
        #endregion
        #region ReferencePaths
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/> to a new list</em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetReferencePaths(this NSwagWebApiToSwaggerSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal = referencePaths.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/> to a new list</em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetReferencePaths(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal = referencePaths.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings AddReferencePaths(this NSwagWebApiToSwaggerSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.AddRange(referencePaths);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings AddReferencePaths(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.AddRange(referencePaths);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ClearReferencePaths(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings RemoveReferencePaths(this NSwagWebApiToSwaggerSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(referencePaths);
            toolSettings.ReferencePathsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagWebApiToSwaggerSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings RemoveReferencePaths(this NSwagWebApiToSwaggerSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(referencePaths);
            toolSettings.ReferencePathsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region UseNuGetCache
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagWebApiToSwaggerSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings SetUseNuGetCache(this NSwagWebApiToSwaggerSettings toolSettings, bool? useNuGetCache)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = useNuGetCache;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagWebApiToSwaggerSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ResetUseNuGetCache(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagWebApiToSwaggerSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings EnableUseNuGetCache(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagWebApiToSwaggerSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings DisableUseNuGetCache(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagWebApiToSwaggerSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagWebApiToSwaggerSettings ToggleUseNuGetCache(this NSwagWebApiToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = !toolSettings.UseNuGetCache;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region NSwagAspNetCoreToOpenApiSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagAspNetCoreToOpenApiSettingsExtensions
    {
        #region AllowNullableBodyParameters
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetAllowNullableBodyParameters(this NSwagAspNetCoreToOpenApiSettings toolSettings, bool? allowNullableBodyParameters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = allowNullableBodyParameters;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetAllowNullableBodyParameters(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings EnableAllowNullableBodyParameters(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings DisableAllowNullableBodyParameters(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToOpenApiSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ToggleAllowNullableBodyParameters(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = !toolSettings.AllowNullableBodyParameters;
            return toolSettings;
        }
        #endregion
        #region AllowReferencesWithProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetAllowReferencesWithProperties(this NSwagAspNetCoreToOpenApiSettings toolSettings, bool? allowReferencesWithProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = allowReferencesWithProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetAllowReferencesWithProperties(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings EnableAllowReferencesWithProperties(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings DisableAllowReferencesWithProperties(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToOpenApiSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ToggleAllowReferencesWithProperties(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = !toolSettings.AllowReferencesWithProperties;
            return toolSettings;
        }
        #endregion
        #region AspNetCoreEnvironment
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.AspNetCoreEnvironment"/></em></p>
        ///   <p>Sets the ASPNETCORE_ENVIRONMENT if provided (default: empty).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetAspNetCoreEnvironment(this NSwagAspNetCoreToOpenApiSettings toolSettings, string aspNetCoreEnvironment)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AspNetCoreEnvironment = aspNetCoreEnvironment;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.AspNetCoreEnvironment"/></em></p>
        ///   <p>Sets the ASPNETCORE_ENVIRONMENT if provided (default: empty).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetAspNetCoreEnvironment(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AspNetCoreEnvironment = null;
            return toolSettings;
        }
        #endregion
        #region ContractResolver
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.ContractResolver"/></em></p>
        ///   <p>DEPRECATED: The custom IContractResolver implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetContractResolver(this NSwagAspNetCoreToOpenApiSettings toolSettings, string contractResolver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContractResolver = contractResolver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.ContractResolver"/></em></p>
        ///   <p>DEPRECATED: The custom IContractResolver implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetContractResolver(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContractResolver = null;
            return toolSettings;
        }
        #endregion
        #region CreateWebHostBuilderMethod
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.CreateWebHostBuilderMethod"/></em></p>
        ///   <p>The CreateWebHostBuilder method in the form 'assemblyName:fullTypeName.methodName' or 'fullTypeName.methodName'.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetCreateWebHostBuilderMethod(this NSwagAspNetCoreToOpenApiSettings toolSettings, string createWebHostBuilderMethod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CreateWebHostBuilderMethod = createWebHostBuilderMethod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.CreateWebHostBuilderMethod"/></em></p>
        ///   <p>The CreateWebHostBuilder method in the form 'assemblyName:fullTypeName.methodName' or 'fullTypeName.methodName'.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetCreateWebHostBuilderMethod(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CreateWebHostBuilderMethod = null;
            return toolSettings;
        }
        #endregion
        #region DefaultDictionaryValueReferenceTypeNullHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling of dictionary value types (NotNull (default) or Null).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetDefaultDictionaryValueReferenceTypeNullHandling(this NSwagAspNetCoreToOpenApiSettings toolSettings, ReferenceTypeNullHandling defaultDictionaryValueReferenceTypeNullHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultDictionaryValueReferenceTypeNullHandling = defaultDictionaryValueReferenceTypeNullHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling of dictionary value types (NotNull (default) or Null).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetDefaultDictionaryValueReferenceTypeNullHandling(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultDictionaryValueReferenceTypeNullHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultEnumHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultEnumHandling"/></em></p>
        ///   <p>The default enum handling ('String' or 'Integer'), default: Integer.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetDefaultEnumHandling(this NSwagAspNetCoreToOpenApiSettings toolSettings, EnumHandling defaultEnumHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultEnumHandling = defaultEnumHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultEnumHandling"/></em></p>
        ///   <p>The default enum handling ('String' or 'Integer'), default: Integer.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetDefaultEnumHandling(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultEnumHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultPropertyNameHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultPropertyNameHandling"/></em></p>
        ///   <p>The default property name handling ('Default' or 'CamelCase').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetDefaultPropertyNameHandling(this NSwagAspNetCoreToOpenApiSettings toolSettings, PropertyNameHandling defaultPropertyNameHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultPropertyNameHandling = defaultPropertyNameHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultPropertyNameHandling"/></em></p>
        ///   <p>The default property name handling ('Default' or 'CamelCase').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetDefaultPropertyNameHandling(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultPropertyNameHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultReferenceTypeNullHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling (Null (default) or NotNull).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetDefaultReferenceTypeNullHandling(this NSwagAspNetCoreToOpenApiSettings toolSettings, ReferenceTypeNullHandling defaultReferenceTypeNullHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultReferenceTypeNullHandling = defaultReferenceTypeNullHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling (Null (default) or NotNull).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetDefaultReferenceTypeNullHandling(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultReferenceTypeNullHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultResponseReferenceTypeNullHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/></em></p>
        ///   <p>The default response reference type null handling (default: NotNull (default) or Null).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetDefaultResponseReferenceTypeNullHandling(this NSwagAspNetCoreToOpenApiSettings toolSettings, ReferenceTypeNullHandling defaultResponseReferenceTypeNullHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultResponseReferenceTypeNullHandling = defaultResponseReferenceTypeNullHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.DefaultResponseReferenceTypeNullHandling"/></em></p>
        ///   <p>The default response reference type null handling (default: NotNull (default) or Null).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetDefaultResponseReferenceTypeNullHandling(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultResponseReferenceTypeNullHandling = null;
            return toolSettings;
        }
        #endregion
        #region DocumentName
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentName"/></em></p>
        ///   <p>The document name to use in SwaggerDocumentProvider (default: v1).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetDocumentName(this NSwagAspNetCoreToOpenApiSettings toolSettings, string documentName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentName = documentName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentName"/></em></p>
        ///   <p>The document name to use in SwaggerDocumentProvider (default: v1).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetDocumentName(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentName = null;
            return toolSettings;
        }
        #endregion
        #region DocumentProcessors
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/> to a new list</em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetDocumentProcessors(this NSwagAspNetCoreToOpenApiSettings toolSettings, params string[] documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal = documentProcessors.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/> to a new list</em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetDocumentProcessors(this NSwagAspNetCoreToOpenApiSettings toolSettings, IEnumerable<string> documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal = documentProcessors.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings AddDocumentProcessors(this NSwagAspNetCoreToOpenApiSettings toolSettings, params string[] documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal.AddRange(documentProcessors);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings AddDocumentProcessors(this NSwagAspNetCoreToOpenApiSettings toolSettings, IEnumerable<string> documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal.AddRange(documentProcessors);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ClearDocumentProcessors(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings RemoveDocumentProcessors(this NSwagAspNetCoreToOpenApiSettings toolSettings, params string[] documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(documentProcessors);
            toolSettings.DocumentProcessorsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings RemoveDocumentProcessors(this NSwagAspNetCoreToOpenApiSettings toolSettings, IEnumerable<string> documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(documentProcessors);
            toolSettings.DocumentProcessorsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DocumentTemplate
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentTemplate"/></em></p>
        ///   <p>Specifies the Swagger document template (may be a path or JSON, default: none).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetDocumentTemplate(this NSwagAspNetCoreToOpenApiSettings toolSettings, string documentTemplate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentTemplate = documentTemplate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.DocumentTemplate"/></em></p>
        ///   <p>Specifies the Swagger document template (may be a path or JSON, default: none).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetDocumentTemplate(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentTemplate = null;
            return toolSettings;
        }
        #endregion
        #region ExcludedTypeNames
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/> to a new list</em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetExcludedTypeNames(this NSwagAspNetCoreToOpenApiSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal = excludedTypeNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/> to a new list</em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetExcludedTypeNames(this NSwagAspNetCoreToOpenApiSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal = excludedTypeNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings AddExcludedTypeNames(this NSwagAspNetCoreToOpenApiSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.AddRange(excludedTypeNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings AddExcludedTypeNames(this NSwagAspNetCoreToOpenApiSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.AddRange(excludedTypeNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ClearExcludedTypeNames(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings RemoveExcludedTypeNames(this NSwagAspNetCoreToOpenApiSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedTypeNames);
            toolSettings.ExcludedTypeNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToOpenApiSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings RemoveExcludedTypeNames(this NSwagAspNetCoreToOpenApiSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedTypeNames);
            toolSettings.ExcludedTypeNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region FlattenInheritanceHierarchy
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetFlattenInheritanceHierarchy(this NSwagAspNetCoreToOpenApiSettings toolSettings, bool? flattenInheritanceHierarchy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = flattenInheritanceHierarchy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetFlattenInheritanceHierarchy(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings EnableFlattenInheritanceHierarchy(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings DisableFlattenInheritanceHierarchy(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToOpenApiSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ToggleFlattenInheritanceHierarchy(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = !toolSettings.FlattenInheritanceHierarchy;
            return toolSettings;
        }
        #endregion
        #region GenerateAbstractProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetGenerateAbstractProperties(this NSwagAspNetCoreToOpenApiSettings toolSettings, bool? generateAbstractProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = generateAbstractProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetGenerateAbstractProperties(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings EnableGenerateAbstractProperties(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings DisableGenerateAbstractProperties(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ToggleGenerateAbstractProperties(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = !toolSettings.GenerateAbstractProperties;
            return toolSettings;
        }
        #endregion
        #region GenerateAbstractSchemas
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetGenerateAbstractSchemas(this NSwagAspNetCoreToOpenApiSettings toolSettings, bool? generateAbstractSchemas)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = generateAbstractSchemas;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetGenerateAbstractSchemas(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings EnableGenerateAbstractSchemas(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings DisableGenerateAbstractSchemas(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ToggleGenerateAbstractSchemas(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = !toolSettings.GenerateAbstractSchemas;
            return toolSettings;
        }
        #endregion
        #region GenerateEnumMappingDescription
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetGenerateEnumMappingDescription(this NSwagAspNetCoreToOpenApiSettings toolSettings, bool? generateEnumMappingDescription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = generateEnumMappingDescription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetGenerateEnumMappingDescription(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings EnableGenerateEnumMappingDescription(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings DisableGenerateEnumMappingDescription(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ToggleGenerateEnumMappingDescription(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = !toolSettings.GenerateEnumMappingDescription;
            return toolSettings;
        }
        #endregion
        #region GenerateKnownTypes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetGenerateKnownTypes(this NSwagAspNetCoreToOpenApiSettings toolSettings, bool? generateKnownTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = generateKnownTypes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetGenerateKnownTypes(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings EnableGenerateKnownTypes(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings DisableGenerateKnownTypes(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ToggleGenerateKnownTypes(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = !toolSettings.GenerateKnownTypes;
            return toolSettings;
        }
        #endregion
        #region GenerateXmlObjects
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetGenerateXmlObjects(this NSwagAspNetCoreToOpenApiSettings toolSettings, bool? generateXmlObjects)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = generateXmlObjects;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetGenerateXmlObjects(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings EnableGenerateXmlObjects(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings DisableGenerateXmlObjects(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToOpenApiSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ToggleGenerateXmlObjects(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = !toolSettings.GenerateXmlObjects;
            return toolSettings;
        }
        #endregion
        #region IgnoreObsoleteProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetIgnoreObsoleteProperties(this NSwagAspNetCoreToOpenApiSettings toolSettings, bool? ignoreObsoleteProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = ignoreObsoleteProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetIgnoreObsoleteProperties(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings EnableIgnoreObsoleteProperties(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings DisableIgnoreObsoleteProperties(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToOpenApiSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ToggleIgnoreObsoleteProperties(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = !toolSettings.IgnoreObsoleteProperties;
            return toolSettings;
        }
        #endregion
        #region InfoDescription
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.InfoDescription"/></em></p>
        ///   <p>Specify the description of the Swagger specification (ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetInfoDescription(this NSwagAspNetCoreToOpenApiSettings toolSettings, string infoDescription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoDescription = infoDescription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.InfoDescription"/></em></p>
        ///   <p>Specify the description of the Swagger specification (ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetInfoDescription(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoDescription = null;
            return toolSettings;
        }
        #endregion
        #region InfoTitle
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.InfoTitle"/></em></p>
        ///   <p>Specify the title of the Swagger specification (ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetInfoTitle(this NSwagAspNetCoreToOpenApiSettings toolSettings, string infoTitle)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoTitle = infoTitle;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.InfoTitle"/></em></p>
        ///   <p>Specify the title of the Swagger specification (ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetInfoTitle(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoTitle = null;
            return toolSettings;
        }
        #endregion
        #region InfoVersion
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.InfoVersion"/></em></p>
        ///   <p>Specify the version of the Swagger specification (default: 1.0.0, ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetInfoVersion(this NSwagAspNetCoreToOpenApiSettings toolSettings, string infoVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoVersion = infoVersion;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.InfoVersion"/></em></p>
        ///   <p>Specify the version of the Swagger specification (default: 1.0.0, ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetInfoVersion(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoVersion = null;
            return toolSettings;
        }
        #endregion
        #region OperationProcessors
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/> to a new list</em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetOperationProcessors(this NSwagAspNetCoreToOpenApiSettings toolSettings, params string[] operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal = operationProcessors.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/> to a new list</em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetOperationProcessors(this NSwagAspNetCoreToOpenApiSettings toolSettings, IEnumerable<string> operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal = operationProcessors.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings AddOperationProcessors(this NSwagAspNetCoreToOpenApiSettings toolSettings, params string[] operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal.AddRange(operationProcessors);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings AddOperationProcessors(this NSwagAspNetCoreToOpenApiSettings toolSettings, IEnumerable<string> operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal.AddRange(operationProcessors);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ClearOperationProcessors(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings RemoveOperationProcessors(this NSwagAspNetCoreToOpenApiSettings toolSettings, params string[] operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(operationProcessors);
            toolSettings.OperationProcessorsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToOpenApiSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings RemoveOperationProcessors(this NSwagAspNetCoreToOpenApiSettings toolSettings, IEnumerable<string> operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(operationProcessors);
            toolSettings.OperationProcessorsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region SchemaNameGenerator
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.SchemaNameGenerator"/></em></p>
        ///   <p>The custom ISchemaNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetSchemaNameGenerator(this NSwagAspNetCoreToOpenApiSettings toolSettings, string schemaNameGenerator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SchemaNameGenerator = schemaNameGenerator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.SchemaNameGenerator"/></em></p>
        ///   <p>The custom ISchemaNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetSchemaNameGenerator(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SchemaNameGenerator = null;
            return toolSettings;
        }
        #endregion
        #region SerializerSettings
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.SerializerSettings"/></em></p>
        ///   <p>The custom JsonSerializerSettings implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetSerializerSettings(this NSwagAspNetCoreToOpenApiSettings toolSettings, string serializerSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SerializerSettings = serializerSettings;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.SerializerSettings"/></em></p>
        ///   <p>The custom JsonSerializerSettings implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetSerializerSettings(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SerializerSettings = null;
            return toolSettings;
        }
        #endregion
        #region ServiceBasePath
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceBasePath"/></em></p>
        ///   <p>The basePath of the Swagger specification (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetServiceBasePath(this NSwagAspNetCoreToOpenApiSettings toolSettings, string serviceBasePath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceBasePath = serviceBasePath;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceBasePath"/></em></p>
        ///   <p>The basePath of the Swagger specification (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetServiceBasePath(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceBasePath = null;
            return toolSettings;
        }
        #endregion
        #region ServiceHost
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web service (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetServiceHost(this NSwagAspNetCoreToOpenApiSettings toolSettings, string serviceHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = serviceHost;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web service (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetServiceHost(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = null;
            return toolSettings;
        }
        #endregion
        #region ServiceSchemes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetServiceSchemes(this NSwagAspNetCoreToOpenApiSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetServiceSchemes(this NSwagAspNetCoreToOpenApiSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings AddServiceSchemes(this NSwagAspNetCoreToOpenApiSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings AddServiceSchemes(this NSwagAspNetCoreToOpenApiSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ClearServiceSchemes(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings RemoveServiceSchemes(this NSwagAspNetCoreToOpenApiSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToOpenApiSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings RemoveServiceSchemes(this NSwagAspNetCoreToOpenApiSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Startup
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.Startup"/></em></p>
        ///   <p>The Startup class type in the form 'assemblyName:fullTypeName' or 'fullTypeName'.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetStartup(this NSwagAspNetCoreToOpenApiSettings toolSettings, string startup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Startup = startup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.Startup"/></em></p>
        ///   <p>The Startup class type in the form 'assemblyName:fullTypeName' or 'fullTypeName'.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetStartup(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Startup = null;
            return toolSettings;
        }
        #endregion
        #region TypeNameGenerator
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetTypeNameGenerator(this NSwagAspNetCoreToOpenApiSettings toolSettings, string typeNameGenerator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = typeNameGenerator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetTypeNameGenerator(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = null;
            return toolSettings;
        }
        #endregion
        #region UseDocumentProvider
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetUseDocumentProvider(this NSwagAspNetCoreToOpenApiSettings toolSettings, bool? useDocumentProvider)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = useDocumentProvider;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetUseDocumentProvider(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings EnableUseDocumentProvider(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings DisableUseDocumentProvider(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToOpenApiSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ToggleUseDocumentProvider(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = !toolSettings.UseDocumentProvider;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetOutput(this NSwagAspNetCoreToOpenApiSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetOutput(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region OutputType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.OutputType"/></em></p>
        ///   <p>Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetOutputType(this NSwagAspNetCoreToOpenApiSettings toolSettings, SchemaType outputType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputType = outputType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.OutputType"/></em></p>
        ///   <p>Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetOutputType(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputType = null;
            return toolSettings;
        }
        #endregion
        #region Assembly
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/> to a new list</em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetAssembly(this NSwagAspNetCoreToOpenApiSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal = assembly.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/> to a new list</em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetAssembly(this NSwagAspNetCoreToOpenApiSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal = assembly.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings AddAssembly(this NSwagAspNetCoreToOpenApiSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.AddRange(assembly);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings AddAssembly(this NSwagAspNetCoreToOpenApiSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.AddRange(assembly);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ClearAssembly(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings RemoveAssembly(this NSwagAspNetCoreToOpenApiSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(assembly);
            toolSettings.AssemblyInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToOpenApiSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings RemoveAssembly(this NSwagAspNetCoreToOpenApiSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(assembly);
            toolSettings.AssemblyInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AssemblyConfig
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.AssemblyConfig"/></em></p>
        ///   <p>The path to the assembly App.config or Web.config (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetAssemblyConfig(this NSwagAspNetCoreToOpenApiSettings toolSettings, string assemblyConfig)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyConfig = assemblyConfig;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.AssemblyConfig"/></em></p>
        ///   <p>The path to the assembly App.config or Web.config (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetAssemblyConfig(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyConfig = null;
            return toolSettings;
        }
        #endregion
        #region ReferencePaths
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/> to a new list</em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetReferencePaths(this NSwagAspNetCoreToOpenApiSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal = referencePaths.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/> to a new list</em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetReferencePaths(this NSwagAspNetCoreToOpenApiSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal = referencePaths.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings AddReferencePaths(this NSwagAspNetCoreToOpenApiSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.AddRange(referencePaths);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings AddReferencePaths(this NSwagAspNetCoreToOpenApiSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.AddRange(referencePaths);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ClearReferencePaths(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings RemoveReferencePaths(this NSwagAspNetCoreToOpenApiSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(referencePaths);
            toolSettings.ReferencePathsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToOpenApiSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings RemoveReferencePaths(this NSwagAspNetCoreToOpenApiSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(referencePaths);
            toolSettings.ReferencePathsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region UseNuGetCache
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToOpenApiSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings SetUseNuGetCache(this NSwagAspNetCoreToOpenApiSettings toolSettings, bool? useNuGetCache)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = useNuGetCache;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToOpenApiSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ResetUseNuGetCache(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToOpenApiSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings EnableUseNuGetCache(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToOpenApiSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings DisableUseNuGetCache(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToOpenApiSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToOpenApiSettings ToggleUseNuGetCache(this NSwagAspNetCoreToOpenApiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = !toolSettings.UseNuGetCache;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region NSwagAspNetCoreToSwaggerSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagAspNetCoreToSwaggerSettingsExtensions
    {
        #region ApiGroupNames
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/> to a new list</em></p>
        ///   <p>The ASP.NET Core API Explorer group names to include (comma separated, default: empty = all).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetApiGroupNames(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] apiGroupNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApiGroupNamesInternal = apiGroupNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/> to a new list</em></p>
        ///   <p>The ASP.NET Core API Explorer group names to include (comma separated, default: empty = all).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetApiGroupNames(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> apiGroupNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApiGroupNamesInternal = apiGroupNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/></em></p>
        ///   <p>The ASP.NET Core API Explorer group names to include (comma separated, default: empty = all).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings AddApiGroupNames(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] apiGroupNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApiGroupNamesInternal.AddRange(apiGroupNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/></em></p>
        ///   <p>The ASP.NET Core API Explorer group names to include (comma separated, default: empty = all).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings AddApiGroupNames(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> apiGroupNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApiGroupNamesInternal.AddRange(apiGroupNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/></em></p>
        ///   <p>The ASP.NET Core API Explorer group names to include (comma separated, default: empty = all).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ClearApiGroupNames(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ApiGroupNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/></em></p>
        ///   <p>The ASP.NET Core API Explorer group names to include (comma separated, default: empty = all).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings RemoveApiGroupNames(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] apiGroupNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(apiGroupNames);
            toolSettings.ApiGroupNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToSwaggerSettings.ApiGroupNames"/></em></p>
        ///   <p>The ASP.NET Core API Explorer group names to include (comma separated, default: empty = all).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings RemoveApiGroupNames(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> apiGroupNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(apiGroupNames);
            toolSettings.ApiGroupNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Configuration
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.Configuration"/></em></p>
        ///   <p>The configuration to use.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetConfiguration(this NSwagAspNetCoreToSwaggerSettings toolSettings, string configuration)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Configuration = configuration;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.Configuration"/></em></p>
        ///   <p>The configuration to use.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetConfiguration(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Configuration = null;
            return toolSettings;
        }
        #endregion
        #region MSBuildProjectExtensionsPath
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.MSBuildProjectExtensionsPath"/></em></p>
        ///   <p>The MSBuild project extensions path. Defaults to "obj".</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetMSBuildProjectExtensionsPath(this NSwagAspNetCoreToSwaggerSettings toolSettings, string msbuildProjectExtensionsPath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MSBuildProjectExtensionsPath = msbuildProjectExtensionsPath;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.MSBuildProjectExtensionsPath"/></em></p>
        ///   <p>The MSBuild project extensions path. Defaults to "obj".</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetMSBuildProjectExtensionsPath(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MSBuildProjectExtensionsPath = null;
            return toolSettings;
        }
        #endregion
        #region NoBuild
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.NoBuild"/></em></p>
        ///   <p>Don't build the project. Only use this when the build is up-to-date.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetNoBuild(this NSwagAspNetCoreToSwaggerSettings toolSettings, bool? noBuild)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoBuild = noBuild;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.NoBuild"/></em></p>
        ///   <p>Don't build the project. Only use this when the build is up-to-date.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetNoBuild(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoBuild = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToSwaggerSettings.NoBuild"/></em></p>
        ///   <p>Don't build the project. Only use this when the build is up-to-date.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings EnableNoBuild(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoBuild = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToSwaggerSettings.NoBuild"/></em></p>
        ///   <p>Don't build the project. Only use this when the build is up-to-date.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings DisableNoBuild(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoBuild = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToSwaggerSettings.NoBuild"/></em></p>
        ///   <p>Don't build the project. Only use this when the build is up-to-date.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ToggleNoBuild(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoBuild = !toolSettings.NoBuild;
            return toolSettings;
        }
        #endregion
        #region NSwagWorkingDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.NSwagWorkingDirectory"/></em></p>
        ///   <p>The working directory to use.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetNSwagWorkingDirectory(this NSwagAspNetCoreToSwaggerSettings toolSettings, string nswagWorkingDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NSwagWorkingDirectory = nswagWorkingDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.NSwagWorkingDirectory"/></em></p>
        ///   <p>The working directory to use.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetNSwagWorkingDirectory(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NSwagWorkingDirectory = null;
            return toolSettings;
        }
        #endregion
        #region Project
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.Project"/></em></p>
        ///   <p>The project to use.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetProject(this NSwagAspNetCoreToSwaggerSettings toolSettings, string project)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = project;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.Project"/></em></p>
        ///   <p>The project to use.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetProject(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Project = null;
            return toolSettings;
        }
        #endregion
        #region RequireParametersWithoutDefault
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault"/></em></p>
        ///   <p>Parameters without default value are always required(i.e. api explorer info and only optional when default is set, legacy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetRequireParametersWithoutDefault(this NSwagAspNetCoreToSwaggerSettings toolSettings, bool? requireParametersWithoutDefault)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequireParametersWithoutDefault = requireParametersWithoutDefault;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault"/></em></p>
        ///   <p>Parameters without default value are always required(i.e. api explorer info and only optional when default is set, legacy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetRequireParametersWithoutDefault(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequireParametersWithoutDefault = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault"/></em></p>
        ///   <p>Parameters without default value are always required(i.e. api explorer info and only optional when default is set, legacy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings EnableRequireParametersWithoutDefault(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequireParametersWithoutDefault = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault"/></em></p>
        ///   <p>Parameters without default value are always required(i.e. api explorer info and only optional when default is set, legacy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings DisableRequireParametersWithoutDefault(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequireParametersWithoutDefault = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToSwaggerSettings.RequireParametersWithoutDefault"/></em></p>
        ///   <p>Parameters without default value are always required(i.e. api explorer info and only optional when default is set, legacy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ToggleRequireParametersWithoutDefault(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequireParametersWithoutDefault = !toolSettings.RequireParametersWithoutDefault;
            return toolSettings;
        }
        #endregion
        #region Runtime
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.Runtime"/></em></p>
        ///   <p>The runtime to use.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetRuntime(this NSwagAspNetCoreToSwaggerSettings toolSettings, string runtime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Runtime = runtime;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.Runtime"/></em></p>
        ///   <p>The runtime to use.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetRuntime(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Runtime = null;
            return toolSettings;
        }
        #endregion
        #region TargetFramework
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.TargetFramework"/></em></p>
        ///   <p>The target framework to use.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetTargetFramework(this NSwagAspNetCoreToSwaggerSettings toolSettings, string targetFramework)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetFramework = targetFramework;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.TargetFramework"/></em></p>
        ///   <p>The target framework to use.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetTargetFramework(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetFramework = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.Verbose"/></em></p>
        ///   <p>Print verbose output.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetVerbose(this NSwagAspNetCoreToSwaggerSettings toolSettings, bool? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.Verbose"/></em></p>
        ///   <p>Print verbose output.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetVerbose(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToSwaggerSettings.Verbose"/></em></p>
        ///   <p>Print verbose output.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings EnableVerbose(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToSwaggerSettings.Verbose"/></em></p>
        ///   <p>Print verbose output.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings DisableVerbose(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToSwaggerSettings.Verbose"/></em></p>
        ///   <p>Print verbose output.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ToggleVerbose(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = !toolSettings.Verbose;
            return toolSettings;
        }
        #endregion
        #region AllowNullableBodyParameters
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetAllowNullableBodyParameters(this NSwagAspNetCoreToSwaggerSettings toolSettings, bool? allowNullableBodyParameters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = allowNullableBodyParameters;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetAllowNullableBodyParameters(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings EnableAllowNullableBodyParameters(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings DisableAllowNullableBodyParameters(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToSwaggerSettings.AllowNullableBodyParameters"/></em></p>
        ///   <p>Nullable body parameters are allowed (ignored when MvcOptions.AllowEmptyInputInBodyModelBinding is available (ASP.NET Core 2.0+), default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ToggleAllowNullableBodyParameters(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowNullableBodyParameters = !toolSettings.AllowNullableBodyParameters;
            return toolSettings;
        }
        #endregion
        #region AllowReferencesWithProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetAllowReferencesWithProperties(this NSwagAspNetCoreToSwaggerSettings toolSettings, bool? allowReferencesWithProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = allowReferencesWithProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetAllowReferencesWithProperties(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings EnableAllowReferencesWithProperties(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings DisableAllowReferencesWithProperties(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToSwaggerSettings.AllowReferencesWithProperties"/></em></p>
        ///   <p>Use $ref references even if additional properties are defined on the object (otherwise allOf/oneOf with $ref is used, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ToggleAllowReferencesWithProperties(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllowReferencesWithProperties = !toolSettings.AllowReferencesWithProperties;
            return toolSettings;
        }
        #endregion
        #region AspNetCoreEnvironment
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.AspNetCoreEnvironment"/></em></p>
        ///   <p>Sets the ASPNETCORE_ENVIRONMENT if provided (default: empty).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetAspNetCoreEnvironment(this NSwagAspNetCoreToSwaggerSettings toolSettings, string aspNetCoreEnvironment)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AspNetCoreEnvironment = aspNetCoreEnvironment;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.AspNetCoreEnvironment"/></em></p>
        ///   <p>Sets the ASPNETCORE_ENVIRONMENT if provided (default: empty).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetAspNetCoreEnvironment(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AspNetCoreEnvironment = null;
            return toolSettings;
        }
        #endregion
        #region ContractResolver
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.ContractResolver"/></em></p>
        ///   <p>DEPRECATED: The custom IContractResolver implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetContractResolver(this NSwagAspNetCoreToSwaggerSettings toolSettings, string contractResolver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContractResolver = contractResolver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.ContractResolver"/></em></p>
        ///   <p>DEPRECATED: The custom IContractResolver implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetContractResolver(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContractResolver = null;
            return toolSettings;
        }
        #endregion
        #region CreateWebHostBuilderMethod
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.CreateWebHostBuilderMethod"/></em></p>
        ///   <p>The CreateWebHostBuilder method in the form 'assemblyName:fullTypeName.methodName' or 'fullTypeName.methodName'.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetCreateWebHostBuilderMethod(this NSwagAspNetCoreToSwaggerSettings toolSettings, string createWebHostBuilderMethod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CreateWebHostBuilderMethod = createWebHostBuilderMethod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.CreateWebHostBuilderMethod"/></em></p>
        ///   <p>The CreateWebHostBuilder method in the form 'assemblyName:fullTypeName.methodName' or 'fullTypeName.methodName'.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetCreateWebHostBuilderMethod(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CreateWebHostBuilderMethod = null;
            return toolSettings;
        }
        #endregion
        #region DefaultDictionaryValueReferenceTypeNullHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling of dictionary value types (NotNull (default) or Null).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetDefaultDictionaryValueReferenceTypeNullHandling(this NSwagAspNetCoreToSwaggerSettings toolSettings, ReferenceTypeNullHandling defaultDictionaryValueReferenceTypeNullHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultDictionaryValueReferenceTypeNullHandling = defaultDictionaryValueReferenceTypeNullHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultDictionaryValueReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling of dictionary value types (NotNull (default) or Null).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetDefaultDictionaryValueReferenceTypeNullHandling(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultDictionaryValueReferenceTypeNullHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultEnumHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultEnumHandling"/></em></p>
        ///   <p>The default enum handling ('String' or 'Integer'), default: Integer.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetDefaultEnumHandling(this NSwagAspNetCoreToSwaggerSettings toolSettings, EnumHandling defaultEnumHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultEnumHandling = defaultEnumHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultEnumHandling"/></em></p>
        ///   <p>The default enum handling ('String' or 'Integer'), default: Integer.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetDefaultEnumHandling(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultEnumHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultPropertyNameHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultPropertyNameHandling"/></em></p>
        ///   <p>The default property name handling ('Default' or 'CamelCase').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetDefaultPropertyNameHandling(this NSwagAspNetCoreToSwaggerSettings toolSettings, PropertyNameHandling defaultPropertyNameHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultPropertyNameHandling = defaultPropertyNameHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultPropertyNameHandling"/></em></p>
        ///   <p>The default property name handling ('Default' or 'CamelCase').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetDefaultPropertyNameHandling(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultPropertyNameHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultReferenceTypeNullHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling (Null (default) or NotNull).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetDefaultReferenceTypeNullHandling(this NSwagAspNetCoreToSwaggerSettings toolSettings, ReferenceTypeNullHandling defaultReferenceTypeNullHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultReferenceTypeNullHandling = defaultReferenceTypeNullHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultReferenceTypeNullHandling"/></em></p>
        ///   <p>The default reference type null handling (Null (default) or NotNull).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetDefaultReferenceTypeNullHandling(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultReferenceTypeNullHandling = null;
            return toolSettings;
        }
        #endregion
        #region DefaultResponseReferenceTypeNullHandling
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/></em></p>
        ///   <p>The default response reference type null handling (default: NotNull (default) or Null).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetDefaultResponseReferenceTypeNullHandling(this NSwagAspNetCoreToSwaggerSettings toolSettings, ReferenceTypeNullHandling defaultResponseReferenceTypeNullHandling)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultResponseReferenceTypeNullHandling = defaultResponseReferenceTypeNullHandling;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.DefaultResponseReferenceTypeNullHandling"/></em></p>
        ///   <p>The default response reference type null handling (default: NotNull (default) or Null).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetDefaultResponseReferenceTypeNullHandling(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultResponseReferenceTypeNullHandling = null;
            return toolSettings;
        }
        #endregion
        #region DocumentName
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentName"/></em></p>
        ///   <p>The document name to use in SwaggerDocumentProvider (default: v1).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetDocumentName(this NSwagAspNetCoreToSwaggerSettings toolSettings, string documentName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentName = documentName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentName"/></em></p>
        ///   <p>The document name to use in SwaggerDocumentProvider (default: v1).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetDocumentName(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentName = null;
            return toolSettings;
        }
        #endregion
        #region DocumentProcessors
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/> to a new list</em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetDocumentProcessors(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal = documentProcessors.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/> to a new list</em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetDocumentProcessors(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal = documentProcessors.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings AddDocumentProcessors(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal.AddRange(documentProcessors);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings AddDocumentProcessors(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal.AddRange(documentProcessors);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ClearDocumentProcessors(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentProcessorsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings RemoveDocumentProcessors(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(documentProcessors);
            toolSettings.DocumentProcessorsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentProcessors"/></em></p>
        ///   <p>The document processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings RemoveDocumentProcessors(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> documentProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(documentProcessors);
            toolSettings.DocumentProcessorsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DocumentTemplate
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentTemplate"/></em></p>
        ///   <p>Specifies the Swagger document template (may be a path or JSON, default: none).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetDocumentTemplate(this NSwagAspNetCoreToSwaggerSettings toolSettings, string documentTemplate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentTemplate = documentTemplate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.DocumentTemplate"/></em></p>
        ///   <p>Specifies the Swagger document template (may be a path or JSON, default: none).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetDocumentTemplate(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DocumentTemplate = null;
            return toolSettings;
        }
        #endregion
        #region ExcludedTypeNames
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/> to a new list</em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetExcludedTypeNames(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal = excludedTypeNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/> to a new list</em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetExcludedTypeNames(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal = excludedTypeNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings AddExcludedTypeNames(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.AddRange(excludedTypeNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings AddExcludedTypeNames(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.AddRange(excludedTypeNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ClearExcludedTypeNames(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings RemoveExcludedTypeNames(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedTypeNames);
            toolSettings.ExcludedTypeNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToSwaggerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded type names (same as JsonSchemaIgnoreAttribute).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings RemoveExcludedTypeNames(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedTypeNames);
            toolSettings.ExcludedTypeNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region FlattenInheritanceHierarchy
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetFlattenInheritanceHierarchy(this NSwagAspNetCoreToSwaggerSettings toolSettings, bool? flattenInheritanceHierarchy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = flattenInheritanceHierarchy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetFlattenInheritanceHierarchy(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings EnableFlattenInheritanceHierarchy(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings DisableFlattenInheritanceHierarchy(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToSwaggerSettings.FlattenInheritanceHierarchy"/></em></p>
        ///   <p>Flatten the inheritance hierarchy instead of using allOf to describe inheritance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ToggleFlattenInheritanceHierarchy(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.FlattenInheritanceHierarchy = !toolSettings.FlattenInheritanceHierarchy;
            return toolSettings;
        }
        #endregion
        #region GenerateAbstractProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetGenerateAbstractProperties(this NSwagAspNetCoreToSwaggerSettings toolSettings, bool? generateAbstractProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = generateAbstractProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetGenerateAbstractProperties(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings EnableGenerateAbstractProperties(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings DisableGenerateAbstractProperties(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractProperties"/></em></p>
        ///   <p>Generate abstract properties (i.e. interface and abstract properties. Properties may defined multiple times in a inheritance hierarchy, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ToggleGenerateAbstractProperties(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractProperties = !toolSettings.GenerateAbstractProperties;
            return toolSettings;
        }
        #endregion
        #region GenerateAbstractSchemas
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetGenerateAbstractSchemas(this NSwagAspNetCoreToSwaggerSettings toolSettings, bool? generateAbstractSchemas)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = generateAbstractSchemas;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetGenerateAbstractSchemas(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings EnableGenerateAbstractSchemas(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings DisableGenerateAbstractSchemas(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateAbstractSchemas"/></em></p>
        ///   <p>Generate the x-abstract flag on schemas (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ToggleGenerateAbstractSchemas(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateAbstractSchemas = !toolSettings.GenerateAbstractSchemas;
            return toolSettings;
        }
        #endregion
        #region GenerateEnumMappingDescription
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetGenerateEnumMappingDescription(this NSwagAspNetCoreToSwaggerSettings toolSettings, bool? generateEnumMappingDescription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = generateEnumMappingDescription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetGenerateEnumMappingDescription(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings EnableGenerateEnumMappingDescription(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings DisableGenerateEnumMappingDescription(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateEnumMappingDescription"/></em></p>
        ///   <p>Generate a description with number to enum name mappings (for integer enums only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ToggleGenerateEnumMappingDescription(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateEnumMappingDescription = !toolSettings.GenerateEnumMappingDescription;
            return toolSettings;
        }
        #endregion
        #region GenerateKnownTypes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetGenerateKnownTypes(this NSwagAspNetCoreToSwaggerSettings toolSettings, bool? generateKnownTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = generateKnownTypes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetGenerateKnownTypes(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings EnableGenerateKnownTypes(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings DisableGenerateKnownTypes(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateKnownTypes"/></em></p>
        ///   <p>Generate schemas for types in KnownTypeAttribute attributes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ToggleGenerateKnownTypes(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateKnownTypes = !toolSettings.GenerateKnownTypes;
            return toolSettings;
        }
        #endregion
        #region GenerateXmlObjects
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetGenerateXmlObjects(this NSwagAspNetCoreToSwaggerSettings toolSettings, bool? generateXmlObjects)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = generateXmlObjects;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetGenerateXmlObjects(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings EnableGenerateXmlObjects(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings DisableGenerateXmlObjects(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToSwaggerSettings.GenerateXmlObjects"/></em></p>
        ///   <p>Generate xmlObject representation for definitions (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ToggleGenerateXmlObjects(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateXmlObjects = !toolSettings.GenerateXmlObjects;
            return toolSettings;
        }
        #endregion
        #region IgnoreObsoleteProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetIgnoreObsoleteProperties(this NSwagAspNetCoreToSwaggerSettings toolSettings, bool? ignoreObsoleteProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = ignoreObsoleteProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetIgnoreObsoleteProperties(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings EnableIgnoreObsoleteProperties(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings DisableIgnoreObsoleteProperties(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToSwaggerSettings.IgnoreObsoleteProperties"/></em></p>
        ///   <p>Ignore properties with the ObsoleteAttribute (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ToggleIgnoreObsoleteProperties(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IgnoreObsoleteProperties = !toolSettings.IgnoreObsoleteProperties;
            return toolSettings;
        }
        #endregion
        #region InfoDescription
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.InfoDescription"/></em></p>
        ///   <p>Specify the description of the Swagger specification (ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetInfoDescription(this NSwagAspNetCoreToSwaggerSettings toolSettings, string infoDescription)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoDescription = infoDescription;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.InfoDescription"/></em></p>
        ///   <p>Specify the description of the Swagger specification (ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetInfoDescription(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoDescription = null;
            return toolSettings;
        }
        #endregion
        #region InfoTitle
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.InfoTitle"/></em></p>
        ///   <p>Specify the title of the Swagger specification (ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetInfoTitle(this NSwagAspNetCoreToSwaggerSettings toolSettings, string infoTitle)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoTitle = infoTitle;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.InfoTitle"/></em></p>
        ///   <p>Specify the title of the Swagger specification (ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetInfoTitle(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoTitle = null;
            return toolSettings;
        }
        #endregion
        #region InfoVersion
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.InfoVersion"/></em></p>
        ///   <p>Specify the version of the Swagger specification (default: 1.0.0, ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetInfoVersion(this NSwagAspNetCoreToSwaggerSettings toolSettings, string infoVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoVersion = infoVersion;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.InfoVersion"/></em></p>
        ///   <p>Specify the version of the Swagger specification (default: 1.0.0, ignored when DocumentTemplate is set).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetInfoVersion(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InfoVersion = null;
            return toolSettings;
        }
        #endregion
        #region OperationProcessors
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/> to a new list</em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetOperationProcessors(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal = operationProcessors.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/> to a new list</em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetOperationProcessors(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal = operationProcessors.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings AddOperationProcessors(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal.AddRange(operationProcessors);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings AddOperationProcessors(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal.AddRange(operationProcessors);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ClearOperationProcessors(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationProcessorsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings RemoveOperationProcessors(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(operationProcessors);
            toolSettings.OperationProcessorsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToSwaggerSettings.OperationProcessors"/></em></p>
        ///   <p>The operation processor type names in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings RemoveOperationProcessors(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> operationProcessors)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(operationProcessors);
            toolSettings.OperationProcessorsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region SchemaNameGenerator
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.SchemaNameGenerator"/></em></p>
        ///   <p>The custom ISchemaNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetSchemaNameGenerator(this NSwagAspNetCoreToSwaggerSettings toolSettings, string schemaNameGenerator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SchemaNameGenerator = schemaNameGenerator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.SchemaNameGenerator"/></em></p>
        ///   <p>The custom ISchemaNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetSchemaNameGenerator(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SchemaNameGenerator = null;
            return toolSettings;
        }
        #endregion
        #region SerializerSettings
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.SerializerSettings"/></em></p>
        ///   <p>The custom JsonSerializerSettings implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetSerializerSettings(this NSwagAspNetCoreToSwaggerSettings toolSettings, string serializerSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SerializerSettings = serializerSettings;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.SerializerSettings"/></em></p>
        ///   <p>The custom JsonSerializerSettings implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetSerializerSettings(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SerializerSettings = null;
            return toolSettings;
        }
        #endregion
        #region ServiceBasePath
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceBasePath"/></em></p>
        ///   <p>The basePath of the Swagger specification (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetServiceBasePath(this NSwagAspNetCoreToSwaggerSettings toolSettings, string serviceBasePath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceBasePath = serviceBasePath;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceBasePath"/></em></p>
        ///   <p>The basePath of the Swagger specification (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetServiceBasePath(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceBasePath = null;
            return toolSettings;
        }
        #endregion
        #region ServiceHost
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web service (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetServiceHost(this NSwagAspNetCoreToSwaggerSettings toolSettings, string serviceHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = serviceHost;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web service (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetServiceHost(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = null;
            return toolSettings;
        }
        #endregion
        #region ServiceSchemes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetServiceSchemes(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetServiceSchemes(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings AddServiceSchemes(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings AddServiceSchemes(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ClearServiceSchemes(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings RemoveServiceSchemes(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToSwaggerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings RemoveServiceSchemes(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Startup
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.Startup"/></em></p>
        ///   <p>The Startup class type in the form 'assemblyName:fullTypeName' or 'fullTypeName'.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetStartup(this NSwagAspNetCoreToSwaggerSettings toolSettings, string startup)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Startup = startup;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.Startup"/></em></p>
        ///   <p>The Startup class type in the form 'assemblyName:fullTypeName' or 'fullTypeName'.</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetStartup(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Startup = null;
            return toolSettings;
        }
        #endregion
        #region TypeNameGenerator
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetTypeNameGenerator(this NSwagAspNetCoreToSwaggerSettings toolSettings, string typeNameGenerator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = typeNameGenerator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetTypeNameGenerator(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = null;
            return toolSettings;
        }
        #endregion
        #region UseDocumentProvider
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetUseDocumentProvider(this NSwagAspNetCoreToSwaggerSettings toolSettings, bool? useDocumentProvider)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = useDocumentProvider;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetUseDocumentProvider(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings EnableUseDocumentProvider(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings DisableUseDocumentProvider(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToSwaggerSettings.UseDocumentProvider"/></em></p>
        ///   <p>Generate document using SwaggerDocumentProvider (configuration from AddOpenApiDocument()/AddSwaggerDocument(), most CLI settings will be ignored).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ToggleUseDocumentProvider(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseDocumentProvider = !toolSettings.UseDocumentProvider;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetOutput(this NSwagAspNetCoreToSwaggerSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetOutput(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region OutputType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.OutputType"/></em></p>
        ///   <p>Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetOutputType(this NSwagAspNetCoreToSwaggerSettings toolSettings, SchemaType outputType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputType = outputType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.OutputType"/></em></p>
        ///   <p>Specifies the output schema type, ignored when UseDocumentProvider is enabled (Swagger2|OpenApi3, default: Swagger2).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetOutputType(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OutputType = null;
            return toolSettings;
        }
        #endregion
        #region Assembly
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/> to a new list</em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetAssembly(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal = assembly.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/> to a new list</em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetAssembly(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal = assembly.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings AddAssembly(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.AddRange(assembly);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings AddAssembly(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.AddRange(assembly);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ClearAssembly(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings RemoveAssembly(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] assembly)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(assembly);
            toolSettings.AssemblyInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToSwaggerSettings.Assembly"/></em></p>
        ///   <p>The path or paths to the .NET assemblies (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings RemoveAssembly(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> assembly)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(assembly);
            toolSettings.AssemblyInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AssemblyConfig
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.AssemblyConfig"/></em></p>
        ///   <p>The path to the assembly App.config or Web.config (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetAssemblyConfig(this NSwagAspNetCoreToSwaggerSettings toolSettings, string assemblyConfig)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyConfig = assemblyConfig;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.AssemblyConfig"/></em></p>
        ///   <p>The path to the assembly App.config or Web.config (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetAssemblyConfig(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AssemblyConfig = null;
            return toolSettings;
        }
        #endregion
        #region ReferencePaths
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/> to a new list</em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetReferencePaths(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal = referencePaths.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/> to a new list</em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetReferencePaths(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal = referencePaths.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings AddReferencePaths(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.AddRange(referencePaths);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings AddReferencePaths(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.AddRange(referencePaths);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ClearReferencePaths(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReferencePathsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings RemoveReferencePaths(this NSwagAspNetCoreToSwaggerSettings toolSettings, params string[] referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(referencePaths);
            toolSettings.ReferencePathsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagAspNetCoreToSwaggerSettings.ReferencePaths"/></em></p>
        ///   <p>The paths to search for referenced assembly files (comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings RemoveReferencePaths(this NSwagAspNetCoreToSwaggerSettings toolSettings, IEnumerable<string> referencePaths)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(referencePaths);
            toolSettings.ReferencePathsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region UseNuGetCache
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagAspNetCoreToSwaggerSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings SetUseNuGetCache(this NSwagAspNetCoreToSwaggerSettings toolSettings, bool? useNuGetCache)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = useNuGetCache;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagAspNetCoreToSwaggerSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ResetUseNuGetCache(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagAspNetCoreToSwaggerSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings EnableUseNuGetCache(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagAspNetCoreToSwaggerSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings DisableUseNuGetCache(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagAspNetCoreToSwaggerSettings.UseNuGetCache"/></em></p>
        ///   <p>Determines if local Nuget's cache folder should be put in the ReferencePaths by default</p>
        /// </summary>
        [Pure]
        public static NSwagAspNetCoreToSwaggerSettings ToggleUseNuGetCache(this NSwagAspNetCoreToSwaggerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseNuGetCache = !toolSettings.UseNuGetCache;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region NSwagCreateDocumentSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagCreateDocumentSettingsExtensions
    {
    }
    #endregion
    #region NSwagExecuteDocumentSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagExecuteDocumentSettingsExtensions
    {
        #region Input
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagExecuteDocumentSettings.Input"/></em></p>
        /// </summary>
        [Pure]
        public static NSwagExecuteDocumentSettings SetInput(this NSwagExecuteDocumentSettings toolSettings, string input)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = input;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagExecuteDocumentSettings.Input"/></em></p>
        /// </summary>
        [Pure]
        public static NSwagExecuteDocumentSettings ResetInput(this NSwagExecuteDocumentSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = null;
            return toolSettings;
        }
        #endregion
        #region Variables
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagExecuteDocumentSettings.Variables"/> to a new dictionary</em></p>
        /// </summary>
        [Pure]
        public static NSwagExecuteDocumentSettings SetVariables(this NSwagExecuteDocumentSettings toolSettings, IDictionary<string, object> variables)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VariablesInternal = variables.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagExecuteDocumentSettings.Variables"/></em></p>
        /// </summary>
        [Pure]
        public static NSwagExecuteDocumentSettings ClearVariables(this NSwagExecuteDocumentSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VariablesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds a new key-value-pair <see cref="NSwagExecuteDocumentSettings.Variables"/></em></p>
        /// </summary>
        [Pure]
        public static NSwagExecuteDocumentSettings AddVariable(this NSwagExecuteDocumentSettings toolSettings, string variableKey, object variableValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VariablesInternal.Add(variableKey, variableValue);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes a key-value-pair from <see cref="NSwagExecuteDocumentSettings.Variables"/></em></p>
        /// </summary>
        [Pure]
        public static NSwagExecuteDocumentSettings RemoveVariable(this NSwagExecuteDocumentSettings toolSettings, string variableKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VariablesInternal.Remove(variableKey);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets a key-value-pair in <see cref="NSwagExecuteDocumentSettings.Variables"/></em></p>
        /// </summary>
        [Pure]
        public static NSwagExecuteDocumentSettings SetVariable(this NSwagExecuteDocumentSettings toolSettings, string variableKey, object variableValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VariablesInternal[variableKey] = variableValue;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region NSwagJsonSchemaToCSharpSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagJsonSchemaToCSharpSettingsExtensions
    {
        #region AnyType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToCSharpSettings.AnyType"/></em></p>
        ///   <p>The any .NET type (default: 'object').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings SetAnyType(this NSwagJsonSchemaToCSharpSettings toolSettings, string anyType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AnyType = anyType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagJsonSchemaToCSharpSettings.AnyType"/></em></p>
        ///   <p>The any .NET type (default: 'object').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings ResetAnyType(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AnyType = null;
            return toolSettings;
        }
        #endregion
        #region ArrayInstanceType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToCSharpSettings.ArrayInstanceType"/></em></p>
        ///   <p>The generic array .NET instance type (default: empty = ArrayType).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings SetArrayInstanceType(this NSwagJsonSchemaToCSharpSettings toolSettings, string arrayInstanceType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayInstanceType = arrayInstanceType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagJsonSchemaToCSharpSettings.ArrayInstanceType"/></em></p>
        ///   <p>The generic array .NET instance type (default: empty = ArrayType).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings ResetArrayInstanceType(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayInstanceType = null;
            return toolSettings;
        }
        #endregion
        #region ArrayType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToCSharpSettings.ArrayType"/></em></p>
        ///   <p>The generic array .NET type (default: 'ObservableCollection').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings SetArrayType(this NSwagJsonSchemaToCSharpSettings toolSettings, string arrayType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayType = arrayType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagJsonSchemaToCSharpSettings.ArrayType"/></em></p>
        ///   <p>The generic array .NET type (default: 'ObservableCollection').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings ResetArrayType(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayType = null;
            return toolSettings;
        }
        #endregion
        #region DateTimeType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToCSharpSettings.DateTimeType"/></em></p>
        ///   <p>The date time .NET type (default: 'DateTime').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings SetDateTimeType(this NSwagJsonSchemaToCSharpSettings toolSettings, string dateTimeType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateTimeType = dateTimeType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagJsonSchemaToCSharpSettings.DateTimeType"/></em></p>
        ///   <p>The date time .NET type (default: 'DateTime').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings ResetDateTimeType(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateTimeType = null;
            return toolSettings;
        }
        #endregion
        #region DictionaryInstanceType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToCSharpSettings.DictionaryInstanceType"/></em></p>
        ///   <p>The generic dictionary .NET instance type (default: empty = DictionaryType).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings SetDictionaryInstanceType(this NSwagJsonSchemaToCSharpSettings toolSettings, string dictionaryInstanceType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryInstanceType = dictionaryInstanceType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagJsonSchemaToCSharpSettings.DictionaryInstanceType"/></em></p>
        ///   <p>The generic dictionary .NET instance type (default: empty = DictionaryType).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings ResetDictionaryInstanceType(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryInstanceType = null;
            return toolSettings;
        }
        #endregion
        #region DictionaryType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToCSharpSettings.DictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type (default: 'Dictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings SetDictionaryType(this NSwagJsonSchemaToCSharpSettings toolSettings, string dictionaryType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryType = dictionaryType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagJsonSchemaToCSharpSettings.DictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type (default: 'Dictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings ResetDictionaryType(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryType = null;
            return toolSettings;
        }
        #endregion
        #region GenerateOptionalPropertiesAsNullable
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings SetGenerateOptionalPropertiesAsNullable(this NSwagJsonSchemaToCSharpSettings toolSettings, bool? generateOptionalPropertiesAsNullable)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = generateOptionalPropertiesAsNullable;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings ResetGenerateOptionalPropertiesAsNullable(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings EnableGenerateOptionalPropertiesAsNullable(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings DisableGenerateOptionalPropertiesAsNullable(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagJsonSchemaToCSharpSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings ToggleGenerateOptionalPropertiesAsNullable(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = !toolSettings.GenerateOptionalPropertiesAsNullable;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToCSharpSettings.Name"/></em></p>
        ///   <p>The class name of the root schema.</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings SetName(this NSwagJsonSchemaToCSharpSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagJsonSchemaToCSharpSettings.Name"/></em></p>
        ///   <p>The class name of the root schema.</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings ResetName(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Namespace
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToCSharpSettings.Namespace"/></em></p>
        ///   <p>The namespace of the generated classes.</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings SetNamespace(this NSwagJsonSchemaToCSharpSettings toolSettings, string @namespace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = @namespace;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagJsonSchemaToCSharpSettings.Namespace"/></em></p>
        ///   <p>The namespace of the generated classes.</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings ResetNamespace(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = null;
            return toolSettings;
        }
        #endregion
        #region RequiredPropertiesMustBeDefined
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings SetRequiredPropertiesMustBeDefined(this NSwagJsonSchemaToCSharpSettings toolSettings, bool? requiredPropertiesMustBeDefined)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = requiredPropertiesMustBeDefined;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings ResetRequiredPropertiesMustBeDefined(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings EnableRequiredPropertiesMustBeDefined(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings DisableRequiredPropertiesMustBeDefined(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagJsonSchemaToCSharpSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings ToggleRequiredPropertiesMustBeDefined(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = !toolSettings.RequiredPropertiesMustBeDefined;
            return toolSettings;
        }
        #endregion
        #region Input
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToCSharpSettings.Input"/></em></p>
        ///   <p>A file path or URL to the data or the JSON data itself.</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings SetInput(this NSwagJsonSchemaToCSharpSettings toolSettings, string input)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = input;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagJsonSchemaToCSharpSettings.Input"/></em></p>
        ///   <p>A file path or URL to the data or the JSON data itself.</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings ResetInput(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = null;
            return toolSettings;
        }
        #endregion
        #region ServiceHost
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToCSharpSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web document (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings SetServiceHost(this NSwagJsonSchemaToCSharpSettings toolSettings, string serviceHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = serviceHost;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagJsonSchemaToCSharpSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web document (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings ResetServiceHost(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = null;
            return toolSettings;
        }
        #endregion
        #region ServiceSchemes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings SetServiceSchemes(this NSwagJsonSchemaToCSharpSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings SetServiceSchemes(this NSwagJsonSchemaToCSharpSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings AddServiceSchemes(this NSwagJsonSchemaToCSharpSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings AddServiceSchemes(this NSwagJsonSchemaToCSharpSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings ClearServiceSchemes(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings RemoveServiceSchemes(this NSwagJsonSchemaToCSharpSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagJsonSchemaToCSharpSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings RemoveServiceSchemes(this NSwagJsonSchemaToCSharpSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToCSharpSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings SetOutput(this NSwagJsonSchemaToCSharpSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagJsonSchemaToCSharpSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToCSharpSettings ResetOutput(this NSwagJsonSchemaToCSharpSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region NSwagJsonSchemaToTypeScriptSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagJsonSchemaToTypeScriptSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToTypeScriptSettings.Name"/></em></p>
        ///   <p>The type name of the root schema.</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToTypeScriptSettings SetName(this NSwagJsonSchemaToTypeScriptSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagJsonSchemaToTypeScriptSettings.Name"/></em></p>
        ///   <p>The type name of the root schema.</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToTypeScriptSettings ResetName(this NSwagJsonSchemaToTypeScriptSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Input
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToTypeScriptSettings.Input"/></em></p>
        ///   <p>A file path or URL to the data or the JSON data itself.</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToTypeScriptSettings SetInput(this NSwagJsonSchemaToTypeScriptSettings toolSettings, string input)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = input;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagJsonSchemaToTypeScriptSettings.Input"/></em></p>
        ///   <p>A file path or URL to the data or the JSON data itself.</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToTypeScriptSettings ResetInput(this NSwagJsonSchemaToTypeScriptSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = null;
            return toolSettings;
        }
        #endregion
        #region ServiceHost
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web document (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToTypeScriptSettings SetServiceHost(this NSwagJsonSchemaToTypeScriptSettings toolSettings, string serviceHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = serviceHost;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web document (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToTypeScriptSettings ResetServiceHost(this NSwagJsonSchemaToTypeScriptSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = null;
            return toolSettings;
        }
        #endregion
        #region ServiceSchemes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToTypeScriptSettings SetServiceSchemes(this NSwagJsonSchemaToTypeScriptSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToTypeScriptSettings SetServiceSchemes(this NSwagJsonSchemaToTypeScriptSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToTypeScriptSettings AddServiceSchemes(this NSwagJsonSchemaToTypeScriptSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToTypeScriptSettings AddServiceSchemes(this NSwagJsonSchemaToTypeScriptSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToTypeScriptSettings ClearServiceSchemes(this NSwagJsonSchemaToTypeScriptSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToTypeScriptSettings RemoveServiceSchemes(this NSwagJsonSchemaToTypeScriptSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagJsonSchemaToTypeScriptSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToTypeScriptSettings RemoveServiceSchemes(this NSwagJsonSchemaToTypeScriptSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagJsonSchemaToTypeScriptSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToTypeScriptSettings SetOutput(this NSwagJsonSchemaToTypeScriptSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagJsonSchemaToTypeScriptSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagJsonSchemaToTypeScriptSettings ResetOutput(this NSwagJsonSchemaToTypeScriptSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region NSwagOpenApiToCSharpClientSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagOpenApiToCSharpClientSettingsExtensions
    {
        #region AdditionalContractNamespaceUsages
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/> to a new list</em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetAdditionalContractNamespaceUsages(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal = additionalContractNamespaceUsages.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/> to a new list</em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetAdditionalContractNamespaceUsages(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal = additionalContractNamespaceUsages.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings AddAdditionalContractNamespaceUsages(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal.AddRange(additionalContractNamespaceUsages);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings AddAdditionalContractNamespaceUsages(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal.AddRange(additionalContractNamespaceUsages);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ClearAdditionalContractNamespaceUsages(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings RemoveAdditionalContractNamespaceUsages(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(additionalContractNamespaceUsages);
            toolSettings.AdditionalContractNamespaceUsagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings RemoveAdditionalContractNamespaceUsages(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(additionalContractNamespaceUsages);
            toolSettings.AdditionalContractNamespaceUsagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AdditionalNamespaceUsages
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/> to a new list</em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetAdditionalNamespaceUsages(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal = additionalNamespaceUsages.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/> to a new list</em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetAdditionalNamespaceUsages(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal = additionalNamespaceUsages.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings AddAdditionalNamespaceUsages(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal.AddRange(additionalNamespaceUsages);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings AddAdditionalNamespaceUsages(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal.AddRange(additionalNamespaceUsages);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ClearAdditionalNamespaceUsages(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings RemoveAdditionalNamespaceUsages(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(additionalNamespaceUsages);
            toolSettings.AdditionalNamespaceUsagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpClientSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings RemoveAdditionalNamespaceUsages(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(additionalNamespaceUsages);
            toolSettings.AdditionalNamespaceUsagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AnyType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.AnyType"/></em></p>
        ///   <p>The any .NET type (default: 'object').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetAnyType(this NSwagOpenApiToCSharpClientSettings toolSettings, string anyType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AnyType = anyType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.AnyType"/></em></p>
        ///   <p>The any .NET type (default: 'object').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetAnyType(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AnyType = null;
            return toolSettings;
        }
        #endregion
        #region ArrayBaseType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.ArrayBaseType"/></em></p>
        ///   <p>The generic array .NET type (default: 'Collection').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetArrayBaseType(this NSwagOpenApiToCSharpClientSettings toolSettings, string arrayBaseType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayBaseType = arrayBaseType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.ArrayBaseType"/></em></p>
        ///   <p>The generic array .NET type (default: 'Collection').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetArrayBaseType(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayBaseType = null;
            return toolSettings;
        }
        #endregion
        #region ArrayInstanceType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.ArrayInstanceType"/></em></p>
        ///   <p>The generic array .NET instance type (default: empty = ArrayType).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetArrayInstanceType(this NSwagOpenApiToCSharpClientSettings toolSettings, string arrayInstanceType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayInstanceType = arrayInstanceType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.ArrayInstanceType"/></em></p>
        ///   <p>The generic array .NET instance type (default: empty = ArrayType).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetArrayInstanceType(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayInstanceType = null;
            return toolSettings;
        }
        #endregion
        #region ArrayType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.ArrayType"/></em></p>
        ///   <p>The generic array .NET type (default: 'ICollection').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetArrayType(this NSwagOpenApiToCSharpClientSettings toolSettings, string arrayType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayType = arrayType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.ArrayType"/></em></p>
        ///   <p>The generic array .NET type (default: 'ICollection').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetArrayType(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayType = null;
            return toolSettings;
        }
        #endregion
        #region ClassName
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.ClassName"/></em></p>
        ///   <p>The class name of the generated client.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetClassName(this NSwagOpenApiToCSharpClientSettings toolSettings, string className)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassName = className;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.ClassName"/></em></p>
        ///   <p>The class name of the generated client.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetClassName(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassName = null;
            return toolSettings;
        }
        #endregion
        #region ClassStyle
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.ClassStyle"/></em></p>
        ///   <p>The CSharp class style, 'Poco' or 'Inpc' (default: 'Poco').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetClassStyle(this NSwagOpenApiToCSharpClientSettings toolSettings, CSharpClassStyle classStyle)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassStyle = classStyle;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.ClassStyle"/></em></p>
        ///   <p>The CSharp class style, 'Poco' or 'Inpc' (default: 'Poco').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetClassStyle(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassStyle = null;
            return toolSettings;
        }
        #endregion
        #region DateTimeType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.DateTimeType"/></em></p>
        ///   <p>The date time .NET type (default: 'DateTimeOffset').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetDateTimeType(this NSwagOpenApiToCSharpClientSettings toolSettings, string dateTimeType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateTimeType = dateTimeType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.DateTimeType"/></em></p>
        ///   <p>The date time .NET type (default: 'DateTimeOffset').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetDateTimeType(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateTimeType = null;
            return toolSettings;
        }
        #endregion
        #region DateType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.DateType"/></em></p>
        ///   <p>The date .NET type (default: 'DateTimeOffset').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetDateType(this NSwagOpenApiToCSharpClientSettings toolSettings, string dateType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateType = dateType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.DateType"/></em></p>
        ///   <p>The date .NET type (default: 'DateTimeOffset').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetDateType(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateType = null;
            return toolSettings;
        }
        #endregion
        #region DictionaryBaseType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryBaseType"/></em></p>
        ///   <p>The generic dictionary .NET type (default: 'Dictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetDictionaryBaseType(this NSwagOpenApiToCSharpClientSettings toolSettings, string dictionaryBaseType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryBaseType = dictionaryBaseType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryBaseType"/></em></p>
        ///   <p>The generic dictionary .NET type (default: 'Dictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetDictionaryBaseType(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryBaseType = null;
            return toolSettings;
        }
        #endregion
        #region DictionaryInstanceType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryInstanceType"/></em></p>
        ///   <p>The generic dictionary .NET instance type (default: empty = DictionaryType).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetDictionaryInstanceType(this NSwagOpenApiToCSharpClientSettings toolSettings, string dictionaryInstanceType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryInstanceType = dictionaryInstanceType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryInstanceType"/></em></p>
        ///   <p>The generic dictionary .NET instance type (default: empty = DictionaryType).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetDictionaryInstanceType(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryInstanceType = null;
            return toolSettings;
        }
        #endregion
        #region DictionaryType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetDictionaryType(this NSwagOpenApiToCSharpClientSettings toolSettings, string dictionaryType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryType = dictionaryType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.DictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetDictionaryType(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryType = null;
            return toolSettings;
        }
        #endregion
        #region EnforceFlagEnums
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetEnforceFlagEnums(this NSwagOpenApiToCSharpClientSettings toolSettings, bool? enforceFlagEnums)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = enforceFlagEnums;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetEnforceFlagEnums(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings EnableEnforceFlagEnums(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings DisableEnforceFlagEnums(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpClientSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ToggleEnforceFlagEnums(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = !toolSettings.EnforceFlagEnums;
            return toolSettings;
        }
        #endregion
        #region ExcludedParameterNames
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/> to a new list</em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetExcludedParameterNames(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal = excludedParameterNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/> to a new list</em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetExcludedParameterNames(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal = excludedParameterNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings AddExcludedParameterNames(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal.AddRange(excludedParameterNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings AddExcludedParameterNames(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal.AddRange(excludedParameterNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ClearExcludedParameterNames(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings RemoveExcludedParameterNames(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedParameterNames);
            toolSettings.ExcludedParameterNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings RemoveExcludedParameterNames(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedParameterNames);
            toolSettings.ExcludedParameterNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ExcludedTypeNames
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/> to a new list</em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetExcludedTypeNames(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal = excludedTypeNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/> to a new list</em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetExcludedTypeNames(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal = excludedTypeNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings AddExcludedTypeNames(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.AddRange(excludedTypeNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings AddExcludedTypeNames(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.AddRange(excludedTypeNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ClearExcludedTypeNames(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings RemoveExcludedTypeNames(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedTypeNames);
            toolSettings.ExcludedTypeNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpClientSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings RemoveExcludedTypeNames(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedTypeNames);
            toolSettings.ExcludedTypeNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region GenerateDataAnnotations
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetGenerateDataAnnotations(this NSwagOpenApiToCSharpClientSettings toolSettings, bool? generateDataAnnotations)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = generateDataAnnotations;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetGenerateDataAnnotations(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings EnableGenerateDataAnnotations(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings DisableGenerateDataAnnotations(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ToggleGenerateDataAnnotations(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = !toolSettings.GenerateDataAnnotations;
            return toolSettings;
        }
        #endregion
        #region GenerateDefaultValues
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetGenerateDefaultValues(this NSwagOpenApiToCSharpClientSettings toolSettings, bool? generateDefaultValues)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = generateDefaultValues;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetGenerateDefaultValues(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings EnableGenerateDefaultValues(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings DisableGenerateDefaultValues(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ToggleGenerateDefaultValues(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = !toolSettings.GenerateDefaultValues;
            return toolSettings;
        }
        #endregion
        #region GenerateDtoTypes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetGenerateDtoTypes(this NSwagOpenApiToCSharpClientSettings toolSettings, bool? generateDtoTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = generateDtoTypes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetGenerateDtoTypes(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings EnableGenerateDtoTypes(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings DisableGenerateDtoTypes(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpClientSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ToggleGenerateDtoTypes(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = !toolSettings.GenerateDtoTypes;
            return toolSettings;
        }
        #endregion
        #region GenerateImmutableArrayProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetGenerateImmutableArrayProperties(this NSwagOpenApiToCSharpClientSettings toolSettings, bool? generateImmutableArrayProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = generateImmutableArrayProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetGenerateImmutableArrayProperties(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings EnableGenerateImmutableArrayProperties(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings DisableGenerateImmutableArrayProperties(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ToggleGenerateImmutableArrayProperties(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = !toolSettings.GenerateImmutableArrayProperties;
            return toolSettings;
        }
        #endregion
        #region GenerateImmutableDictionaryProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetGenerateImmutableDictionaryProperties(this NSwagOpenApiToCSharpClientSettings toolSettings, bool? generateImmutableDictionaryProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = generateImmutableDictionaryProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetGenerateImmutableDictionaryProperties(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings EnableGenerateImmutableDictionaryProperties(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings DisableGenerateImmutableDictionaryProperties(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ToggleGenerateImmutableDictionaryProperties(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = !toolSettings.GenerateImmutableDictionaryProperties;
            return toolSettings;
        }
        #endregion
        #region GenerateJsonMethods
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetGenerateJsonMethods(this NSwagOpenApiToCSharpClientSettings toolSettings, bool? generateJsonMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = generateJsonMethods;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetGenerateJsonMethods(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings EnableGenerateJsonMethods(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings DisableGenerateJsonMethods(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpClientSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ToggleGenerateJsonMethods(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = !toolSettings.GenerateJsonMethods;
            return toolSettings;
        }
        #endregion
        #region GenerateOptionalParameters
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetGenerateOptionalParameters(this NSwagOpenApiToCSharpClientSettings toolSettings, bool? generateOptionalParameters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = generateOptionalParameters;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetGenerateOptionalParameters(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings EnableGenerateOptionalParameters(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings DisableGenerateOptionalParameters(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ToggleGenerateOptionalParameters(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = !toolSettings.GenerateOptionalParameters;
            return toolSettings;
        }
        #endregion
        #region GenerateOptionalPropertiesAsNullable
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetGenerateOptionalPropertiesAsNullable(this NSwagOpenApiToCSharpClientSettings toolSettings, bool? generateOptionalPropertiesAsNullable)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = generateOptionalPropertiesAsNullable;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetGenerateOptionalPropertiesAsNullable(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings EnableGenerateOptionalPropertiesAsNullable(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings DisableGenerateOptionalPropertiesAsNullable(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ToggleGenerateOptionalPropertiesAsNullable(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = !toolSettings.GenerateOptionalPropertiesAsNullable;
            return toolSettings;
        }
        #endregion
        #region GenerateResponseClasses
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetGenerateResponseClasses(this NSwagOpenApiToCSharpClientSettings toolSettings, bool? generateResponseClasses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = generateResponseClasses;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetGenerateResponseClasses(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings EnableGenerateResponseClasses(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings DisableGenerateResponseClasses(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpClientSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ToggleGenerateResponseClasses(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = !toolSettings.GenerateResponseClasses;
            return toolSettings;
        }
        #endregion
        #region HandleReferences
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetHandleReferences(this NSwagOpenApiToCSharpClientSettings toolSettings, bool? handleReferences)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = handleReferences;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetHandleReferences(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpClientSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings EnableHandleReferences(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpClientSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings DisableHandleReferences(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpClientSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ToggleHandleReferences(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = !toolSettings.HandleReferences;
            return toolSettings;
        }
        #endregion
        #region InlineNamedAny
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetInlineNamedAny(this NSwagOpenApiToCSharpClientSettings toolSettings, bool? inlineNamedAny)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = inlineNamedAny;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetInlineNamedAny(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings EnableInlineNamedAny(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings DisableInlineNamedAny(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ToggleInlineNamedAny(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = !toolSettings.InlineNamedAny;
            return toolSettings;
        }
        #endregion
        #region InlineNamedArrays
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetInlineNamedArrays(this NSwagOpenApiToCSharpClientSettings toolSettings, bool? inlineNamedArrays)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = inlineNamedArrays;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetInlineNamedArrays(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings EnableInlineNamedArrays(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings DisableInlineNamedArrays(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ToggleInlineNamedArrays(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = !toolSettings.InlineNamedArrays;
            return toolSettings;
        }
        #endregion
        #region InlineNamedDictionaries
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetInlineNamedDictionaries(this NSwagOpenApiToCSharpClientSettings toolSettings, bool? inlineNamedDictionaries)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = inlineNamedDictionaries;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetInlineNamedDictionaries(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings EnableInlineNamedDictionaries(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings DisableInlineNamedDictionaries(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ToggleInlineNamedDictionaries(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = !toolSettings.InlineNamedDictionaries;
            return toolSettings;
        }
        #endregion
        #region InlineNamedTuples
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetInlineNamedTuples(this NSwagOpenApiToCSharpClientSettings toolSettings, bool? inlineNamedTuples)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = inlineNamedTuples;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetInlineNamedTuples(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings EnableInlineNamedTuples(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings DisableInlineNamedTuples(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpClientSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ToggleInlineNamedTuples(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = !toolSettings.InlineNamedTuples;
            return toolSettings;
        }
        #endregion
        #region JsonConverters
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/> to a new list</em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetJsonConverters(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal = jsonConverters.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/> to a new list</em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetJsonConverters(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal = jsonConverters.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings AddJsonConverters(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal.AddRange(jsonConverters);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings AddJsonConverters(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal.AddRange(jsonConverters);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ClearJsonConverters(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings RemoveJsonConverters(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(jsonConverters);
            toolSettings.JsonConvertersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpClientSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings RemoveJsonConverters(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(jsonConverters);
            toolSettings.JsonConvertersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region JsonSerializerSettingsTransformationMethod
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/></em></p>
        ///   <p>The name of a static method which is called to transform the JsonSerializerSettings used in the generated ToJson()/FromJson() methods (default: none).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetJsonSerializerSettingsTransformationMethod(this NSwagOpenApiToCSharpClientSettings toolSettings, string jsonSerializerSettingsTransformationMethod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonSerializerSettingsTransformationMethod = jsonSerializerSettingsTransformationMethod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/></em></p>
        ///   <p>The name of a static method which is called to transform the JsonSerializerSettings used in the generated ToJson()/FromJson() methods (default: none).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetJsonSerializerSettingsTransformationMethod(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonSerializerSettingsTransformationMethod = null;
            return toolSettings;
        }
        #endregion
        #region Namespace
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.Namespace"/></em></p>
        ///   <p>The namespace of the generated classes.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetNamespace(this NSwagOpenApiToCSharpClientSettings toolSettings, string @namespace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = @namespace;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.Namespace"/></em></p>
        ///   <p>The namespace of the generated classes.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetNamespace(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = null;
            return toolSettings;
        }
        #endregion
        #region OperationGenerationMode
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.OperationGenerationMode"/></em></p>
        ///   <p>The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetOperationGenerationMode(this NSwagOpenApiToCSharpClientSettings toolSettings, OperationGenerationMode operationGenerationMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationGenerationMode = operationGenerationMode;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.OperationGenerationMode"/></em></p>
        ///   <p>The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetOperationGenerationMode(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationGenerationMode = null;
            return toolSettings;
        }
        #endregion
        #region ParameterArrayType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.ParameterArrayType"/></em></p>
        ///   <p>The generic array .NET type of operation parameters (default: 'IEnumerable').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetParameterArrayType(this NSwagOpenApiToCSharpClientSettings toolSettings, string parameterArrayType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterArrayType = parameterArrayType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.ParameterArrayType"/></em></p>
        ///   <p>The generic array .NET type of operation parameters (default: 'IEnumerable').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetParameterArrayType(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterArrayType = null;
            return toolSettings;
        }
        #endregion
        #region ParameterDictionaryType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.ParameterDictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type of operation parameters (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetParameterDictionaryType(this NSwagOpenApiToCSharpClientSettings toolSettings, string parameterDictionaryType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterDictionaryType = parameterDictionaryType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.ParameterDictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type of operation parameters (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetParameterDictionaryType(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterDictionaryType = null;
            return toolSettings;
        }
        #endregion
        #region RequiredPropertiesMustBeDefined
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetRequiredPropertiesMustBeDefined(this NSwagOpenApiToCSharpClientSettings toolSettings, bool? requiredPropertiesMustBeDefined)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = requiredPropertiesMustBeDefined;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetRequiredPropertiesMustBeDefined(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings EnableRequiredPropertiesMustBeDefined(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings DisableRequiredPropertiesMustBeDefined(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ToggleRequiredPropertiesMustBeDefined(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = !toolSettings.RequiredPropertiesMustBeDefined;
            return toolSettings;
        }
        #endregion
        #region ResponseArrayType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.ResponseArrayType"/></em></p>
        ///   <p>The generic array .NET type of operation responses (default: 'ICollection').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetResponseArrayType(this NSwagOpenApiToCSharpClientSettings toolSettings, string responseArrayType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseArrayType = responseArrayType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.ResponseArrayType"/></em></p>
        ///   <p>The generic array .NET type of operation responses (default: 'ICollection').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetResponseArrayType(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseArrayType = null;
            return toolSettings;
        }
        #endregion
        #region ResponseClass
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.ResponseClass"/></em></p>
        ///   <p>The response class (default 'SwaggerResponse', may use '{controller}' placeholder).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetResponseClass(this NSwagOpenApiToCSharpClientSettings toolSettings, string responseClass)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseClass = responseClass;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.ResponseClass"/></em></p>
        ///   <p>The response class (default 'SwaggerResponse', may use '{controller}' placeholder).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetResponseClass(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseClass = null;
            return toolSettings;
        }
        #endregion
        #region ResponseDictionaryType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.ResponseDictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type of operation responses (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetResponseDictionaryType(this NSwagOpenApiToCSharpClientSettings toolSettings, string responseDictionaryType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseDictionaryType = responseDictionaryType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.ResponseDictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type of operation responses (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetResponseDictionaryType(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseDictionaryType = null;
            return toolSettings;
        }
        #endregion
        #region TimeSpanType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.TimeSpanType"/></em></p>
        ///   <p>The time span .NET type (default: 'TimeSpan').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetTimeSpanType(this NSwagOpenApiToCSharpClientSettings toolSettings, string timeSpanType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TimeSpanType = timeSpanType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.TimeSpanType"/></em></p>
        ///   <p>The time span .NET type (default: 'TimeSpan').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetTimeSpanType(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TimeSpanType = null;
            return toolSettings;
        }
        #endregion
        #region TimeType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.TimeType"/></em></p>
        ///   <p>The time .NET type (default: 'TimeSpan').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetTimeType(this NSwagOpenApiToCSharpClientSettings toolSettings, string timeType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TimeType = timeType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.TimeType"/></em></p>
        ///   <p>The time .NET type (default: 'TimeSpan').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetTimeType(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TimeType = null;
            return toolSettings;
        }
        #endregion
        #region WrapResponseMethods
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/> to a new list</em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetWrapResponseMethods(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal = wrapResponseMethods.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/> to a new list</em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetWrapResponseMethods(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal = wrapResponseMethods.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings AddWrapResponseMethods(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal.AddRange(wrapResponseMethods);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings AddWrapResponseMethods(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal.AddRange(wrapResponseMethods);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ClearWrapResponseMethods(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings RemoveWrapResponseMethods(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(wrapResponseMethods);
            toolSettings.WrapResponseMethodsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings RemoveWrapResponseMethods(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(wrapResponseMethods);
            toolSettings.WrapResponseMethodsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region WrapResponses
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetWrapResponses(this NSwagOpenApiToCSharpClientSettings toolSettings, bool? wrapResponses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = wrapResponses;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetWrapResponses(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings EnableWrapResponses(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings DisableWrapResponses(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpClientSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ToggleWrapResponses(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = !toolSettings.WrapResponses;
            return toolSettings;
        }
        #endregion
        #region EnumNameGeneratorType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.EnumNameGeneratorType"/></em></p>
        ///   <p>The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetEnumNameGeneratorType(this NSwagOpenApiToCSharpClientSettings toolSettings, string enumNameGeneratorType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnumNameGeneratorType = enumNameGeneratorType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.EnumNameGeneratorType"/></em></p>
        ///   <p>The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetEnumNameGeneratorType(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnumNameGeneratorType = null;
            return toolSettings;
        }
        #endregion
        #region PropertyNameGeneratorType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.PropertyNameGeneratorType"/></em></p>
        ///   <p>The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetPropertyNameGeneratorType(this NSwagOpenApiToCSharpClientSettings toolSettings, string propertyNameGeneratorType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PropertyNameGeneratorType = propertyNameGeneratorType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.PropertyNameGeneratorType"/></em></p>
        ///   <p>The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetPropertyNameGeneratorType(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PropertyNameGeneratorType = null;
            return toolSettings;
        }
        #endregion
        #region TemplateDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.TemplateDirectory"/></em></p>
        ///   <p>The Liquid template directory (experimental).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetTemplateDirectory(this NSwagOpenApiToCSharpClientSettings toolSettings, string templateDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TemplateDirectory = templateDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.TemplateDirectory"/></em></p>
        ///   <p>The Liquid template directory (experimental).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetTemplateDirectory(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TemplateDirectory = null;
            return toolSettings;
        }
        #endregion
        #region TypeNameGenerator
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetTypeNameGenerator(this NSwagOpenApiToCSharpClientSettings toolSettings, string typeNameGenerator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = typeNameGenerator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetTypeNameGenerator(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = null;
            return toolSettings;
        }
        #endregion
        #region Input
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.Input"/></em></p>
        ///   <p>A file path or URL to the data or the JSON data itself.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetInput(this NSwagOpenApiToCSharpClientSettings toolSettings, string input)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = input;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.Input"/></em></p>
        ///   <p>A file path or URL to the data or the JSON data itself.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetInput(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = null;
            return toolSettings;
        }
        #endregion
        #region ServiceHost
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web document (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetServiceHost(this NSwagOpenApiToCSharpClientSettings toolSettings, string serviceHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = serviceHost;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web document (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetServiceHost(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = null;
            return toolSettings;
        }
        #endregion
        #region ServiceSchemes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetServiceSchemes(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetServiceSchemes(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings AddServiceSchemes(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings AddServiceSchemes(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ClearServiceSchemes(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings RemoveServiceSchemes(this NSwagOpenApiToCSharpClientSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings RemoveServiceSchemes(this NSwagOpenApiToCSharpClientSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpClientSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings SetOutput(this NSwagOpenApiToCSharpClientSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpClientSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpClientSettings ResetOutput(this NSwagOpenApiToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region NSwagSwaggerToCSharpClientSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagSwaggerToCSharpClientSettingsExtensions
    {
        #region ClientBaseClass
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ClientBaseClass"/></em></p>
        ///   <p>The client base class (empty for no base class).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetClientBaseClass(this NSwagSwaggerToCSharpClientSettings toolSettings, string clientBaseClass)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClientBaseClass = clientBaseClass;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ClientBaseClass"/></em></p>
        ///   <p>The client base class (empty for no base class).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetClientBaseClass(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClientBaseClass = null;
            return toolSettings;
        }
        #endregion
        #region ClientClassAccessModifier
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ClientClassAccessModifier"/></em></p>
        ///   <p>The client class access modifier (default: public).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetClientClassAccessModifier(this NSwagSwaggerToCSharpClientSettings toolSettings, string clientClassAccessModifier)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClientClassAccessModifier = clientClassAccessModifier;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ClientClassAccessModifier"/></em></p>
        ///   <p>The client class access modifier (default: public).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetClientClassAccessModifier(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClientClassAccessModifier = null;
            return toolSettings;
        }
        #endregion
        #region ConfigurationClass
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ConfigurationClass"/></em></p>
        ///   <p>The configuration class. The setting ClientBaseClass must be set. (empty for no configuration class).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetConfigurationClass(this NSwagSwaggerToCSharpClientSettings toolSettings, string configurationClass)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigurationClass = configurationClass;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ConfigurationClass"/></em></p>
        ///   <p>The configuration class. The setting ClientBaseClass must be set. (empty for no configuration class).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetConfigurationClass(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigurationClass = null;
            return toolSettings;
        }
        #endregion
        #region ContractsNamespace
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ContractsNamespace"/></em></p>
        ///   <p>The contracts .NET namespace.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetContractsNamespace(this NSwagSwaggerToCSharpClientSettings toolSettings, string contractsNamespace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContractsNamespace = contractsNamespace;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ContractsNamespace"/></em></p>
        ///   <p>The contracts .NET namespace.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetContractsNamespace(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContractsNamespace = null;
            return toolSettings;
        }
        #endregion
        #region ContractsOutput
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ContractsOutput"/></em></p>
        ///   <p>The contracts output file path (optional, if no path is set then a single file with the implementation and contracts is generated).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetContractsOutput(this NSwagSwaggerToCSharpClientSettings toolSettings, string contractsOutput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContractsOutput = contractsOutput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ContractsOutput"/></em></p>
        ///   <p>The contracts output file path (optional, if no path is set then a single file with the implementation and contracts is generated).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetContractsOutput(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContractsOutput = null;
            return toolSettings;
        }
        #endregion
        #region DisposeHttpClient
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.DisposeHttpClient"/></em></p>
        ///   <p>Specifies whether to dispose the HttpClient (injected HttpClient is never disposed).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetDisposeHttpClient(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? disposeHttpClient)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisposeHttpClient = disposeHttpClient;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.DisposeHttpClient"/></em></p>
        ///   <p>Specifies whether to dispose the HttpClient (injected HttpClient is never disposed).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetDisposeHttpClient(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisposeHttpClient = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.DisposeHttpClient"/></em></p>
        ///   <p>Specifies whether to dispose the HttpClient (injected HttpClient is never disposed).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableDisposeHttpClient(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisposeHttpClient = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.DisposeHttpClient"/></em></p>
        ///   <p>Specifies whether to dispose the HttpClient (injected HttpClient is never disposed).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableDisposeHttpClient(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisposeHttpClient = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.DisposeHttpClient"/></em></p>
        ///   <p>Specifies whether to dispose the HttpClient (injected HttpClient is never disposed).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleDisposeHttpClient(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisposeHttpClient = !toolSettings.DisposeHttpClient;
            return toolSettings;
        }
        #endregion
        #region ExceptionClass
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ExceptionClass"/></em></p>
        ///   <p>The exception class (default 'SwaggerException', may use '{controller}' placeholder).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetExceptionClass(this NSwagSwaggerToCSharpClientSettings toolSettings, string exceptionClass)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExceptionClass = exceptionClass;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ExceptionClass"/></em></p>
        ///   <p>The exception class (default 'SwaggerException', may use '{controller}' placeholder).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetExceptionClass(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExceptionClass = null;
            return toolSettings;
        }
        #endregion
        #region ExposeJsonSerializerSettings
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings"/></em></p>
        ///   <p>Specifies whether to expose the JsonSerializerSettings property (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetExposeJsonSerializerSettings(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? exposeJsonSerializerSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeJsonSerializerSettings = exposeJsonSerializerSettings;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings"/></em></p>
        ///   <p>Specifies whether to expose the JsonSerializerSettings property (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetExposeJsonSerializerSettings(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeJsonSerializerSettings = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings"/></em></p>
        ///   <p>Specifies whether to expose the JsonSerializerSettings property (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableExposeJsonSerializerSettings(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeJsonSerializerSettings = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings"/></em></p>
        ///   <p>Specifies whether to expose the JsonSerializerSettings property (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableExposeJsonSerializerSettings(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeJsonSerializerSettings = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.ExposeJsonSerializerSettings"/></em></p>
        ///   <p>Specifies whether to expose the JsonSerializerSettings property (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleExposeJsonSerializerSettings(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeJsonSerializerSettings = !toolSettings.ExposeJsonSerializerSettings;
            return toolSettings;
        }
        #endregion
        #region GenerateBaseUrlProperty
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty"/></em></p>
        ///   <p>Specifies whether to generate the BaseUrl property, must be defined on the base class otherwise (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetGenerateBaseUrlProperty(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? generateBaseUrlProperty)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateBaseUrlProperty = generateBaseUrlProperty;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty"/></em></p>
        ///   <p>Specifies whether to generate the BaseUrl property, must be defined on the base class otherwise (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetGenerateBaseUrlProperty(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateBaseUrlProperty = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty"/></em></p>
        ///   <p>Specifies whether to generate the BaseUrl property, must be defined on the base class otherwise (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableGenerateBaseUrlProperty(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateBaseUrlProperty = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty"/></em></p>
        ///   <p>Specifies whether to generate the BaseUrl property, must be defined on the base class otherwise (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableGenerateBaseUrlProperty(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateBaseUrlProperty = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.GenerateBaseUrlProperty"/></em></p>
        ///   <p>Specifies whether to generate the BaseUrl property, must be defined on the base class otherwise (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleGenerateBaseUrlProperty(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateBaseUrlProperty = !toolSettings.GenerateBaseUrlProperty;
            return toolSettings;
        }
        #endregion
        #region GenerateClientClasses
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientClasses"/></em></p>
        ///   <p>Specifies whether generate client classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetGenerateClientClasses(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? generateClientClasses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientClasses = generateClientClasses;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientClasses"/></em></p>
        ///   <p>Specifies whether generate client classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetGenerateClientClasses(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientClasses = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientClasses"/></em></p>
        ///   <p>Specifies whether generate client classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableGenerateClientClasses(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientClasses = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientClasses"/></em></p>
        ///   <p>Specifies whether generate client classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableGenerateClientClasses(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientClasses = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientClasses"/></em></p>
        ///   <p>Specifies whether generate client classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleGenerateClientClasses(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientClasses = !toolSettings.GenerateClientClasses;
            return toolSettings;
        }
        #endregion
        #region GenerateClientInterfaces
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces"/></em></p>
        ///   <p>Specifies whether generate interfaces for the client classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetGenerateClientInterfaces(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? generateClientInterfaces)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientInterfaces = generateClientInterfaces;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces"/></em></p>
        ///   <p>Specifies whether generate interfaces for the client classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetGenerateClientInterfaces(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientInterfaces = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces"/></em></p>
        ///   <p>Specifies whether generate interfaces for the client classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableGenerateClientInterfaces(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientInterfaces = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces"/></em></p>
        ///   <p>Specifies whether generate interfaces for the client classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableGenerateClientInterfaces(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientInterfaces = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.GenerateClientInterfaces"/></em></p>
        ///   <p>Specifies whether generate interfaces for the client classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleGenerateClientInterfaces(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientInterfaces = !toolSettings.GenerateClientInterfaces;
            return toolSettings;
        }
        #endregion
        #region GenerateContractsOutput
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput"/></em></p>
        ///   <p>Specifies whether to generate contracts output (interface and models in a separate file set with the ContractsOutput parameter).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetGenerateContractsOutput(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? generateContractsOutput)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateContractsOutput = generateContractsOutput;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput"/></em></p>
        ///   <p>Specifies whether to generate contracts output (interface and models in a separate file set with the ContractsOutput parameter).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetGenerateContractsOutput(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateContractsOutput = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput"/></em></p>
        ///   <p>Specifies whether to generate contracts output (interface and models in a separate file set with the ContractsOutput parameter).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableGenerateContractsOutput(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateContractsOutput = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput"/></em></p>
        ///   <p>Specifies whether to generate contracts output (interface and models in a separate file set with the ContractsOutput parameter).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableGenerateContractsOutput(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateContractsOutput = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.GenerateContractsOutput"/></em></p>
        ///   <p>Specifies whether to generate contracts output (interface and models in a separate file set with the ContractsOutput parameter).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleGenerateContractsOutput(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateContractsOutput = !toolSettings.GenerateContractsOutput;
            return toolSettings;
        }
        #endregion
        #region GenerateExceptionClasses
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses"/></em></p>
        ///   <p>Specifies whether to generate exception classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetGenerateExceptionClasses(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? generateExceptionClasses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateExceptionClasses = generateExceptionClasses;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses"/></em></p>
        ///   <p>Specifies whether to generate exception classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetGenerateExceptionClasses(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateExceptionClasses = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses"/></em></p>
        ///   <p>Specifies whether to generate exception classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableGenerateExceptionClasses(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateExceptionClasses = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses"/></em></p>
        ///   <p>Specifies whether to generate exception classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableGenerateExceptionClasses(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateExceptionClasses = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.GenerateExceptionClasses"/></em></p>
        ///   <p>Specifies whether to generate exception classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleGenerateExceptionClasses(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateExceptionClasses = !toolSettings.GenerateExceptionClasses;
            return toolSettings;
        }
        #endregion
        #region GenerateSyncMethods
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods"/></em></p>
        ///   <p>Specifies whether to generate synchronous methods (not recommended, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetGenerateSyncMethods(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? generateSyncMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateSyncMethods = generateSyncMethods;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods"/></em></p>
        ///   <p>Specifies whether to generate synchronous methods (not recommended, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetGenerateSyncMethods(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateSyncMethods = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods"/></em></p>
        ///   <p>Specifies whether to generate synchronous methods (not recommended, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableGenerateSyncMethods(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateSyncMethods = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods"/></em></p>
        ///   <p>Specifies whether to generate synchronous methods (not recommended, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableGenerateSyncMethods(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateSyncMethods = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.GenerateSyncMethods"/></em></p>
        ///   <p>Specifies whether to generate synchronous methods (not recommended, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleGenerateSyncMethods(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateSyncMethods = !toolSettings.GenerateSyncMethods;
            return toolSettings;
        }
        #endregion
        #region GenerateUpdateJsonSerializerSettingsMethod
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod"/></em></p>
        ///   <p>Generate the UpdateJsonSerializerSettings method (must be implemented in the base class otherwise, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetGenerateUpdateJsonSerializerSettingsMethod(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? generateUpdateJsonSerializerSettingsMethod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateUpdateJsonSerializerSettingsMethod = generateUpdateJsonSerializerSettingsMethod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod"/></em></p>
        ///   <p>Generate the UpdateJsonSerializerSettings method (must be implemented in the base class otherwise, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetGenerateUpdateJsonSerializerSettingsMethod(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateUpdateJsonSerializerSettingsMethod = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod"/></em></p>
        ///   <p>Generate the UpdateJsonSerializerSettings method (must be implemented in the base class otherwise, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableGenerateUpdateJsonSerializerSettingsMethod(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateUpdateJsonSerializerSettingsMethod = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod"/></em></p>
        ///   <p>Generate the UpdateJsonSerializerSettings method (must be implemented in the base class otherwise, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableGenerateUpdateJsonSerializerSettingsMethod(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateUpdateJsonSerializerSettingsMethod = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.GenerateUpdateJsonSerializerSettingsMethod"/></em></p>
        ///   <p>Generate the UpdateJsonSerializerSettings method (must be implemented in the base class otherwise, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleGenerateUpdateJsonSerializerSettingsMethod(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateUpdateJsonSerializerSettingsMethod = !toolSettings.GenerateUpdateJsonSerializerSettingsMethod;
            return toolSettings;
        }
        #endregion
        #region HttpClientType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.HttpClientType"/></em></p>
        ///   <p>Specifies the HttpClient type. By default the 'System.Net.Http.HttpClient' is used.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetHttpClientType(this NSwagSwaggerToCSharpClientSettings toolSettings, string httpClientType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpClientType = httpClientType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.HttpClientType"/></em></p>
        ///   <p>Specifies the HttpClient type. By default the 'System.Net.Http.HttpClient' is used.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetHttpClientType(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpClientType = null;
            return toolSettings;
        }
        #endregion
        #region InjectHttpClient
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.InjectHttpClient"/></em></p>
        ///   <p>Specifies whether an HttpClient instance is injected (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetInjectHttpClient(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? injectHttpClient)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InjectHttpClient = injectHttpClient;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.InjectHttpClient"/></em></p>
        ///   <p>Specifies whether an HttpClient instance is injected (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetInjectHttpClient(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InjectHttpClient = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.InjectHttpClient"/></em></p>
        ///   <p>Specifies whether an HttpClient instance is injected (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableInjectHttpClient(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InjectHttpClient = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.InjectHttpClient"/></em></p>
        ///   <p>Specifies whether an HttpClient instance is injected (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableInjectHttpClient(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InjectHttpClient = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.InjectHttpClient"/></em></p>
        ///   <p>Specifies whether an HttpClient instance is injected (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleInjectHttpClient(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InjectHttpClient = !toolSettings.InjectHttpClient;
            return toolSettings;
        }
        #endregion
        #region ParameterDateFormat
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDateFormat"/></em></p>
        ///   <p>Specifies the format for Date type method parameters (default: yyyy-MM-dd).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetParameterDateFormat(this NSwagSwaggerToCSharpClientSettings toolSettings, string parameterDateFormat)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterDateFormat = parameterDateFormat;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDateFormat"/></em></p>
        ///   <p>Specifies the format for Date type method parameters (default: yyyy-MM-dd).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetParameterDateFormat(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterDateFormat = null;
            return toolSettings;
        }
        #endregion
        #region ParameterDateTimeFormat
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDateTimeFormat"/></em></p>
        ///   <p>Specifies the format for DateTime type method parameters (default: s).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetParameterDateTimeFormat(this NSwagSwaggerToCSharpClientSettings toolSettings, string parameterDateTimeFormat)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterDateTimeFormat = parameterDateTimeFormat;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDateTimeFormat"/></em></p>
        ///   <p>Specifies the format for DateTime type method parameters (default: s).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetParameterDateTimeFormat(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterDateTimeFormat = null;
            return toolSettings;
        }
        #endregion
        #region ProtectedMethods
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/> to a new list</em></p>
        ///   <p>List of methods with a protected access modifier ('classname.methodname').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetProtectedMethods(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] protectedMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProtectedMethodsInternal = protectedMethods.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/> to a new list</em></p>
        ///   <p>List of methods with a protected access modifier ('classname.methodname').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetProtectedMethods(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> protectedMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProtectedMethodsInternal = protectedMethods.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/></em></p>
        ///   <p>List of methods with a protected access modifier ('classname.methodname').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings AddProtectedMethods(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] protectedMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProtectedMethodsInternal.AddRange(protectedMethods);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/></em></p>
        ///   <p>List of methods with a protected access modifier ('classname.methodname').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings AddProtectedMethods(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> protectedMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProtectedMethodsInternal.AddRange(protectedMethods);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/></em></p>
        ///   <p>List of methods with a protected access modifier ('classname.methodname').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ClearProtectedMethods(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProtectedMethodsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/></em></p>
        ///   <p>List of methods with a protected access modifier ('classname.methodname').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings RemoveProtectedMethods(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] protectedMethods)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(protectedMethods);
            toolSettings.ProtectedMethodsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpClientSettings.ProtectedMethods"/></em></p>
        ///   <p>List of methods with a protected access modifier ('classname.methodname').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings RemoveProtectedMethods(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> protectedMethods)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(protectedMethods);
            toolSettings.ProtectedMethodsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region QueryNullValue
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.QueryNullValue"/></em></p>
        ///   <p>The null value used for query parameters which are null (default: '').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetQueryNullValue(this NSwagSwaggerToCSharpClientSettings toolSettings, string queryNullValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueryNullValue = queryNullValue;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.QueryNullValue"/></em></p>
        ///   <p>The null value used for query parameters which are null (default: '').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetQueryNullValue(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueryNullValue = null;
            return toolSettings;
        }
        #endregion
        #region SerializeTypeInformation
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation"/></em></p>
        ///   <p>Serialize the type information in a $type property (not recommended, also sets TypeNameHandling = Auto, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetSerializeTypeInformation(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? serializeTypeInformation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SerializeTypeInformation = serializeTypeInformation;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation"/></em></p>
        ///   <p>Serialize the type information in a $type property (not recommended, also sets TypeNameHandling = Auto, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetSerializeTypeInformation(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SerializeTypeInformation = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation"/></em></p>
        ///   <p>Serialize the type information in a $type property (not recommended, also sets TypeNameHandling = Auto, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableSerializeTypeInformation(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SerializeTypeInformation = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation"/></em></p>
        ///   <p>Serialize the type information in a $type property (not recommended, also sets TypeNameHandling = Auto, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableSerializeTypeInformation(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SerializeTypeInformation = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.SerializeTypeInformation"/></em></p>
        ///   <p>Serialize the type information in a $type property (not recommended, also sets TypeNameHandling = Auto, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleSerializeTypeInformation(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SerializeTypeInformation = !toolSettings.SerializeTypeInformation;
            return toolSettings;
        }
        #endregion
        #region TypeAccessModifier
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.TypeAccessModifier"/></em></p>
        ///   <p>The DTO class/enum access modifier (default: public).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetTypeAccessModifier(this NSwagSwaggerToCSharpClientSettings toolSettings, string typeAccessModifier)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeAccessModifier = typeAccessModifier;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.TypeAccessModifier"/></em></p>
        ///   <p>The DTO class/enum access modifier (default: public).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetTypeAccessModifier(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeAccessModifier = null;
            return toolSettings;
        }
        #endregion
        #region UseBaseUrl
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.UseBaseUrl"/></em></p>
        ///   <p>Specifies whether to use and expose the base URL (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetUseBaseUrl(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? useBaseUrl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseBaseUrl = useBaseUrl;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.UseBaseUrl"/></em></p>
        ///   <p>Specifies whether to use and expose the base URL (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetUseBaseUrl(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseBaseUrl = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.UseBaseUrl"/></em></p>
        ///   <p>Specifies whether to use and expose the base URL (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableUseBaseUrl(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseBaseUrl = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.UseBaseUrl"/></em></p>
        ///   <p>Specifies whether to use and expose the base URL (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableUseBaseUrl(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseBaseUrl = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.UseBaseUrl"/></em></p>
        ///   <p>Specifies whether to use and expose the base URL (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleUseBaseUrl(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseBaseUrl = !toolSettings.UseBaseUrl;
            return toolSettings;
        }
        #endregion
        #region UseHttpClientCreationMethod
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod"/></em></p>
        ///   <p>Specifies whether to call CreateHttpClientAsync on the base class to create a new HttpClient.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetUseHttpClientCreationMethod(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? useHttpClientCreationMethod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseHttpClientCreationMethod = useHttpClientCreationMethod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod"/></em></p>
        ///   <p>Specifies whether to call CreateHttpClientAsync on the base class to create a new HttpClient.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetUseHttpClientCreationMethod(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseHttpClientCreationMethod = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod"/></em></p>
        ///   <p>Specifies whether to call CreateHttpClientAsync on the base class to create a new HttpClient.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableUseHttpClientCreationMethod(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseHttpClientCreationMethod = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod"/></em></p>
        ///   <p>Specifies whether to call CreateHttpClientAsync on the base class to create a new HttpClient.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableUseHttpClientCreationMethod(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseHttpClientCreationMethod = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpClientCreationMethod"/></em></p>
        ///   <p>Specifies whether to call CreateHttpClientAsync on the base class to create a new HttpClient.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleUseHttpClientCreationMethod(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseHttpClientCreationMethod = !toolSettings.UseHttpClientCreationMethod;
            return toolSettings;
        }
        #endregion
        #region UseHttpRequestMessageCreationMethod
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod"/></em></p>
        ///   <p>Specifies whether to call CreateHttpRequestMessageAsync on the base class to create a new HttpRequestMethod.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetUseHttpRequestMessageCreationMethod(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? useHttpRequestMessageCreationMethod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseHttpRequestMessageCreationMethod = useHttpRequestMessageCreationMethod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod"/></em></p>
        ///   <p>Specifies whether to call CreateHttpRequestMessageAsync on the base class to create a new HttpRequestMethod.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetUseHttpRequestMessageCreationMethod(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseHttpRequestMessageCreationMethod = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod"/></em></p>
        ///   <p>Specifies whether to call CreateHttpRequestMessageAsync on the base class to create a new HttpRequestMethod.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableUseHttpRequestMessageCreationMethod(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseHttpRequestMessageCreationMethod = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod"/></em></p>
        ///   <p>Specifies whether to call CreateHttpRequestMessageAsync on the base class to create a new HttpRequestMethod.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableUseHttpRequestMessageCreationMethod(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseHttpRequestMessageCreationMethod = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.UseHttpRequestMessageCreationMethod"/></em></p>
        ///   <p>Specifies whether to call CreateHttpRequestMessageAsync on the base class to create a new HttpRequestMethod.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleUseHttpRequestMessageCreationMethod(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseHttpRequestMessageCreationMethod = !toolSettings.UseHttpRequestMessageCreationMethod;
            return toolSettings;
        }
        #endregion
        #region WrapDtoExceptions
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions"/></em></p>
        ///   <p>Specifies whether DTO exceptions are wrapped in a SwaggerException instance (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetWrapDtoExceptions(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? wrapDtoExceptions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapDtoExceptions = wrapDtoExceptions;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions"/></em></p>
        ///   <p>Specifies whether DTO exceptions are wrapped in a SwaggerException instance (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetWrapDtoExceptions(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapDtoExceptions = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions"/></em></p>
        ///   <p>Specifies whether DTO exceptions are wrapped in a SwaggerException instance (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableWrapDtoExceptions(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapDtoExceptions = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions"/></em></p>
        ///   <p>Specifies whether DTO exceptions are wrapped in a SwaggerException instance (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableWrapDtoExceptions(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapDtoExceptions = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.WrapDtoExceptions"/></em></p>
        ///   <p>Specifies whether DTO exceptions are wrapped in a SwaggerException instance (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleWrapDtoExceptions(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapDtoExceptions = !toolSettings.WrapDtoExceptions;
            return toolSettings;
        }
        #endregion
        #region AdditionalContractNamespaceUsages
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/> to a new list</em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetAdditionalContractNamespaceUsages(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal = additionalContractNamespaceUsages.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/> to a new list</em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetAdditionalContractNamespaceUsages(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal = additionalContractNamespaceUsages.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings AddAdditionalContractNamespaceUsages(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal.AddRange(additionalContractNamespaceUsages);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings AddAdditionalContractNamespaceUsages(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal.AddRange(additionalContractNamespaceUsages);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ClearAdditionalContractNamespaceUsages(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings RemoveAdditionalContractNamespaceUsages(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(additionalContractNamespaceUsages);
            toolSettings.AdditionalContractNamespaceUsagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings RemoveAdditionalContractNamespaceUsages(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(additionalContractNamespaceUsages);
            toolSettings.AdditionalContractNamespaceUsagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AdditionalNamespaceUsages
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/> to a new list</em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetAdditionalNamespaceUsages(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal = additionalNamespaceUsages.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/> to a new list</em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetAdditionalNamespaceUsages(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal = additionalNamespaceUsages.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings AddAdditionalNamespaceUsages(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal.AddRange(additionalNamespaceUsages);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings AddAdditionalNamespaceUsages(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal.AddRange(additionalNamespaceUsages);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ClearAdditionalNamespaceUsages(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings RemoveAdditionalNamespaceUsages(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(additionalNamespaceUsages);
            toolSettings.AdditionalNamespaceUsagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpClientSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings RemoveAdditionalNamespaceUsages(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(additionalNamespaceUsages);
            toolSettings.AdditionalNamespaceUsagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AnyType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.AnyType"/></em></p>
        ///   <p>The any .NET type (default: 'object').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetAnyType(this NSwagSwaggerToCSharpClientSettings toolSettings, string anyType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AnyType = anyType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.AnyType"/></em></p>
        ///   <p>The any .NET type (default: 'object').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetAnyType(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AnyType = null;
            return toolSettings;
        }
        #endregion
        #region ArrayBaseType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ArrayBaseType"/></em></p>
        ///   <p>The generic array .NET type (default: 'Collection').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetArrayBaseType(this NSwagSwaggerToCSharpClientSettings toolSettings, string arrayBaseType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayBaseType = arrayBaseType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ArrayBaseType"/></em></p>
        ///   <p>The generic array .NET type (default: 'Collection').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetArrayBaseType(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayBaseType = null;
            return toolSettings;
        }
        #endregion
        #region ArrayInstanceType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ArrayInstanceType"/></em></p>
        ///   <p>The generic array .NET instance type (default: empty = ArrayType).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetArrayInstanceType(this NSwagSwaggerToCSharpClientSettings toolSettings, string arrayInstanceType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayInstanceType = arrayInstanceType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ArrayInstanceType"/></em></p>
        ///   <p>The generic array .NET instance type (default: empty = ArrayType).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetArrayInstanceType(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayInstanceType = null;
            return toolSettings;
        }
        #endregion
        #region ArrayType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ArrayType"/></em></p>
        ///   <p>The generic array .NET type (default: 'ICollection').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetArrayType(this NSwagSwaggerToCSharpClientSettings toolSettings, string arrayType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayType = arrayType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ArrayType"/></em></p>
        ///   <p>The generic array .NET type (default: 'ICollection').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetArrayType(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayType = null;
            return toolSettings;
        }
        #endregion
        #region ClassName
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ClassName"/></em></p>
        ///   <p>The class name of the generated client.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetClassName(this NSwagSwaggerToCSharpClientSettings toolSettings, string className)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassName = className;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ClassName"/></em></p>
        ///   <p>The class name of the generated client.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetClassName(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassName = null;
            return toolSettings;
        }
        #endregion
        #region ClassStyle
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ClassStyle"/></em></p>
        ///   <p>The CSharp class style, 'Poco' or 'Inpc' (default: 'Poco').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetClassStyle(this NSwagSwaggerToCSharpClientSettings toolSettings, CSharpClassStyle classStyle)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassStyle = classStyle;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ClassStyle"/></em></p>
        ///   <p>The CSharp class style, 'Poco' or 'Inpc' (default: 'Poco').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetClassStyle(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassStyle = null;
            return toolSettings;
        }
        #endregion
        #region DateTimeType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.DateTimeType"/></em></p>
        ///   <p>The date time .NET type (default: 'DateTimeOffset').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetDateTimeType(this NSwagSwaggerToCSharpClientSettings toolSettings, string dateTimeType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateTimeType = dateTimeType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.DateTimeType"/></em></p>
        ///   <p>The date time .NET type (default: 'DateTimeOffset').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetDateTimeType(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateTimeType = null;
            return toolSettings;
        }
        #endregion
        #region DateType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.DateType"/></em></p>
        ///   <p>The date .NET type (default: 'DateTimeOffset').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetDateType(this NSwagSwaggerToCSharpClientSettings toolSettings, string dateType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateType = dateType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.DateType"/></em></p>
        ///   <p>The date .NET type (default: 'DateTimeOffset').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetDateType(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateType = null;
            return toolSettings;
        }
        #endregion
        #region DictionaryBaseType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryBaseType"/></em></p>
        ///   <p>The generic dictionary .NET type (default: 'Dictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetDictionaryBaseType(this NSwagSwaggerToCSharpClientSettings toolSettings, string dictionaryBaseType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryBaseType = dictionaryBaseType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryBaseType"/></em></p>
        ///   <p>The generic dictionary .NET type (default: 'Dictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetDictionaryBaseType(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryBaseType = null;
            return toolSettings;
        }
        #endregion
        #region DictionaryInstanceType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryInstanceType"/></em></p>
        ///   <p>The generic dictionary .NET instance type (default: empty = DictionaryType).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetDictionaryInstanceType(this NSwagSwaggerToCSharpClientSettings toolSettings, string dictionaryInstanceType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryInstanceType = dictionaryInstanceType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryInstanceType"/></em></p>
        ///   <p>The generic dictionary .NET instance type (default: empty = DictionaryType).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetDictionaryInstanceType(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryInstanceType = null;
            return toolSettings;
        }
        #endregion
        #region DictionaryType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetDictionaryType(this NSwagSwaggerToCSharpClientSettings toolSettings, string dictionaryType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryType = dictionaryType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.DictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetDictionaryType(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryType = null;
            return toolSettings;
        }
        #endregion
        #region EnforceFlagEnums
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetEnforceFlagEnums(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? enforceFlagEnums)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = enforceFlagEnums;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetEnforceFlagEnums(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableEnforceFlagEnums(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableEnforceFlagEnums(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleEnforceFlagEnums(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = !toolSettings.EnforceFlagEnums;
            return toolSettings;
        }
        #endregion
        #region ExcludedParameterNames
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/> to a new list</em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetExcludedParameterNames(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal = excludedParameterNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/> to a new list</em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetExcludedParameterNames(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal = excludedParameterNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings AddExcludedParameterNames(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal.AddRange(excludedParameterNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings AddExcludedParameterNames(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal.AddRange(excludedParameterNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ClearExcludedParameterNames(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings RemoveExcludedParameterNames(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedParameterNames);
            toolSettings.ExcludedParameterNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings RemoveExcludedParameterNames(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedParameterNames);
            toolSettings.ExcludedParameterNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ExcludedTypeNames
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/> to a new list</em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetExcludedTypeNames(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal = excludedTypeNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/> to a new list</em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetExcludedTypeNames(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal = excludedTypeNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings AddExcludedTypeNames(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.AddRange(excludedTypeNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings AddExcludedTypeNames(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.AddRange(excludedTypeNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ClearExcludedTypeNames(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings RemoveExcludedTypeNames(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedTypeNames);
            toolSettings.ExcludedTypeNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpClientSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings RemoveExcludedTypeNames(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedTypeNames);
            toolSettings.ExcludedTypeNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region GenerateDataAnnotations
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetGenerateDataAnnotations(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? generateDataAnnotations)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = generateDataAnnotations;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetGenerateDataAnnotations(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableGenerateDataAnnotations(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableGenerateDataAnnotations(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleGenerateDataAnnotations(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = !toolSettings.GenerateDataAnnotations;
            return toolSettings;
        }
        #endregion
        #region GenerateDefaultValues
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetGenerateDefaultValues(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? generateDefaultValues)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = generateDefaultValues;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetGenerateDefaultValues(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableGenerateDefaultValues(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableGenerateDefaultValues(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleGenerateDefaultValues(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = !toolSettings.GenerateDefaultValues;
            return toolSettings;
        }
        #endregion
        #region GenerateDtoTypes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetGenerateDtoTypes(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? generateDtoTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = generateDtoTypes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetGenerateDtoTypes(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableGenerateDtoTypes(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableGenerateDtoTypes(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleGenerateDtoTypes(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = !toolSettings.GenerateDtoTypes;
            return toolSettings;
        }
        #endregion
        #region GenerateImmutableArrayProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetGenerateImmutableArrayProperties(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? generateImmutableArrayProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = generateImmutableArrayProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetGenerateImmutableArrayProperties(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableGenerateImmutableArrayProperties(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableGenerateImmutableArrayProperties(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleGenerateImmutableArrayProperties(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = !toolSettings.GenerateImmutableArrayProperties;
            return toolSettings;
        }
        #endregion
        #region GenerateImmutableDictionaryProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetGenerateImmutableDictionaryProperties(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? generateImmutableDictionaryProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = generateImmutableDictionaryProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetGenerateImmutableDictionaryProperties(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableGenerateImmutableDictionaryProperties(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableGenerateImmutableDictionaryProperties(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleGenerateImmutableDictionaryProperties(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = !toolSettings.GenerateImmutableDictionaryProperties;
            return toolSettings;
        }
        #endregion
        #region GenerateJsonMethods
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetGenerateJsonMethods(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? generateJsonMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = generateJsonMethods;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetGenerateJsonMethods(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableGenerateJsonMethods(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableGenerateJsonMethods(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleGenerateJsonMethods(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = !toolSettings.GenerateJsonMethods;
            return toolSettings;
        }
        #endregion
        #region GenerateOptionalParameters
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetGenerateOptionalParameters(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? generateOptionalParameters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = generateOptionalParameters;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetGenerateOptionalParameters(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableGenerateOptionalParameters(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableGenerateOptionalParameters(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleGenerateOptionalParameters(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = !toolSettings.GenerateOptionalParameters;
            return toolSettings;
        }
        #endregion
        #region GenerateOptionalPropertiesAsNullable
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetGenerateOptionalPropertiesAsNullable(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? generateOptionalPropertiesAsNullable)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = generateOptionalPropertiesAsNullable;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetGenerateOptionalPropertiesAsNullable(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableGenerateOptionalPropertiesAsNullable(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableGenerateOptionalPropertiesAsNullable(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleGenerateOptionalPropertiesAsNullable(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = !toolSettings.GenerateOptionalPropertiesAsNullable;
            return toolSettings;
        }
        #endregion
        #region GenerateResponseClasses
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetGenerateResponseClasses(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? generateResponseClasses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = generateResponseClasses;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetGenerateResponseClasses(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableGenerateResponseClasses(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableGenerateResponseClasses(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleGenerateResponseClasses(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = !toolSettings.GenerateResponseClasses;
            return toolSettings;
        }
        #endregion
        #region HandleReferences
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetHandleReferences(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? handleReferences)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = handleReferences;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetHandleReferences(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableHandleReferences(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableHandleReferences(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleHandleReferences(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = !toolSettings.HandleReferences;
            return toolSettings;
        }
        #endregion
        #region InlineNamedAny
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetInlineNamedAny(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? inlineNamedAny)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = inlineNamedAny;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetInlineNamedAny(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableInlineNamedAny(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableInlineNamedAny(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleInlineNamedAny(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = !toolSettings.InlineNamedAny;
            return toolSettings;
        }
        #endregion
        #region InlineNamedArrays
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetInlineNamedArrays(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? inlineNamedArrays)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = inlineNamedArrays;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetInlineNamedArrays(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableInlineNamedArrays(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableInlineNamedArrays(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleInlineNamedArrays(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = !toolSettings.InlineNamedArrays;
            return toolSettings;
        }
        #endregion
        #region InlineNamedDictionaries
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetInlineNamedDictionaries(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? inlineNamedDictionaries)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = inlineNamedDictionaries;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetInlineNamedDictionaries(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableInlineNamedDictionaries(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableInlineNamedDictionaries(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleInlineNamedDictionaries(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = !toolSettings.InlineNamedDictionaries;
            return toolSettings;
        }
        #endregion
        #region InlineNamedTuples
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetInlineNamedTuples(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? inlineNamedTuples)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = inlineNamedTuples;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetInlineNamedTuples(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableInlineNamedTuples(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableInlineNamedTuples(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleInlineNamedTuples(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = !toolSettings.InlineNamedTuples;
            return toolSettings;
        }
        #endregion
        #region JsonConverters
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/> to a new list</em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetJsonConverters(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal = jsonConverters.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/> to a new list</em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetJsonConverters(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal = jsonConverters.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings AddJsonConverters(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal.AddRange(jsonConverters);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings AddJsonConverters(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal.AddRange(jsonConverters);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ClearJsonConverters(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings RemoveJsonConverters(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(jsonConverters);
            toolSettings.JsonConvertersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpClientSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings RemoveJsonConverters(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(jsonConverters);
            toolSettings.JsonConvertersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region JsonSerializerSettingsTransformationMethod
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/></em></p>
        ///   <p>The name of a static method which is called to transform the JsonSerializerSettings used in the generated ToJson()/FromJson() methods (default: none).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetJsonSerializerSettingsTransformationMethod(this NSwagSwaggerToCSharpClientSettings toolSettings, string jsonSerializerSettingsTransformationMethod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonSerializerSettingsTransformationMethod = jsonSerializerSettingsTransformationMethod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.JsonSerializerSettingsTransformationMethod"/></em></p>
        ///   <p>The name of a static method which is called to transform the JsonSerializerSettings used in the generated ToJson()/FromJson() methods (default: none).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetJsonSerializerSettingsTransformationMethod(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonSerializerSettingsTransformationMethod = null;
            return toolSettings;
        }
        #endregion
        #region Namespace
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.Namespace"/></em></p>
        ///   <p>The namespace of the generated classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetNamespace(this NSwagSwaggerToCSharpClientSettings toolSettings, string @namespace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = @namespace;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.Namespace"/></em></p>
        ///   <p>The namespace of the generated classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetNamespace(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = null;
            return toolSettings;
        }
        #endregion
        #region OperationGenerationMode
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.OperationGenerationMode"/></em></p>
        ///   <p>The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetOperationGenerationMode(this NSwagSwaggerToCSharpClientSettings toolSettings, OperationGenerationMode operationGenerationMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationGenerationMode = operationGenerationMode;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.OperationGenerationMode"/></em></p>
        ///   <p>The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetOperationGenerationMode(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationGenerationMode = null;
            return toolSettings;
        }
        #endregion
        #region ParameterArrayType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ParameterArrayType"/></em></p>
        ///   <p>The generic array .NET type of operation parameters (default: 'IEnumerable').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetParameterArrayType(this NSwagSwaggerToCSharpClientSettings toolSettings, string parameterArrayType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterArrayType = parameterArrayType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ParameterArrayType"/></em></p>
        ///   <p>The generic array .NET type of operation parameters (default: 'IEnumerable').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetParameterArrayType(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterArrayType = null;
            return toolSettings;
        }
        #endregion
        #region ParameterDictionaryType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type of operation parameters (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetParameterDictionaryType(this NSwagSwaggerToCSharpClientSettings toolSettings, string parameterDictionaryType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterDictionaryType = parameterDictionaryType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ParameterDictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type of operation parameters (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetParameterDictionaryType(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterDictionaryType = null;
            return toolSettings;
        }
        #endregion
        #region RequiredPropertiesMustBeDefined
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetRequiredPropertiesMustBeDefined(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? requiredPropertiesMustBeDefined)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = requiredPropertiesMustBeDefined;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetRequiredPropertiesMustBeDefined(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableRequiredPropertiesMustBeDefined(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableRequiredPropertiesMustBeDefined(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleRequiredPropertiesMustBeDefined(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = !toolSettings.RequiredPropertiesMustBeDefined;
            return toolSettings;
        }
        #endregion
        #region ResponseArrayType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ResponseArrayType"/></em></p>
        ///   <p>The generic array .NET type of operation responses (default: 'ICollection').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetResponseArrayType(this NSwagSwaggerToCSharpClientSettings toolSettings, string responseArrayType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseArrayType = responseArrayType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ResponseArrayType"/></em></p>
        ///   <p>The generic array .NET type of operation responses (default: 'ICollection').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetResponseArrayType(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseArrayType = null;
            return toolSettings;
        }
        #endregion
        #region ResponseClass
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ResponseClass"/></em></p>
        ///   <p>The response class (default 'SwaggerResponse', may use '{controller}' placeholder).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetResponseClass(this NSwagSwaggerToCSharpClientSettings toolSettings, string responseClass)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseClass = responseClass;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ResponseClass"/></em></p>
        ///   <p>The response class (default 'SwaggerResponse', may use '{controller}' placeholder).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetResponseClass(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseClass = null;
            return toolSettings;
        }
        #endregion
        #region ResponseDictionaryType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ResponseDictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type of operation responses (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetResponseDictionaryType(this NSwagSwaggerToCSharpClientSettings toolSettings, string responseDictionaryType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseDictionaryType = responseDictionaryType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ResponseDictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type of operation responses (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetResponseDictionaryType(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseDictionaryType = null;
            return toolSettings;
        }
        #endregion
        #region TimeSpanType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.TimeSpanType"/></em></p>
        ///   <p>The time span .NET type (default: 'TimeSpan').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetTimeSpanType(this NSwagSwaggerToCSharpClientSettings toolSettings, string timeSpanType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TimeSpanType = timeSpanType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.TimeSpanType"/></em></p>
        ///   <p>The time span .NET type (default: 'TimeSpan').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetTimeSpanType(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TimeSpanType = null;
            return toolSettings;
        }
        #endregion
        #region TimeType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.TimeType"/></em></p>
        ///   <p>The time .NET type (default: 'TimeSpan').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetTimeType(this NSwagSwaggerToCSharpClientSettings toolSettings, string timeType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TimeType = timeType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.TimeType"/></em></p>
        ///   <p>The time .NET type (default: 'TimeSpan').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetTimeType(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TimeType = null;
            return toolSettings;
        }
        #endregion
        #region WrapResponseMethods
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/> to a new list</em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetWrapResponseMethods(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal = wrapResponseMethods.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/> to a new list</em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetWrapResponseMethods(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal = wrapResponseMethods.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings AddWrapResponseMethods(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal.AddRange(wrapResponseMethods);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings AddWrapResponseMethods(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal.AddRange(wrapResponseMethods);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ClearWrapResponseMethods(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings RemoveWrapResponseMethods(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(wrapResponseMethods);
            toolSettings.WrapResponseMethodsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings RemoveWrapResponseMethods(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(wrapResponseMethods);
            toolSettings.WrapResponseMethodsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region WrapResponses
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetWrapResponses(this NSwagSwaggerToCSharpClientSettings toolSettings, bool? wrapResponses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = wrapResponses;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetWrapResponses(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings EnableWrapResponses(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings DisableWrapResponses(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpClientSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ToggleWrapResponses(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = !toolSettings.WrapResponses;
            return toolSettings;
        }
        #endregion
        #region EnumNameGeneratorType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.EnumNameGeneratorType"/></em></p>
        ///   <p>The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetEnumNameGeneratorType(this NSwagSwaggerToCSharpClientSettings toolSettings, string enumNameGeneratorType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnumNameGeneratorType = enumNameGeneratorType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.EnumNameGeneratorType"/></em></p>
        ///   <p>The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetEnumNameGeneratorType(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnumNameGeneratorType = null;
            return toolSettings;
        }
        #endregion
        #region PropertyNameGeneratorType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.PropertyNameGeneratorType"/></em></p>
        ///   <p>The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetPropertyNameGeneratorType(this NSwagSwaggerToCSharpClientSettings toolSettings, string propertyNameGeneratorType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PropertyNameGeneratorType = propertyNameGeneratorType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.PropertyNameGeneratorType"/></em></p>
        ///   <p>The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetPropertyNameGeneratorType(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PropertyNameGeneratorType = null;
            return toolSettings;
        }
        #endregion
        #region TemplateDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.TemplateDirectory"/></em></p>
        ///   <p>The Liquid template directory (experimental).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetTemplateDirectory(this NSwagSwaggerToCSharpClientSettings toolSettings, string templateDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TemplateDirectory = templateDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.TemplateDirectory"/></em></p>
        ///   <p>The Liquid template directory (experimental).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetTemplateDirectory(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TemplateDirectory = null;
            return toolSettings;
        }
        #endregion
        #region TypeNameGenerator
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetTypeNameGenerator(this NSwagSwaggerToCSharpClientSettings toolSettings, string typeNameGenerator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = typeNameGenerator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetTypeNameGenerator(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = null;
            return toolSettings;
        }
        #endregion
        #region Input
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.Input"/></em></p>
        ///   <p>A file path or URL to the data or the JSON data itself.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetInput(this NSwagSwaggerToCSharpClientSettings toolSettings, string input)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = input;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.Input"/></em></p>
        ///   <p>A file path or URL to the data or the JSON data itself.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetInput(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = null;
            return toolSettings;
        }
        #endregion
        #region ServiceHost
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web document (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetServiceHost(this NSwagSwaggerToCSharpClientSettings toolSettings, string serviceHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = serviceHost;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web document (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetServiceHost(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = null;
            return toolSettings;
        }
        #endregion
        #region ServiceSchemes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetServiceSchemes(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetServiceSchemes(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings AddServiceSchemes(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings AddServiceSchemes(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ClearServiceSchemes(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings RemoveServiceSchemes(this NSwagSwaggerToCSharpClientSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings RemoveServiceSchemes(this NSwagSwaggerToCSharpClientSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpClientSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings SetOutput(this NSwagSwaggerToCSharpClientSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpClientSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpClientSettings ResetOutput(this NSwagSwaggerToCSharpClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region NSwagOpenApiToCSharpControllerSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagOpenApiToCSharpControllerSettingsExtensions
    {
        #region AdditionalContractNamespaceUsages
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/> to a new list</em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetAdditionalContractNamespaceUsages(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal = additionalContractNamespaceUsages.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/> to a new list</em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetAdditionalContractNamespaceUsages(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal = additionalContractNamespaceUsages.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings AddAdditionalContractNamespaceUsages(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal.AddRange(additionalContractNamespaceUsages);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings AddAdditionalContractNamespaceUsages(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal.AddRange(additionalContractNamespaceUsages);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ClearAdditionalContractNamespaceUsages(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings RemoveAdditionalContractNamespaceUsages(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(additionalContractNamespaceUsages);
            toolSettings.AdditionalContractNamespaceUsagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings RemoveAdditionalContractNamespaceUsages(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(additionalContractNamespaceUsages);
            toolSettings.AdditionalContractNamespaceUsagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AdditionalNamespaceUsages
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/> to a new list</em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetAdditionalNamespaceUsages(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal = additionalNamespaceUsages.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/> to a new list</em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetAdditionalNamespaceUsages(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal = additionalNamespaceUsages.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings AddAdditionalNamespaceUsages(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal.AddRange(additionalNamespaceUsages);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings AddAdditionalNamespaceUsages(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal.AddRange(additionalNamespaceUsages);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ClearAdditionalNamespaceUsages(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings RemoveAdditionalNamespaceUsages(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(additionalNamespaceUsages);
            toolSettings.AdditionalNamespaceUsagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpControllerSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings RemoveAdditionalNamespaceUsages(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(additionalNamespaceUsages);
            toolSettings.AdditionalNamespaceUsagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AnyType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.AnyType"/></em></p>
        ///   <p>The any .NET type (default: 'object').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetAnyType(this NSwagOpenApiToCSharpControllerSettings toolSettings, string anyType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AnyType = anyType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.AnyType"/></em></p>
        ///   <p>The any .NET type (default: 'object').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetAnyType(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AnyType = null;
            return toolSettings;
        }
        #endregion
        #region ArrayBaseType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayBaseType"/></em></p>
        ///   <p>The generic array .NET type (default: 'Collection').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetArrayBaseType(this NSwagOpenApiToCSharpControllerSettings toolSettings, string arrayBaseType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayBaseType = arrayBaseType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayBaseType"/></em></p>
        ///   <p>The generic array .NET type (default: 'Collection').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetArrayBaseType(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayBaseType = null;
            return toolSettings;
        }
        #endregion
        #region ArrayInstanceType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayInstanceType"/></em></p>
        ///   <p>The generic array .NET instance type (default: empty = ArrayType).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetArrayInstanceType(this NSwagOpenApiToCSharpControllerSettings toolSettings, string arrayInstanceType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayInstanceType = arrayInstanceType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayInstanceType"/></em></p>
        ///   <p>The generic array .NET instance type (default: empty = ArrayType).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetArrayInstanceType(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayInstanceType = null;
            return toolSettings;
        }
        #endregion
        #region ArrayType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayType"/></em></p>
        ///   <p>The generic array .NET type (default: 'ICollection').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetArrayType(this NSwagOpenApiToCSharpControllerSettings toolSettings, string arrayType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayType = arrayType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.ArrayType"/></em></p>
        ///   <p>The generic array .NET type (default: 'ICollection').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetArrayType(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayType = null;
            return toolSettings;
        }
        #endregion
        #region ClassName
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.ClassName"/></em></p>
        ///   <p>The class name of the generated client.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetClassName(this NSwagOpenApiToCSharpControllerSettings toolSettings, string className)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassName = className;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.ClassName"/></em></p>
        ///   <p>The class name of the generated client.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetClassName(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassName = null;
            return toolSettings;
        }
        #endregion
        #region ClassStyle
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.ClassStyle"/></em></p>
        ///   <p>The CSharp class style, 'Poco' or 'Inpc' (default: 'Poco').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetClassStyle(this NSwagOpenApiToCSharpControllerSettings toolSettings, CSharpClassStyle classStyle)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassStyle = classStyle;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.ClassStyle"/></em></p>
        ///   <p>The CSharp class style, 'Poco' or 'Inpc' (default: 'Poco').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetClassStyle(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassStyle = null;
            return toolSettings;
        }
        #endregion
        #region DateTimeType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.DateTimeType"/></em></p>
        ///   <p>The date time .NET type (default: 'DateTimeOffset').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetDateTimeType(this NSwagOpenApiToCSharpControllerSettings toolSettings, string dateTimeType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateTimeType = dateTimeType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.DateTimeType"/></em></p>
        ///   <p>The date time .NET type (default: 'DateTimeOffset').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetDateTimeType(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateTimeType = null;
            return toolSettings;
        }
        #endregion
        #region DateType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.DateType"/></em></p>
        ///   <p>The date .NET type (default: 'DateTimeOffset').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetDateType(this NSwagOpenApiToCSharpControllerSettings toolSettings, string dateType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateType = dateType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.DateType"/></em></p>
        ///   <p>The date .NET type (default: 'DateTimeOffset').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetDateType(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateType = null;
            return toolSettings;
        }
        #endregion
        #region DictionaryBaseType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryBaseType"/></em></p>
        ///   <p>The generic dictionary .NET type (default: 'Dictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetDictionaryBaseType(this NSwagOpenApiToCSharpControllerSettings toolSettings, string dictionaryBaseType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryBaseType = dictionaryBaseType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryBaseType"/></em></p>
        ///   <p>The generic dictionary .NET type (default: 'Dictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetDictionaryBaseType(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryBaseType = null;
            return toolSettings;
        }
        #endregion
        #region DictionaryInstanceType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryInstanceType"/></em></p>
        ///   <p>The generic dictionary .NET instance type (default: empty = DictionaryType).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetDictionaryInstanceType(this NSwagOpenApiToCSharpControllerSettings toolSettings, string dictionaryInstanceType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryInstanceType = dictionaryInstanceType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryInstanceType"/></em></p>
        ///   <p>The generic dictionary .NET instance type (default: empty = DictionaryType).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetDictionaryInstanceType(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryInstanceType = null;
            return toolSettings;
        }
        #endregion
        #region DictionaryType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetDictionaryType(this NSwagOpenApiToCSharpControllerSettings toolSettings, string dictionaryType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryType = dictionaryType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.DictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetDictionaryType(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryType = null;
            return toolSettings;
        }
        #endregion
        #region EnforceFlagEnums
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetEnforceFlagEnums(this NSwagOpenApiToCSharpControllerSettings toolSettings, bool? enforceFlagEnums)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = enforceFlagEnums;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetEnforceFlagEnums(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings EnableEnforceFlagEnums(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings DisableEnforceFlagEnums(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpControllerSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ToggleEnforceFlagEnums(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = !toolSettings.EnforceFlagEnums;
            return toolSettings;
        }
        #endregion
        #region ExcludedParameterNames
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/> to a new list</em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetExcludedParameterNames(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal = excludedParameterNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/> to a new list</em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetExcludedParameterNames(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal = excludedParameterNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings AddExcludedParameterNames(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal.AddRange(excludedParameterNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings AddExcludedParameterNames(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal.AddRange(excludedParameterNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ClearExcludedParameterNames(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings RemoveExcludedParameterNames(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedParameterNames);
            toolSettings.ExcludedParameterNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings RemoveExcludedParameterNames(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedParameterNames);
            toolSettings.ExcludedParameterNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ExcludedTypeNames
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/> to a new list</em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetExcludedTypeNames(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal = excludedTypeNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/> to a new list</em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetExcludedTypeNames(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal = excludedTypeNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings AddExcludedTypeNames(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.AddRange(excludedTypeNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings AddExcludedTypeNames(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.AddRange(excludedTypeNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ClearExcludedTypeNames(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings RemoveExcludedTypeNames(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedTypeNames);
            toolSettings.ExcludedTypeNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpControllerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings RemoveExcludedTypeNames(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedTypeNames);
            toolSettings.ExcludedTypeNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region GenerateDataAnnotations
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetGenerateDataAnnotations(this NSwagOpenApiToCSharpControllerSettings toolSettings, bool? generateDataAnnotations)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = generateDataAnnotations;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetGenerateDataAnnotations(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings EnableGenerateDataAnnotations(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings DisableGenerateDataAnnotations(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ToggleGenerateDataAnnotations(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = !toolSettings.GenerateDataAnnotations;
            return toolSettings;
        }
        #endregion
        #region GenerateDefaultValues
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetGenerateDefaultValues(this NSwagOpenApiToCSharpControllerSettings toolSettings, bool? generateDefaultValues)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = generateDefaultValues;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetGenerateDefaultValues(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings EnableGenerateDefaultValues(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings DisableGenerateDefaultValues(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ToggleGenerateDefaultValues(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = !toolSettings.GenerateDefaultValues;
            return toolSettings;
        }
        #endregion
        #region GenerateDtoTypes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetGenerateDtoTypes(this NSwagOpenApiToCSharpControllerSettings toolSettings, bool? generateDtoTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = generateDtoTypes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetGenerateDtoTypes(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings EnableGenerateDtoTypes(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings DisableGenerateDtoTypes(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ToggleGenerateDtoTypes(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = !toolSettings.GenerateDtoTypes;
            return toolSettings;
        }
        #endregion
        #region GenerateImmutableArrayProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetGenerateImmutableArrayProperties(this NSwagOpenApiToCSharpControllerSettings toolSettings, bool? generateImmutableArrayProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = generateImmutableArrayProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetGenerateImmutableArrayProperties(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings EnableGenerateImmutableArrayProperties(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings DisableGenerateImmutableArrayProperties(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ToggleGenerateImmutableArrayProperties(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = !toolSettings.GenerateImmutableArrayProperties;
            return toolSettings;
        }
        #endregion
        #region GenerateImmutableDictionaryProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetGenerateImmutableDictionaryProperties(this NSwagOpenApiToCSharpControllerSettings toolSettings, bool? generateImmutableDictionaryProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = generateImmutableDictionaryProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetGenerateImmutableDictionaryProperties(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings EnableGenerateImmutableDictionaryProperties(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings DisableGenerateImmutableDictionaryProperties(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ToggleGenerateImmutableDictionaryProperties(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = !toolSettings.GenerateImmutableDictionaryProperties;
            return toolSettings;
        }
        #endregion
        #region GenerateJsonMethods
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetGenerateJsonMethods(this NSwagOpenApiToCSharpControllerSettings toolSettings, bool? generateJsonMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = generateJsonMethods;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetGenerateJsonMethods(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings EnableGenerateJsonMethods(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings DisableGenerateJsonMethods(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ToggleGenerateJsonMethods(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = !toolSettings.GenerateJsonMethods;
            return toolSettings;
        }
        #endregion
        #region GenerateOptionalParameters
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetGenerateOptionalParameters(this NSwagOpenApiToCSharpControllerSettings toolSettings, bool? generateOptionalParameters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = generateOptionalParameters;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetGenerateOptionalParameters(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings EnableGenerateOptionalParameters(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings DisableGenerateOptionalParameters(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ToggleGenerateOptionalParameters(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = !toolSettings.GenerateOptionalParameters;
            return toolSettings;
        }
        #endregion
        #region GenerateOptionalPropertiesAsNullable
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetGenerateOptionalPropertiesAsNullable(this NSwagOpenApiToCSharpControllerSettings toolSettings, bool? generateOptionalPropertiesAsNullable)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = generateOptionalPropertiesAsNullable;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetGenerateOptionalPropertiesAsNullable(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings EnableGenerateOptionalPropertiesAsNullable(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings DisableGenerateOptionalPropertiesAsNullable(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ToggleGenerateOptionalPropertiesAsNullable(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = !toolSettings.GenerateOptionalPropertiesAsNullable;
            return toolSettings;
        }
        #endregion
        #region GenerateResponseClasses
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetGenerateResponseClasses(this NSwagOpenApiToCSharpControllerSettings toolSettings, bool? generateResponseClasses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = generateResponseClasses;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetGenerateResponseClasses(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings EnableGenerateResponseClasses(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings DisableGenerateResponseClasses(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpControllerSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ToggleGenerateResponseClasses(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = !toolSettings.GenerateResponseClasses;
            return toolSettings;
        }
        #endregion
        #region HandleReferences
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetHandleReferences(this NSwagOpenApiToCSharpControllerSettings toolSettings, bool? handleReferences)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = handleReferences;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetHandleReferences(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpControllerSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings EnableHandleReferences(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpControllerSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings DisableHandleReferences(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpControllerSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ToggleHandleReferences(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = !toolSettings.HandleReferences;
            return toolSettings;
        }
        #endregion
        #region InlineNamedAny
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetInlineNamedAny(this NSwagOpenApiToCSharpControllerSettings toolSettings, bool? inlineNamedAny)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = inlineNamedAny;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetInlineNamedAny(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings EnableInlineNamedAny(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings DisableInlineNamedAny(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ToggleInlineNamedAny(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = !toolSettings.InlineNamedAny;
            return toolSettings;
        }
        #endregion
        #region InlineNamedArrays
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetInlineNamedArrays(this NSwagOpenApiToCSharpControllerSettings toolSettings, bool? inlineNamedArrays)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = inlineNamedArrays;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetInlineNamedArrays(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings EnableInlineNamedArrays(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings DisableInlineNamedArrays(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ToggleInlineNamedArrays(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = !toolSettings.InlineNamedArrays;
            return toolSettings;
        }
        #endregion
        #region InlineNamedDictionaries
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetInlineNamedDictionaries(this NSwagOpenApiToCSharpControllerSettings toolSettings, bool? inlineNamedDictionaries)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = inlineNamedDictionaries;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetInlineNamedDictionaries(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings EnableInlineNamedDictionaries(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings DisableInlineNamedDictionaries(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ToggleInlineNamedDictionaries(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = !toolSettings.InlineNamedDictionaries;
            return toolSettings;
        }
        #endregion
        #region InlineNamedTuples
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetInlineNamedTuples(this NSwagOpenApiToCSharpControllerSettings toolSettings, bool? inlineNamedTuples)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = inlineNamedTuples;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetInlineNamedTuples(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings EnableInlineNamedTuples(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings DisableInlineNamedTuples(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpControllerSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ToggleInlineNamedTuples(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = !toolSettings.InlineNamedTuples;
            return toolSettings;
        }
        #endregion
        #region JsonConverters
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/> to a new list</em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetJsonConverters(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal = jsonConverters.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/> to a new list</em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetJsonConverters(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal = jsonConverters.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings AddJsonConverters(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal.AddRange(jsonConverters);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings AddJsonConverters(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal.AddRange(jsonConverters);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ClearJsonConverters(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings RemoveJsonConverters(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(jsonConverters);
            toolSettings.JsonConvertersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpControllerSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings RemoveJsonConverters(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(jsonConverters);
            toolSettings.JsonConvertersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region JsonSerializerSettingsTransformationMethod
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/></em></p>
        ///   <p>The name of a static method which is called to transform the JsonSerializerSettings used in the generated ToJson()/FromJson() methods (default: none).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetJsonSerializerSettingsTransformationMethod(this NSwagOpenApiToCSharpControllerSettings toolSettings, string jsonSerializerSettingsTransformationMethod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonSerializerSettingsTransformationMethod = jsonSerializerSettingsTransformationMethod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/></em></p>
        ///   <p>The name of a static method which is called to transform the JsonSerializerSettings used in the generated ToJson()/FromJson() methods (default: none).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetJsonSerializerSettingsTransformationMethod(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonSerializerSettingsTransformationMethod = null;
            return toolSettings;
        }
        #endregion
        #region Namespace
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.Namespace"/></em></p>
        ///   <p>The namespace of the generated classes.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetNamespace(this NSwagOpenApiToCSharpControllerSettings toolSettings, string @namespace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = @namespace;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.Namespace"/></em></p>
        ///   <p>The namespace of the generated classes.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetNamespace(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = null;
            return toolSettings;
        }
        #endregion
        #region OperationGenerationMode
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.OperationGenerationMode"/></em></p>
        ///   <p>The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetOperationGenerationMode(this NSwagOpenApiToCSharpControllerSettings toolSettings, OperationGenerationMode operationGenerationMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationGenerationMode = operationGenerationMode;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.OperationGenerationMode"/></em></p>
        ///   <p>The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetOperationGenerationMode(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationGenerationMode = null;
            return toolSettings;
        }
        #endregion
        #region ParameterArrayType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.ParameterArrayType"/></em></p>
        ///   <p>The generic array .NET type of operation parameters (default: 'IEnumerable').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetParameterArrayType(this NSwagOpenApiToCSharpControllerSettings toolSettings, string parameterArrayType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterArrayType = parameterArrayType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.ParameterArrayType"/></em></p>
        ///   <p>The generic array .NET type of operation parameters (default: 'IEnumerable').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetParameterArrayType(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterArrayType = null;
            return toolSettings;
        }
        #endregion
        #region ParameterDictionaryType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.ParameterDictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type of operation parameters (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetParameterDictionaryType(this NSwagOpenApiToCSharpControllerSettings toolSettings, string parameterDictionaryType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterDictionaryType = parameterDictionaryType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.ParameterDictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type of operation parameters (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetParameterDictionaryType(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterDictionaryType = null;
            return toolSettings;
        }
        #endregion
        #region RequiredPropertiesMustBeDefined
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetRequiredPropertiesMustBeDefined(this NSwagOpenApiToCSharpControllerSettings toolSettings, bool? requiredPropertiesMustBeDefined)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = requiredPropertiesMustBeDefined;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetRequiredPropertiesMustBeDefined(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings EnableRequiredPropertiesMustBeDefined(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings DisableRequiredPropertiesMustBeDefined(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ToggleRequiredPropertiesMustBeDefined(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = !toolSettings.RequiredPropertiesMustBeDefined;
            return toolSettings;
        }
        #endregion
        #region ResponseArrayType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseArrayType"/></em></p>
        ///   <p>The generic array .NET type of operation responses (default: 'ICollection').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetResponseArrayType(this NSwagOpenApiToCSharpControllerSettings toolSettings, string responseArrayType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseArrayType = responseArrayType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseArrayType"/></em></p>
        ///   <p>The generic array .NET type of operation responses (default: 'ICollection').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetResponseArrayType(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseArrayType = null;
            return toolSettings;
        }
        #endregion
        #region ResponseClass
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseClass"/></em></p>
        ///   <p>The response class (default 'SwaggerResponse', may use '{controller}' placeholder).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetResponseClass(this NSwagOpenApiToCSharpControllerSettings toolSettings, string responseClass)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseClass = responseClass;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseClass"/></em></p>
        ///   <p>The response class (default 'SwaggerResponse', may use '{controller}' placeholder).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetResponseClass(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseClass = null;
            return toolSettings;
        }
        #endregion
        #region ResponseDictionaryType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseDictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type of operation responses (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetResponseDictionaryType(this NSwagOpenApiToCSharpControllerSettings toolSettings, string responseDictionaryType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseDictionaryType = responseDictionaryType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.ResponseDictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type of operation responses (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetResponseDictionaryType(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseDictionaryType = null;
            return toolSettings;
        }
        #endregion
        #region TimeSpanType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.TimeSpanType"/></em></p>
        ///   <p>The time span .NET type (default: 'TimeSpan').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetTimeSpanType(this NSwagOpenApiToCSharpControllerSettings toolSettings, string timeSpanType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TimeSpanType = timeSpanType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.TimeSpanType"/></em></p>
        ///   <p>The time span .NET type (default: 'TimeSpan').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetTimeSpanType(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TimeSpanType = null;
            return toolSettings;
        }
        #endregion
        #region TimeType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.TimeType"/></em></p>
        ///   <p>The time .NET type (default: 'TimeSpan').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetTimeType(this NSwagOpenApiToCSharpControllerSettings toolSettings, string timeType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TimeType = timeType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.TimeType"/></em></p>
        ///   <p>The time .NET type (default: 'TimeSpan').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetTimeType(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TimeType = null;
            return toolSettings;
        }
        #endregion
        #region WrapResponseMethods
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/> to a new list</em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetWrapResponseMethods(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal = wrapResponseMethods.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/> to a new list</em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetWrapResponseMethods(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal = wrapResponseMethods.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings AddWrapResponseMethods(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal.AddRange(wrapResponseMethods);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings AddWrapResponseMethods(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal.AddRange(wrapResponseMethods);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ClearWrapResponseMethods(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings RemoveWrapResponseMethods(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(wrapResponseMethods);
            toolSettings.WrapResponseMethodsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings RemoveWrapResponseMethods(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(wrapResponseMethods);
            toolSettings.WrapResponseMethodsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region WrapResponses
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetWrapResponses(this NSwagOpenApiToCSharpControllerSettings toolSettings, bool? wrapResponses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = wrapResponses;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetWrapResponses(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings EnableWrapResponses(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings DisableWrapResponses(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagOpenApiToCSharpControllerSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ToggleWrapResponses(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = !toolSettings.WrapResponses;
            return toolSettings;
        }
        #endregion
        #region EnumNameGeneratorType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.EnumNameGeneratorType"/></em></p>
        ///   <p>The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetEnumNameGeneratorType(this NSwagOpenApiToCSharpControllerSettings toolSettings, string enumNameGeneratorType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnumNameGeneratorType = enumNameGeneratorType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.EnumNameGeneratorType"/></em></p>
        ///   <p>The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetEnumNameGeneratorType(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnumNameGeneratorType = null;
            return toolSettings;
        }
        #endregion
        #region PropertyNameGeneratorType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.PropertyNameGeneratorType"/></em></p>
        ///   <p>The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetPropertyNameGeneratorType(this NSwagOpenApiToCSharpControllerSettings toolSettings, string propertyNameGeneratorType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PropertyNameGeneratorType = propertyNameGeneratorType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.PropertyNameGeneratorType"/></em></p>
        ///   <p>The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetPropertyNameGeneratorType(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PropertyNameGeneratorType = null;
            return toolSettings;
        }
        #endregion
        #region TemplateDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.TemplateDirectory"/></em></p>
        ///   <p>The Liquid template directory (experimental).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetTemplateDirectory(this NSwagOpenApiToCSharpControllerSettings toolSettings, string templateDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TemplateDirectory = templateDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.TemplateDirectory"/></em></p>
        ///   <p>The Liquid template directory (experimental).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetTemplateDirectory(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TemplateDirectory = null;
            return toolSettings;
        }
        #endregion
        #region TypeNameGenerator
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetTypeNameGenerator(this NSwagOpenApiToCSharpControllerSettings toolSettings, string typeNameGenerator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = typeNameGenerator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetTypeNameGenerator(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = null;
            return toolSettings;
        }
        #endregion
        #region Input
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.Input"/></em></p>
        ///   <p>A file path or URL to the data or the JSON data itself.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetInput(this NSwagOpenApiToCSharpControllerSettings toolSettings, string input)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = input;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.Input"/></em></p>
        ///   <p>A file path or URL to the data or the JSON data itself.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetInput(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = null;
            return toolSettings;
        }
        #endregion
        #region ServiceHost
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web document (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetServiceHost(this NSwagOpenApiToCSharpControllerSettings toolSettings, string serviceHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = serviceHost;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web document (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetServiceHost(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = null;
            return toolSettings;
        }
        #endregion
        #region ServiceSchemes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetServiceSchemes(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetServiceSchemes(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings AddServiceSchemes(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings AddServiceSchemes(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ClearServiceSchemes(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings RemoveServiceSchemes(this NSwagOpenApiToCSharpControllerSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToCSharpControllerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings RemoveServiceSchemes(this NSwagOpenApiToCSharpControllerSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToCSharpControllerSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings SetOutput(this NSwagOpenApiToCSharpControllerSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToCSharpControllerSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToCSharpControllerSettings ResetOutput(this NSwagOpenApiToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region NSwagSwaggerToCSharpControllerSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagSwaggerToCSharpControllerSettingsExtensions
    {
        #region BasePath
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.BasePath"/></em></p>
        ///   <p>The Base path on which the API is served, which is relative to the Host</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetBasePath(this NSwagSwaggerToCSharpControllerSettings toolSettings, string basePath)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BasePath = basePath;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.BasePath"/></em></p>
        ///   <p>The Base path on which the API is served, which is relative to the Host</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetBasePath(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BasePath = null;
            return toolSettings;
        }
        #endregion
        #region ControllerBaseClass
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerBaseClass"/></em></p>
        ///   <p>The controller base class (empty for 'ApiController').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetControllerBaseClass(this NSwagSwaggerToCSharpControllerSettings toolSettings, string controllerBaseClass)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ControllerBaseClass = controllerBaseClass;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerBaseClass"/></em></p>
        ///   <p>The controller base class (empty for 'ApiController').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetControllerBaseClass(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ControllerBaseClass = null;
            return toolSettings;
        }
        #endregion
        #region ControllerStyle
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerStyle"/></em></p>
        ///   <p>The controller generation style (partial, abstract; default: partial).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetControllerStyle(this NSwagSwaggerToCSharpControllerSettings toolSettings, CSharpControllerStyle controllerStyle)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ControllerStyle = controllerStyle;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerStyle"/></em></p>
        ///   <p>The controller generation style (partial, abstract; default: partial).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetControllerStyle(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ControllerStyle = null;
            return toolSettings;
        }
        #endregion
        #region ControllerTarget
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerTarget"/></em></p>
        ///   <p>controller target framework (default: AspNetCore).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetControllerTarget(this NSwagSwaggerToCSharpControllerSettings toolSettings, CSharpControllerTarget controllerTarget)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ControllerTarget = controllerTarget;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.ControllerTarget"/></em></p>
        ///   <p>controller target framework (default: AspNetCore).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetControllerTarget(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ControllerTarget = null;
            return toolSettings;
        }
        #endregion
        #region GenerateModelValidationAttributes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes"/></em></p>
        ///   <p>Add model validation attributes (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetGenerateModelValidationAttributes(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? generateModelValidationAttributes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateModelValidationAttributes = generateModelValidationAttributes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes"/></em></p>
        ///   <p>Add model validation attributes (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetGenerateModelValidationAttributes(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateModelValidationAttributes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes"/></em></p>
        ///   <p>Add model validation attributes (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableGenerateModelValidationAttributes(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateModelValidationAttributes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes"/></em></p>
        ///   <p>Add model validation attributes (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableGenerateModelValidationAttributes(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateModelValidationAttributes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateModelValidationAttributes"/></em></p>
        ///   <p>Add model validation attributes (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleGenerateModelValidationAttributes(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateModelValidationAttributes = !toolSettings.GenerateModelValidationAttributes;
            return toolSettings;
        }
        #endregion
        #region RouteNamingStrategy
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.RouteNamingStrategy"/></em></p>
        ///   <p>The strategy for naming controller routes (none, operationid; default: none).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetRouteNamingStrategy(this NSwagSwaggerToCSharpControllerSettings toolSettings, CSharpControllerRouteNamingStrategy routeNamingStrategy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RouteNamingStrategy = routeNamingStrategy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.RouteNamingStrategy"/></em></p>
        ///   <p>The strategy for naming controller routes (none, operationid; default: none).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetRouteNamingStrategy(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RouteNamingStrategy = null;
            return toolSettings;
        }
        #endregion
        #region UseActionResultType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.UseActionResultType"/></em></p>
        ///   <p>Use ASP.Net Core (2.1) ActionResult type as return type (default: false)</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetUseActionResultType(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? useActionResultType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseActionResultType = useActionResultType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.UseActionResultType"/></em></p>
        ///   <p>Use ASP.Net Core (2.1) ActionResult type as return type (default: false)</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetUseActionResultType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseActionResultType = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.UseActionResultType"/></em></p>
        ///   <p>Use ASP.Net Core (2.1) ActionResult type as return type (default: false)</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableUseActionResultType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseActionResultType = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.UseActionResultType"/></em></p>
        ///   <p>Use ASP.Net Core (2.1) ActionResult type as return type (default: false)</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableUseActionResultType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseActionResultType = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.UseActionResultType"/></em></p>
        ///   <p>Use ASP.Net Core (2.1) ActionResult type as return type (default: false)</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleUseActionResultType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseActionResultType = !toolSettings.UseActionResultType;
            return toolSettings;
        }
        #endregion
        #region UseCancellationToken
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.UseCancellationToken"/></em></p>
        ///   <p>Add a cancellation token parameter (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetUseCancellationToken(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? useCancellationToken)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseCancellationToken = useCancellationToken;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.UseCancellationToken"/></em></p>
        ///   <p>Add a cancellation token parameter (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetUseCancellationToken(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseCancellationToken = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.UseCancellationToken"/></em></p>
        ///   <p>Add a cancellation token parameter (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableUseCancellationToken(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseCancellationToken = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.UseCancellationToken"/></em></p>
        ///   <p>Add a cancellation token parameter (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableUseCancellationToken(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseCancellationToken = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.UseCancellationToken"/></em></p>
        ///   <p>Add a cancellation token parameter (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleUseCancellationToken(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseCancellationToken = !toolSettings.UseCancellationToken;
            return toolSettings;
        }
        #endregion
        #region AdditionalContractNamespaceUsages
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/> to a new list</em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetAdditionalContractNamespaceUsages(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal = additionalContractNamespaceUsages.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/> to a new list</em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetAdditionalContractNamespaceUsages(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal = additionalContractNamespaceUsages.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings AddAdditionalContractNamespaceUsages(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal.AddRange(additionalContractNamespaceUsages);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings AddAdditionalContractNamespaceUsages(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal.AddRange(additionalContractNamespaceUsages);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ClearAdditionalContractNamespaceUsages(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalContractNamespaceUsagesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings RemoveAdditionalContractNamespaceUsages(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(additionalContractNamespaceUsages);
            toolSettings.AdditionalContractNamespaceUsagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalContractNamespaceUsages"/></em></p>
        ///   <p>The additional contract namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings RemoveAdditionalContractNamespaceUsages(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> additionalContractNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(additionalContractNamespaceUsages);
            toolSettings.AdditionalContractNamespaceUsagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AdditionalNamespaceUsages
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/> to a new list</em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetAdditionalNamespaceUsages(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal = additionalNamespaceUsages.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/> to a new list</em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetAdditionalNamespaceUsages(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal = additionalNamespaceUsages.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings AddAdditionalNamespaceUsages(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal.AddRange(additionalNamespaceUsages);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings AddAdditionalNamespaceUsages(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal.AddRange(additionalNamespaceUsages);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ClearAdditionalNamespaceUsages(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdditionalNamespaceUsagesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings RemoveAdditionalNamespaceUsages(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(additionalNamespaceUsages);
            toolSettings.AdditionalNamespaceUsagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpControllerSettings.AdditionalNamespaceUsages"/></em></p>
        ///   <p>The additional namespace usages.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings RemoveAdditionalNamespaceUsages(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> additionalNamespaceUsages)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(additionalNamespaceUsages);
            toolSettings.AdditionalNamespaceUsagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region AnyType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.AnyType"/></em></p>
        ///   <p>The any .NET type (default: 'object').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetAnyType(this NSwagSwaggerToCSharpControllerSettings toolSettings, string anyType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AnyType = anyType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.AnyType"/></em></p>
        ///   <p>The any .NET type (default: 'object').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetAnyType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AnyType = null;
            return toolSettings;
        }
        #endregion
        #region ArrayBaseType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayBaseType"/></em></p>
        ///   <p>The generic array .NET type (default: 'Collection').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetArrayBaseType(this NSwagSwaggerToCSharpControllerSettings toolSettings, string arrayBaseType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayBaseType = arrayBaseType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayBaseType"/></em></p>
        ///   <p>The generic array .NET type (default: 'Collection').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetArrayBaseType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayBaseType = null;
            return toolSettings;
        }
        #endregion
        #region ArrayInstanceType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayInstanceType"/></em></p>
        ///   <p>The generic array .NET instance type (default: empty = ArrayType).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetArrayInstanceType(this NSwagSwaggerToCSharpControllerSettings toolSettings, string arrayInstanceType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayInstanceType = arrayInstanceType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayInstanceType"/></em></p>
        ///   <p>The generic array .NET instance type (default: empty = ArrayType).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetArrayInstanceType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayInstanceType = null;
            return toolSettings;
        }
        #endregion
        #region ArrayType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayType"/></em></p>
        ///   <p>The generic array .NET type (default: 'ICollection').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetArrayType(this NSwagSwaggerToCSharpControllerSettings toolSettings, string arrayType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayType = arrayType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.ArrayType"/></em></p>
        ///   <p>The generic array .NET type (default: 'ICollection').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetArrayType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArrayType = null;
            return toolSettings;
        }
        #endregion
        #region ClassName
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ClassName"/></em></p>
        ///   <p>The class name of the generated client.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetClassName(this NSwagSwaggerToCSharpControllerSettings toolSettings, string className)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassName = className;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.ClassName"/></em></p>
        ///   <p>The class name of the generated client.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetClassName(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassName = null;
            return toolSettings;
        }
        #endregion
        #region ClassStyle
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ClassStyle"/></em></p>
        ///   <p>The CSharp class style, 'Poco' or 'Inpc' (default: 'Poco').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetClassStyle(this NSwagSwaggerToCSharpControllerSettings toolSettings, CSharpClassStyle classStyle)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassStyle = classStyle;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.ClassStyle"/></em></p>
        ///   <p>The CSharp class style, 'Poco' or 'Inpc' (default: 'Poco').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetClassStyle(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassStyle = null;
            return toolSettings;
        }
        #endregion
        #region DateTimeType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.DateTimeType"/></em></p>
        ///   <p>The date time .NET type (default: 'DateTimeOffset').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetDateTimeType(this NSwagSwaggerToCSharpControllerSettings toolSettings, string dateTimeType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateTimeType = dateTimeType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.DateTimeType"/></em></p>
        ///   <p>The date time .NET type (default: 'DateTimeOffset').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetDateTimeType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateTimeType = null;
            return toolSettings;
        }
        #endregion
        #region DateType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.DateType"/></em></p>
        ///   <p>The date .NET type (default: 'DateTimeOffset').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetDateType(this NSwagSwaggerToCSharpControllerSettings toolSettings, string dateType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateType = dateType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.DateType"/></em></p>
        ///   <p>The date .NET type (default: 'DateTimeOffset').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetDateType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateType = null;
            return toolSettings;
        }
        #endregion
        #region DictionaryBaseType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryBaseType"/></em></p>
        ///   <p>The generic dictionary .NET type (default: 'Dictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetDictionaryBaseType(this NSwagSwaggerToCSharpControllerSettings toolSettings, string dictionaryBaseType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryBaseType = dictionaryBaseType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryBaseType"/></em></p>
        ///   <p>The generic dictionary .NET type (default: 'Dictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetDictionaryBaseType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryBaseType = null;
            return toolSettings;
        }
        #endregion
        #region DictionaryInstanceType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryInstanceType"/></em></p>
        ///   <p>The generic dictionary .NET instance type (default: empty = DictionaryType).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetDictionaryInstanceType(this NSwagSwaggerToCSharpControllerSettings toolSettings, string dictionaryInstanceType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryInstanceType = dictionaryInstanceType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryInstanceType"/></em></p>
        ///   <p>The generic dictionary .NET instance type (default: empty = DictionaryType).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetDictionaryInstanceType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryInstanceType = null;
            return toolSettings;
        }
        #endregion
        #region DictionaryType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetDictionaryType(this NSwagSwaggerToCSharpControllerSettings toolSettings, string dictionaryType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryType = dictionaryType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.DictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetDictionaryType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DictionaryType = null;
            return toolSettings;
        }
        #endregion
        #region EnforceFlagEnums
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetEnforceFlagEnums(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? enforceFlagEnums)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = enforceFlagEnums;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetEnforceFlagEnums(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableEnforceFlagEnums(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableEnforceFlagEnums(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.EnforceFlagEnums"/></em></p>
        ///   <p>Specifies whether enums should be always generated as bit flags (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleEnforceFlagEnums(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnforceFlagEnums = !toolSettings.EnforceFlagEnums;
            return toolSettings;
        }
        #endregion
        #region ExcludedParameterNames
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/> to a new list</em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetExcludedParameterNames(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal = excludedParameterNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/> to a new list</em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetExcludedParameterNames(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal = excludedParameterNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings AddExcludedParameterNames(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal.AddRange(excludedParameterNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings AddExcludedParameterNames(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal.AddRange(excludedParameterNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ClearExcludedParameterNames(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings RemoveExcludedParameterNames(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedParameterNames);
            toolSettings.ExcludedParameterNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings RemoveExcludedParameterNames(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedParameterNames);
            toolSettings.ExcludedParameterNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ExcludedTypeNames
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/> to a new list</em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetExcludedTypeNames(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal = excludedTypeNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/> to a new list</em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetExcludedTypeNames(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal = excludedTypeNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings AddExcludedTypeNames(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.AddRange(excludedTypeNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings AddExcludedTypeNames(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.AddRange(excludedTypeNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ClearExcludedTypeNames(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings RemoveExcludedTypeNames(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedTypeNames);
            toolSettings.ExcludedTypeNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpControllerSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings RemoveExcludedTypeNames(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedTypeNames);
            toolSettings.ExcludedTypeNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region GenerateDataAnnotations
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetGenerateDataAnnotations(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? generateDataAnnotations)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = generateDataAnnotations;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetGenerateDataAnnotations(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableGenerateDataAnnotations(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableGenerateDataAnnotations(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDataAnnotations"/></em></p>
        ///   <p>Specifies whether to generate data annotation attributes on DTO classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleGenerateDataAnnotations(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDataAnnotations = !toolSettings.GenerateDataAnnotations;
            return toolSettings;
        }
        #endregion
        #region GenerateDefaultValues
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetGenerateDefaultValues(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? generateDefaultValues)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = generateDefaultValues;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetGenerateDefaultValues(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableGenerateDefaultValues(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableGenerateDefaultValues(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (may generate CSharp 6 code, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleGenerateDefaultValues(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = !toolSettings.GenerateDefaultValues;
            return toolSettings;
        }
        #endregion
        #region GenerateDtoTypes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetGenerateDtoTypes(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? generateDtoTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = generateDtoTypes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetGenerateDtoTypes(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableGenerateDtoTypes(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableGenerateDtoTypes(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleGenerateDtoTypes(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = !toolSettings.GenerateDtoTypes;
            return toolSettings;
        }
        #endregion
        #region GenerateImmutableArrayProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetGenerateImmutableArrayProperties(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? generateImmutableArrayProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = generateImmutableArrayProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetGenerateImmutableArrayProperties(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableGenerateImmutableArrayProperties(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableGenerateImmutableArrayProperties(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableArrayProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable array properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleGenerateImmutableArrayProperties(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableArrayProperties = !toolSettings.GenerateImmutableArrayProperties;
            return toolSettings;
        }
        #endregion
        #region GenerateImmutableDictionaryProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetGenerateImmutableDictionaryProperties(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? generateImmutableDictionaryProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = generateImmutableDictionaryProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetGenerateImmutableDictionaryProperties(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableGenerateImmutableDictionaryProperties(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableGenerateImmutableDictionaryProperties(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateImmutableDictionaryProperties"/></em></p>
        ///   <p>Specifies whether to remove the setter for non-nullable dictionary properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleGenerateImmutableDictionaryProperties(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateImmutableDictionaryProperties = !toolSettings.GenerateImmutableDictionaryProperties;
            return toolSettings;
        }
        #endregion
        #region GenerateJsonMethods
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetGenerateJsonMethods(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? generateJsonMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = generateJsonMethods;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetGenerateJsonMethods(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableGenerateJsonMethods(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableGenerateJsonMethods(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateJsonMethods"/></em></p>
        ///   <p>Specifies whether to render ToJson() and FromJson() methods for DTOs (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleGenerateJsonMethods(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateJsonMethods = !toolSettings.GenerateJsonMethods;
            return toolSettings;
        }
        #endregion
        #region GenerateOptionalParameters
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetGenerateOptionalParameters(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? generateOptionalParameters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = generateOptionalParameters;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetGenerateOptionalParameters(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableGenerateOptionalParameters(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableGenerateOptionalParameters(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleGenerateOptionalParameters(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = !toolSettings.GenerateOptionalParameters;
            return toolSettings;
        }
        #endregion
        #region GenerateOptionalPropertiesAsNullable
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetGenerateOptionalPropertiesAsNullable(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? generateOptionalPropertiesAsNullable)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = generateOptionalPropertiesAsNullable;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetGenerateOptionalPropertiesAsNullable(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableGenerateOptionalPropertiesAsNullable(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableGenerateOptionalPropertiesAsNullable(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateOptionalPropertiesAsNullable"/></em></p>
        ///   <p>Specifies whether optional schema properties (not required) are generated as nullable properties (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleGenerateOptionalPropertiesAsNullable(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalPropertiesAsNullable = !toolSettings.GenerateOptionalPropertiesAsNullable;
            return toolSettings;
        }
        #endregion
        #region GenerateResponseClasses
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetGenerateResponseClasses(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? generateResponseClasses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = generateResponseClasses;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetGenerateResponseClasses(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableGenerateResponseClasses(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableGenerateResponseClasses(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleGenerateResponseClasses(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = !toolSettings.GenerateResponseClasses;
            return toolSettings;
        }
        #endregion
        #region HandleReferences
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetHandleReferences(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? handleReferences)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = handleReferences;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetHandleReferences(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableHandleReferences(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableHandleReferences(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.HandleReferences"/></em></p>
        ///   <p>Use preserve references handling (All) in the JSON serializer (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleHandleReferences(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = !toolSettings.HandleReferences;
            return toolSettings;
        }
        #endregion
        #region InlineNamedAny
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetInlineNamedAny(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? inlineNamedAny)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = inlineNamedAny;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetInlineNamedAny(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableInlineNamedAny(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableInlineNamedAny(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleInlineNamedAny(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = !toolSettings.InlineNamedAny;
            return toolSettings;
        }
        #endregion
        #region InlineNamedArrays
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetInlineNamedArrays(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? inlineNamedArrays)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = inlineNamedArrays;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetInlineNamedArrays(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableInlineNamedArrays(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableInlineNamedArrays(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedArrays"/></em></p>
        ///   <p>Inline named arrays (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleInlineNamedArrays(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedArrays = !toolSettings.InlineNamedArrays;
            return toolSettings;
        }
        #endregion
        #region InlineNamedDictionaries
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetInlineNamedDictionaries(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? inlineNamedDictionaries)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = inlineNamedDictionaries;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetInlineNamedDictionaries(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableInlineNamedDictionaries(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableInlineNamedDictionaries(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleInlineNamedDictionaries(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = !toolSettings.InlineNamedDictionaries;
            return toolSettings;
        }
        #endregion
        #region InlineNamedTuples
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetInlineNamedTuples(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? inlineNamedTuples)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = inlineNamedTuples;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetInlineNamedTuples(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableInlineNamedTuples(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableInlineNamedTuples(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.InlineNamedTuples"/></em></p>
        ///   <p>Inline named tuples (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleInlineNamedTuples(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedTuples = !toolSettings.InlineNamedTuples;
            return toolSettings;
        }
        #endregion
        #region JsonConverters
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/> to a new list</em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetJsonConverters(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal = jsonConverters.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/> to a new list</em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetJsonConverters(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal = jsonConverters.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings AddJsonConverters(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal.AddRange(jsonConverters);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings AddJsonConverters(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal.AddRange(jsonConverters);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ClearJsonConverters(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonConvertersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings RemoveJsonConverters(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(jsonConverters);
            toolSettings.JsonConvertersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpControllerSettings.JsonConverters"/></em></p>
        ///   <p>Specifies the custom Json.NET converter types (optional, comma separated).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings RemoveJsonConverters(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> jsonConverters)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(jsonConverters);
            toolSettings.JsonConvertersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region JsonSerializerSettingsTransformationMethod
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/></em></p>
        ///   <p>The name of a static method which is called to transform the JsonSerializerSettings used in the generated ToJson()/FromJson() methods (default: none).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetJsonSerializerSettingsTransformationMethod(this NSwagSwaggerToCSharpControllerSettings toolSettings, string jsonSerializerSettingsTransformationMethod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonSerializerSettingsTransformationMethod = jsonSerializerSettingsTransformationMethod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.JsonSerializerSettingsTransformationMethod"/></em></p>
        ///   <p>The name of a static method which is called to transform the JsonSerializerSettings used in the generated ToJson()/FromJson() methods (default: none).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetJsonSerializerSettingsTransformationMethod(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.JsonSerializerSettingsTransformationMethod = null;
            return toolSettings;
        }
        #endregion
        #region Namespace
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.Namespace"/></em></p>
        ///   <p>The namespace of the generated classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetNamespace(this NSwagSwaggerToCSharpControllerSettings toolSettings, string @namespace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = @namespace;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.Namespace"/></em></p>
        ///   <p>The namespace of the generated classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetNamespace(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = null;
            return toolSettings;
        }
        #endregion
        #region OperationGenerationMode
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.OperationGenerationMode"/></em></p>
        ///   <p>The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetOperationGenerationMode(this NSwagSwaggerToCSharpControllerSettings toolSettings, OperationGenerationMode operationGenerationMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationGenerationMode = operationGenerationMode;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.OperationGenerationMode"/></em></p>
        ///   <p>The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetOperationGenerationMode(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationGenerationMode = null;
            return toolSettings;
        }
        #endregion
        #region ParameterArrayType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ParameterArrayType"/></em></p>
        ///   <p>The generic array .NET type of operation parameters (default: 'IEnumerable').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetParameterArrayType(this NSwagSwaggerToCSharpControllerSettings toolSettings, string parameterArrayType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterArrayType = parameterArrayType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.ParameterArrayType"/></em></p>
        ///   <p>The generic array .NET type of operation parameters (default: 'IEnumerable').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetParameterArrayType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterArrayType = null;
            return toolSettings;
        }
        #endregion
        #region ParameterDictionaryType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ParameterDictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type of operation parameters (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetParameterDictionaryType(this NSwagSwaggerToCSharpControllerSettings toolSettings, string parameterDictionaryType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterDictionaryType = parameterDictionaryType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.ParameterDictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type of operation parameters (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetParameterDictionaryType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ParameterDictionaryType = null;
            return toolSettings;
        }
        #endregion
        #region RequiredPropertiesMustBeDefined
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetRequiredPropertiesMustBeDefined(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? requiredPropertiesMustBeDefined)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = requiredPropertiesMustBeDefined;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetRequiredPropertiesMustBeDefined(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableRequiredPropertiesMustBeDefined(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableRequiredPropertiesMustBeDefined(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.RequiredPropertiesMustBeDefined"/></em></p>
        ///   <p>Specifies whether a required property must be defined in JSON (sets Required.Always when the property is required).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleRequiredPropertiesMustBeDefined(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RequiredPropertiesMustBeDefined = !toolSettings.RequiredPropertiesMustBeDefined;
            return toolSettings;
        }
        #endregion
        #region ResponseArrayType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseArrayType"/></em></p>
        ///   <p>The generic array .NET type of operation responses (default: 'ICollection').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetResponseArrayType(this NSwagSwaggerToCSharpControllerSettings toolSettings, string responseArrayType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseArrayType = responseArrayType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseArrayType"/></em></p>
        ///   <p>The generic array .NET type of operation responses (default: 'ICollection').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetResponseArrayType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseArrayType = null;
            return toolSettings;
        }
        #endregion
        #region ResponseClass
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseClass"/></em></p>
        ///   <p>The response class (default 'SwaggerResponse', may use '{controller}' placeholder).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetResponseClass(this NSwagSwaggerToCSharpControllerSettings toolSettings, string responseClass)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseClass = responseClass;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseClass"/></em></p>
        ///   <p>The response class (default 'SwaggerResponse', may use '{controller}' placeholder).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetResponseClass(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseClass = null;
            return toolSettings;
        }
        #endregion
        #region ResponseDictionaryType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseDictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type of operation responses (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetResponseDictionaryType(this NSwagSwaggerToCSharpControllerSettings toolSettings, string responseDictionaryType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseDictionaryType = responseDictionaryType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.ResponseDictionaryType"/></em></p>
        ///   <p>The generic dictionary .NET type of operation responses (default: 'IDictionary').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetResponseDictionaryType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseDictionaryType = null;
            return toolSettings;
        }
        #endregion
        #region TimeSpanType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.TimeSpanType"/></em></p>
        ///   <p>The time span .NET type (default: 'TimeSpan').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetTimeSpanType(this NSwagSwaggerToCSharpControllerSettings toolSettings, string timeSpanType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TimeSpanType = timeSpanType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.TimeSpanType"/></em></p>
        ///   <p>The time span .NET type (default: 'TimeSpan').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetTimeSpanType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TimeSpanType = null;
            return toolSettings;
        }
        #endregion
        #region TimeType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.TimeType"/></em></p>
        ///   <p>The time .NET type (default: 'TimeSpan').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetTimeType(this NSwagSwaggerToCSharpControllerSettings toolSettings, string timeType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TimeType = timeType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.TimeType"/></em></p>
        ///   <p>The time .NET type (default: 'TimeSpan').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetTimeType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TimeType = null;
            return toolSettings;
        }
        #endregion
        #region WrapResponseMethods
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/> to a new list</em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetWrapResponseMethods(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal = wrapResponseMethods.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/> to a new list</em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetWrapResponseMethods(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal = wrapResponseMethods.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings AddWrapResponseMethods(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal.AddRange(wrapResponseMethods);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings AddWrapResponseMethods(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal.AddRange(wrapResponseMethods);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ClearWrapResponseMethods(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings RemoveWrapResponseMethods(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(wrapResponseMethods);
            toolSettings.WrapResponseMethodsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings RemoveWrapResponseMethods(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(wrapResponseMethods);
            toolSettings.WrapResponseMethodsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region WrapResponses
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetWrapResponses(this NSwagSwaggerToCSharpControllerSettings toolSettings, bool? wrapResponses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = wrapResponses;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetWrapResponses(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings EnableWrapResponses(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings DisableWrapResponses(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToCSharpControllerSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ToggleWrapResponses(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = !toolSettings.WrapResponses;
            return toolSettings;
        }
        #endregion
        #region EnumNameGeneratorType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.EnumNameGeneratorType"/></em></p>
        ///   <p>The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetEnumNameGeneratorType(this NSwagSwaggerToCSharpControllerSettings toolSettings, string enumNameGeneratorType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnumNameGeneratorType = enumNameGeneratorType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.EnumNameGeneratorType"/></em></p>
        ///   <p>The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetEnumNameGeneratorType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnumNameGeneratorType = null;
            return toolSettings;
        }
        #endregion
        #region PropertyNameGeneratorType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.PropertyNameGeneratorType"/></em></p>
        ///   <p>The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetPropertyNameGeneratorType(this NSwagSwaggerToCSharpControllerSettings toolSettings, string propertyNameGeneratorType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PropertyNameGeneratorType = propertyNameGeneratorType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.PropertyNameGeneratorType"/></em></p>
        ///   <p>The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetPropertyNameGeneratorType(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PropertyNameGeneratorType = null;
            return toolSettings;
        }
        #endregion
        #region TemplateDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.TemplateDirectory"/></em></p>
        ///   <p>The Liquid template directory (experimental).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetTemplateDirectory(this NSwagSwaggerToCSharpControllerSettings toolSettings, string templateDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TemplateDirectory = templateDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.TemplateDirectory"/></em></p>
        ///   <p>The Liquid template directory (experimental).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetTemplateDirectory(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TemplateDirectory = null;
            return toolSettings;
        }
        #endregion
        #region TypeNameGenerator
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetTypeNameGenerator(this NSwagSwaggerToCSharpControllerSettings toolSettings, string typeNameGenerator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = typeNameGenerator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetTypeNameGenerator(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = null;
            return toolSettings;
        }
        #endregion
        #region Input
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.Input"/></em></p>
        ///   <p>A file path or URL to the data or the JSON data itself.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetInput(this NSwagSwaggerToCSharpControllerSettings toolSettings, string input)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = input;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.Input"/></em></p>
        ///   <p>A file path or URL to the data or the JSON data itself.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetInput(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = null;
            return toolSettings;
        }
        #endregion
        #region ServiceHost
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web document (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetServiceHost(this NSwagSwaggerToCSharpControllerSettings toolSettings, string serviceHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = serviceHost;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web document (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetServiceHost(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = null;
            return toolSettings;
        }
        #endregion
        #region ServiceSchemes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetServiceSchemes(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetServiceSchemes(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings AddServiceSchemes(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings AddServiceSchemes(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ClearServiceSchemes(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings RemoveServiceSchemes(this NSwagSwaggerToCSharpControllerSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToCSharpControllerSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings RemoveServiceSchemes(this NSwagSwaggerToCSharpControllerSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToCSharpControllerSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings SetOutput(this NSwagSwaggerToCSharpControllerSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToCSharpControllerSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToCSharpControllerSettings ResetOutput(this NSwagSwaggerToCSharpControllerSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region NSwagOpenApiToTypeScriptClientSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagOpenApiToTypeScriptClientSettingsExtensions
    {
        #region EnumNameGeneratorType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToTypeScriptClientSettings.EnumNameGeneratorType"/></em></p>
        ///   <p>The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings SetEnumNameGeneratorType(this NSwagOpenApiToTypeScriptClientSettings toolSettings, string enumNameGeneratorType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnumNameGeneratorType = enumNameGeneratorType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToTypeScriptClientSettings.EnumNameGeneratorType"/></em></p>
        ///   <p>The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings ResetEnumNameGeneratorType(this NSwagOpenApiToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnumNameGeneratorType = null;
            return toolSettings;
        }
        #endregion
        #region PropertyNameGeneratorType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToTypeScriptClientSettings.PropertyNameGeneratorType"/></em></p>
        ///   <p>The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings SetPropertyNameGeneratorType(this NSwagOpenApiToTypeScriptClientSettings toolSettings, string propertyNameGeneratorType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PropertyNameGeneratorType = propertyNameGeneratorType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToTypeScriptClientSettings.PropertyNameGeneratorType"/></em></p>
        ///   <p>The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings ResetPropertyNameGeneratorType(this NSwagOpenApiToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PropertyNameGeneratorType = null;
            return toolSettings;
        }
        #endregion
        #region TemplateDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToTypeScriptClientSettings.TemplateDirectory"/></em></p>
        ///   <p>The Liquid template directory (experimental).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings SetTemplateDirectory(this NSwagOpenApiToTypeScriptClientSettings toolSettings, string templateDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TemplateDirectory = templateDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToTypeScriptClientSettings.TemplateDirectory"/></em></p>
        ///   <p>The Liquid template directory (experimental).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings ResetTemplateDirectory(this NSwagOpenApiToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TemplateDirectory = null;
            return toolSettings;
        }
        #endregion
        #region TypeNameGenerator
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToTypeScriptClientSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings SetTypeNameGenerator(this NSwagOpenApiToTypeScriptClientSettings toolSettings, string typeNameGenerator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = typeNameGenerator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToTypeScriptClientSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings ResetTypeNameGenerator(this NSwagOpenApiToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = null;
            return toolSettings;
        }
        #endregion
        #region Input
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToTypeScriptClientSettings.Input"/></em></p>
        ///   <p>A file path or URL to the data or the JSON data itself.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings SetInput(this NSwagOpenApiToTypeScriptClientSettings toolSettings, string input)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = input;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToTypeScriptClientSettings.Input"/></em></p>
        ///   <p>A file path or URL to the data or the JSON data itself.</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings ResetInput(this NSwagOpenApiToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = null;
            return toolSettings;
        }
        #endregion
        #region ServiceHost
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web document (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings SetServiceHost(this NSwagOpenApiToTypeScriptClientSettings toolSettings, string serviceHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = serviceHost;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web document (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings ResetServiceHost(this NSwagOpenApiToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = null;
            return toolSettings;
        }
        #endregion
        #region ServiceSchemes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings SetServiceSchemes(this NSwagOpenApiToTypeScriptClientSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings SetServiceSchemes(this NSwagOpenApiToTypeScriptClientSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings AddServiceSchemes(this NSwagOpenApiToTypeScriptClientSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings AddServiceSchemes(this NSwagOpenApiToTypeScriptClientSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings ClearServiceSchemes(this NSwagOpenApiToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings RemoveServiceSchemes(this NSwagOpenApiToTypeScriptClientSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagOpenApiToTypeScriptClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings RemoveServiceSchemes(this NSwagOpenApiToTypeScriptClientSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagOpenApiToTypeScriptClientSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings SetOutput(this NSwagOpenApiToTypeScriptClientSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagOpenApiToTypeScriptClientSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagOpenApiToTypeScriptClientSettings ResetOutput(this NSwagOpenApiToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region NSwagSwaggerToTypeScriptClientSettingsExtensions
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class NSwagSwaggerToTypeScriptClientSettingsExtensions
    {
        #region BaseUrlTokenName
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.BaseUrlTokenName"/></em></p>
        ///   <p>The token name for injecting the API base URL string (used in the Angular template, default: 'API_BASE_URL').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetBaseUrlTokenName(this NSwagSwaggerToTypeScriptClientSettings toolSettings, string baseUrlTokenName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseUrlTokenName = baseUrlTokenName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.BaseUrlTokenName"/></em></p>
        ///   <p>The token name for injecting the API base URL string (used in the Angular template, default: 'API_BASE_URL').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetBaseUrlTokenName(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BaseUrlTokenName = null;
            return toolSettings;
        }
        #endregion
        #region ClassName
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassName"/></em></p>
        ///   <p>The class name of the generated client.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetClassName(this NSwagSwaggerToTypeScriptClientSettings toolSettings, string className)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassName = className;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassName"/></em></p>
        ///   <p>The class name of the generated client.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetClassName(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassName = null;
            return toolSettings;
        }
        #endregion
        #region ClassTypes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/> to a new list</em></p>
        ///   <p>The type names which always generate plain TypeScript classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetClassTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] classTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassTypesInternal = classTypes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/> to a new list</em></p>
        ///   <p>The type names which always generate plain TypeScript classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetClassTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> classTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassTypesInternal = classTypes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/></em></p>
        ///   <p>The type names which always generate plain TypeScript classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings AddClassTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] classTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassTypesInternal.AddRange(classTypes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/></em></p>
        ///   <p>The type names which always generate plain TypeScript classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings AddClassTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> classTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassTypesInternal.AddRange(classTypes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/></em></p>
        ///   <p>The type names which always generate plain TypeScript classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ClearClassTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClassTypesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/></em></p>
        ///   <p>The type names which always generate plain TypeScript classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings RemoveClassTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] classTypes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(classTypes);
            toolSettings.ClassTypesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToTypeScriptClientSettings.ClassTypes"/></em></p>
        ///   <p>The type names which always generate plain TypeScript classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings RemoveClassTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> classTypes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(classTypes);
            toolSettings.ClassTypesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ClientBaseClass
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ClientBaseClass"/></em></p>
        ///   <p>The base class of the generated client classes (optional, must be imported or implemented in the extension code).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetClientBaseClass(this NSwagSwaggerToTypeScriptClientSettings toolSettings, string clientBaseClass)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClientBaseClass = clientBaseClass;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.ClientBaseClass"/></em></p>
        ///   <p>The base class of the generated client classes (optional, must be imported or implemented in the extension code).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetClientBaseClass(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ClientBaseClass = null;
            return toolSettings;
        }
        #endregion
        #region ConfigurationClass
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ConfigurationClass"/></em></p>
        ///   <p>The configuration class. The setting ClientBaseClass must be set. (empty for no configuration class).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetConfigurationClass(this NSwagSwaggerToTypeScriptClientSettings toolSettings, string configurationClass)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigurationClass = configurationClass;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.ConfigurationClass"/></em></p>
        ///   <p>The configuration class. The setting ClientBaseClass must be set. (empty for no configuration class).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetConfigurationClass(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigurationClass = null;
            return toolSettings;
        }
        #endregion
        #region ConvertConstructorInterfaceData
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData"/></em></p>
        ///   <p>Convert POJO objects in the constructor data to DTO instances (GenerateConstructorInterface must be enabled, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetConvertConstructorInterfaceData(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? convertConstructorInterfaceData)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConvertConstructorInterfaceData = convertConstructorInterfaceData;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData"/></em></p>
        ///   <p>Convert POJO objects in the constructor data to DTO instances (GenerateConstructorInterface must be enabled, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetConvertConstructorInterfaceData(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConvertConstructorInterfaceData = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData"/></em></p>
        ///   <p>Convert POJO objects in the constructor data to DTO instances (GenerateConstructorInterface must be enabled, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableConvertConstructorInterfaceData(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConvertConstructorInterfaceData = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData"/></em></p>
        ///   <p>Convert POJO objects in the constructor data to DTO instances (GenerateConstructorInterface must be enabled, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableConvertConstructorInterfaceData(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConvertConstructorInterfaceData = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.ConvertConstructorInterfaceData"/></em></p>
        ///   <p>Convert POJO objects in the constructor data to DTO instances (GenerateConstructorInterface must be enabled, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleConvertConstructorInterfaceData(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConvertConstructorInterfaceData = !toolSettings.ConvertConstructorInterfaceData;
            return toolSettings;
        }
        #endregion
        #region DateTimeType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.DateTimeType"/></em></p>
        ///   <p>The date time type ('Date', 'MomentJS', 'OffsetMomentJS', 'string').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetDateTimeType(this NSwagSwaggerToTypeScriptClientSettings toolSettings, TypeScriptDateTimeType dateTimeType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateTimeType = dateTimeType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.DateTimeType"/></em></p>
        ///   <p>The date time type ('Date', 'MomentJS', 'OffsetMomentJS', 'string').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetDateTimeType(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DateTimeType = null;
            return toolSettings;
        }
        #endregion
        #region ExceptionClass
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ExceptionClass"/></em></p>
        ///   <p>The exception class (default 'ApiException').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetExceptionClass(this NSwagSwaggerToTypeScriptClientSettings toolSettings, string exceptionClass)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExceptionClass = exceptionClass;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.ExceptionClass"/></em></p>
        ///   <p>The exception class (default 'ApiException').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetExceptionClass(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExceptionClass = null;
            return toolSettings;
        }
        #endregion
        #region ExcludedParameterNames
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/> to a new list</em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetExcludedParameterNames(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal = excludedParameterNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/> to a new list</em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetExcludedParameterNames(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal = excludedParameterNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings AddExcludedParameterNames(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal.AddRange(excludedParameterNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings AddExcludedParameterNames(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal.AddRange(excludedParameterNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ClearExcludedParameterNames(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedParameterNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings RemoveExcludedParameterNames(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedParameterNames);
            toolSettings.ExcludedParameterNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedParameterNames"/></em></p>
        ///   <p>The globally excluded parameter names.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings RemoveExcludedParameterNames(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> excludedParameterNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedParameterNames);
            toolSettings.ExcludedParameterNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ExcludedTypeNames
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/> to a new list</em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetExcludedTypeNames(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal = excludedTypeNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/> to a new list</em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetExcludedTypeNames(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal = excludedTypeNames.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings AddExcludedTypeNames(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.AddRange(excludedTypeNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings AddExcludedTypeNames(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.AddRange(excludedTypeNames);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ClearExcludedTypeNames(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExcludedTypeNamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings RemoveExcludedTypeNames(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedTypeNames);
            toolSettings.ExcludedTypeNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToTypeScriptClientSettings.ExcludedTypeNames"/></em></p>
        ///   <p>The excluded DTO type names (must be defined in an import or other namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings RemoveExcludedTypeNames(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> excludedTypeNames)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(excludedTypeNames);
            toolSettings.ExcludedTypeNamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ExportTypes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ExportTypes"/></em></p>
        ///   <p>Specifies whether the export keyword should be added to all classes, interfaces and enums (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetExportTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? exportTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExportTypes = exportTypes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.ExportTypes"/></em></p>
        ///   <p>Specifies whether the export keyword should be added to all classes, interfaces and enums (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetExportTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExportTypes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.ExportTypes"/></em></p>
        ///   <p>Specifies whether the export keyword should be added to all classes, interfaces and enums (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableExportTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExportTypes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.ExportTypes"/></em></p>
        ///   <p>Specifies whether the export keyword should be added to all classes, interfaces and enums (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableExportTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExportTypes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.ExportTypes"/></em></p>
        ///   <p>Specifies whether the export keyword should be added to all classes, interfaces and enums (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleExportTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExportTypes = !toolSettings.ExportTypes;
            return toolSettings;
        }
        #endregion
        #region ExtendedClasses
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/> to a new list</em></p>
        ///   <p>The list of extended classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetExtendedClasses(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] extendedClasses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExtendedClassesInternal = extendedClasses.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/> to a new list</em></p>
        ///   <p>The list of extended classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetExtendedClasses(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> extendedClasses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExtendedClassesInternal = extendedClasses.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/></em></p>
        ///   <p>The list of extended classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings AddExtendedClasses(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] extendedClasses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExtendedClassesInternal.AddRange(extendedClasses);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/></em></p>
        ///   <p>The list of extended classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings AddExtendedClasses(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> extendedClasses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExtendedClassesInternal.AddRange(extendedClasses);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/></em></p>
        ///   <p>The list of extended classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ClearExtendedClasses(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExtendedClassesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/></em></p>
        ///   <p>The list of extended classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings RemoveExtendedClasses(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] extendedClasses)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(extendedClasses);
            toolSettings.ExtendedClassesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtendedClasses"/></em></p>
        ///   <p>The list of extended classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings RemoveExtendedClasses(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> extendedClasses)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(extendedClasses);
            toolSettings.ExtendedClassesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ExtensionCode
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtensionCode"/></em></p>
        ///   <p>The extension code (string or file path).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetExtensionCode(this NSwagSwaggerToTypeScriptClientSettings toolSettings, string extensionCode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExtensionCode = extensionCode;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.ExtensionCode"/></em></p>
        ///   <p>The extension code (string or file path).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetExtensionCode(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExtensionCode = null;
            return toolSettings;
        }
        #endregion
        #region GenerateClientClasses
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses"/></em></p>
        ///   <p>Specifies whether generate client classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetGenerateClientClasses(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? generateClientClasses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientClasses = generateClientClasses;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses"/></em></p>
        ///   <p>Specifies whether generate client classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetGenerateClientClasses(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientClasses = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses"/></em></p>
        ///   <p>Specifies whether generate client classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableGenerateClientClasses(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientClasses = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses"/></em></p>
        ///   <p>Specifies whether generate client classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableGenerateClientClasses(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientClasses = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientClasses"/></em></p>
        ///   <p>Specifies whether generate client classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleGenerateClientClasses(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientClasses = !toolSettings.GenerateClientClasses;
            return toolSettings;
        }
        #endregion
        #region GenerateClientInterfaces
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces"/></em></p>
        ///   <p>Specifies whether generate interfaces for the client classes (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetGenerateClientInterfaces(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? generateClientInterfaces)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientInterfaces = generateClientInterfaces;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces"/></em></p>
        ///   <p>Specifies whether generate interfaces for the client classes (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetGenerateClientInterfaces(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientInterfaces = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces"/></em></p>
        ///   <p>Specifies whether generate interfaces for the client classes (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableGenerateClientInterfaces(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientInterfaces = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces"/></em></p>
        ///   <p>Specifies whether generate interfaces for the client classes (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableGenerateClientInterfaces(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientInterfaces = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateClientInterfaces"/></em></p>
        ///   <p>Specifies whether generate interfaces for the client classes (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleGenerateClientInterfaces(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateClientInterfaces = !toolSettings.GenerateClientInterfaces;
            return toolSettings;
        }
        #endregion
        #region GenerateCloneMethod
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod"/></em></p>
        ///   <p>Specifies whether a clone() method should be generated in the DTO classes (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetGenerateCloneMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? generateCloneMethod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateCloneMethod = generateCloneMethod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod"/></em></p>
        ///   <p>Specifies whether a clone() method should be generated in the DTO classes (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetGenerateCloneMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateCloneMethod = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod"/></em></p>
        ///   <p>Specifies whether a clone() method should be generated in the DTO classes (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableGenerateCloneMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateCloneMethod = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod"/></em></p>
        ///   <p>Specifies whether a clone() method should be generated in the DTO classes (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableGenerateCloneMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateCloneMethod = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateCloneMethod"/></em></p>
        ///   <p>Specifies whether a clone() method should be generated in the DTO classes (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleGenerateCloneMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateCloneMethod = !toolSettings.GenerateCloneMethod;
            return toolSettings;
        }
        #endregion
        #region GenerateConstructorInterface
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface"/></em></p>
        ///   <p>Generate an class interface which is used in the constructor to initialize the class (only available when TypeStyle is Class, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetGenerateConstructorInterface(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? generateConstructorInterface)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateConstructorInterface = generateConstructorInterface;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface"/></em></p>
        ///   <p>Generate an class interface which is used in the constructor to initialize the class (only available when TypeStyle is Class, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetGenerateConstructorInterface(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateConstructorInterface = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface"/></em></p>
        ///   <p>Generate an class interface which is used in the constructor to initialize the class (only available when TypeStyle is Class, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableGenerateConstructorInterface(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateConstructorInterface = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface"/></em></p>
        ///   <p>Generate an class interface which is used in the constructor to initialize the class (only available when TypeStyle is Class, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableGenerateConstructorInterface(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateConstructorInterface = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateConstructorInterface"/></em></p>
        ///   <p>Generate an class interface which is used in the constructor to initialize the class (only available when TypeStyle is Class, default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleGenerateConstructorInterface(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateConstructorInterface = !toolSettings.GenerateConstructorInterface;
            return toolSettings;
        }
        #endregion
        #region GenerateDefaultValues
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetGenerateDefaultValues(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? generateDefaultValues)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = generateDefaultValues;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetGenerateDefaultValues(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableGenerateDefaultValues(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableGenerateDefaultValues(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDefaultValues"/></em></p>
        ///   <p>Specifies whether to generate default values for properties (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleGenerateDefaultValues(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDefaultValues = !toolSettings.GenerateDefaultValues;
            return toolSettings;
        }
        #endregion
        #region GenerateDtoTypes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetGenerateDtoTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? generateDtoTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = generateDtoTypes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetGenerateDtoTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableGenerateDtoTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableGenerateDtoTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateDtoTypes"/></em></p>
        ///   <p>Specifies whether to generate DTO classes.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleGenerateDtoTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateDtoTypes = !toolSettings.GenerateDtoTypes;
            return toolSettings;
        }
        #endregion
        #region GenerateOptionalParameters
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetGenerateOptionalParameters(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? generateOptionalParameters)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = generateOptionalParameters;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetGenerateOptionalParameters(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableGenerateOptionalParameters(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableGenerateOptionalParameters(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateOptionalParameters"/></em></p>
        ///   <p>Specifies whether to reorder parameters (required first, optional at the end) and generate optional parameters (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleGenerateOptionalParameters(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateOptionalParameters = !toolSettings.GenerateOptionalParameters;
            return toolSettings;
        }
        #endregion
        #region GenerateResponseClasses
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetGenerateResponseClasses(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? generateResponseClasses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = generateResponseClasses;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetGenerateResponseClasses(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableGenerateResponseClasses(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableGenerateResponseClasses(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.GenerateResponseClasses"/></em></p>
        ///   <p>Specifies whether to generate response classes (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleGenerateResponseClasses(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenerateResponseClasses = !toolSettings.GenerateResponseClasses;
            return toolSettings;
        }
        #endregion
        #region HandleReferences
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.HandleReferences"/></em></p>
        ///   <p>Handle JSON references (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetHandleReferences(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? handleReferences)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = handleReferences;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.HandleReferences"/></em></p>
        ///   <p>Handle JSON references (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetHandleReferences(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.HandleReferences"/></em></p>
        ///   <p>Handle JSON references (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableHandleReferences(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.HandleReferences"/></em></p>
        ///   <p>Handle JSON references (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableHandleReferences(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.HandleReferences"/></em></p>
        ///   <p>Handle JSON references (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleHandleReferences(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HandleReferences = !toolSettings.HandleReferences;
            return toolSettings;
        }
        #endregion
        #region HttpClass
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.HttpClass"/></em></p>
        ///   <p>The Angular HTTP service class (default 'Http', 'HttpClient').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetHttpClass(this NSwagSwaggerToTypeScriptClientSettings toolSettings, HttpClass httpClass)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpClass = httpClass;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.HttpClass"/></em></p>
        ///   <p>The Angular HTTP service class (default 'Http', 'HttpClient').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetHttpClass(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HttpClass = null;
            return toolSettings;
        }
        #endregion
        #region ImportRequiredTypes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes"/></em></p>
        ///   <p>Specifies whether required types should be imported (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetImportRequiredTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? importRequiredTypes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImportRequiredTypes = importRequiredTypes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes"/></em></p>
        ///   <p>Specifies whether required types should be imported (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetImportRequiredTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImportRequiredTypes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes"/></em></p>
        ///   <p>Specifies whether required types should be imported (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableImportRequiredTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImportRequiredTypes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes"/></em></p>
        ///   <p>Specifies whether required types should be imported (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableImportRequiredTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImportRequiredTypes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.ImportRequiredTypes"/></em></p>
        ///   <p>Specifies whether required types should be imported (default: true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleImportRequiredTypes(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImportRequiredTypes = !toolSettings.ImportRequiredTypes;
            return toolSettings;
        }
        #endregion
        #region InjectionTokenType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.InjectionTokenType"/></em></p>
        ///   <p>The Angular injection token type (default 'InjectionToken', 'OpaqueToken').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetInjectionTokenType(this NSwagSwaggerToTypeScriptClientSettings toolSettings, InjectionTokenType injectionTokenType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InjectionTokenType = injectionTokenType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.InjectionTokenType"/></em></p>
        ///   <p>The Angular injection token type (default 'InjectionToken', 'OpaqueToken').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetInjectionTokenType(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InjectionTokenType = null;
            return toolSettings;
        }
        #endregion
        #region InlineNamedAny
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetInlineNamedAny(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? inlineNamedAny)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = inlineNamedAny;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetInlineNamedAny(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableInlineNamedAny(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableInlineNamedAny(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedAny"/></em></p>
        ///   <p>Inline named any types (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleInlineNamedAny(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedAny = !toolSettings.InlineNamedAny;
            return toolSettings;
        }
        #endregion
        #region InlineNamedDictionaries
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetInlineNamedDictionaries(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? inlineNamedDictionaries)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = inlineNamedDictionaries;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetInlineNamedDictionaries(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableInlineNamedDictionaries(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableInlineNamedDictionaries(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.InlineNamedDictionaries"/></em></p>
        ///   <p>Inline named dictionaries (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleInlineNamedDictionaries(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.InlineNamedDictionaries = !toolSettings.InlineNamedDictionaries;
            return toolSettings;
        }
        #endregion
        #region MarkOptionalProperties
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties"/></em></p>
        ///   <p>Specifies whether to mark optional properties with ? (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetMarkOptionalProperties(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? markOptionalProperties)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MarkOptionalProperties = markOptionalProperties;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties"/></em></p>
        ///   <p>Specifies whether to mark optional properties with ? (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetMarkOptionalProperties(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MarkOptionalProperties = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties"/></em></p>
        ///   <p>Specifies whether to mark optional properties with ? (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableMarkOptionalProperties(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MarkOptionalProperties = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties"/></em></p>
        ///   <p>Specifies whether to mark optional properties with ? (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableMarkOptionalProperties(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MarkOptionalProperties = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.MarkOptionalProperties"/></em></p>
        ///   <p>Specifies whether to mark optional properties with ? (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleMarkOptionalProperties(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MarkOptionalProperties = !toolSettings.MarkOptionalProperties;
            return toolSettings;
        }
        #endregion
        #region ModuleName
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ModuleName"/></em></p>
        ///   <p>The TypeScript module name (default: '', no module).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetModuleName(this NSwagSwaggerToTypeScriptClientSettings toolSettings, string moduleName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ModuleName = moduleName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.ModuleName"/></em></p>
        ///   <p>The TypeScript module name (default: '', no module).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetModuleName(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ModuleName = null;
            return toolSettings;
        }
        #endregion
        #region Namespace
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.Namespace"/></em></p>
        ///   <p>The TypeScript namespace (default: '', no namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetNamespace(this NSwagSwaggerToTypeScriptClientSettings toolSettings, string @namespace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = @namespace;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.Namespace"/></em></p>
        ///   <p>The TypeScript namespace (default: '', no namespace).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetNamespace(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = null;
            return toolSettings;
        }
        #endregion
        #region NullValue
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.NullValue"/></em></p>
        ///   <p>The null value used in object initializers (default 'Undefined', 'Null').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetNullValue(this NSwagSwaggerToTypeScriptClientSettings toolSettings, TypeScriptNullValue nullValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NullValue = nullValue;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.NullValue"/></em></p>
        ///   <p>The null value used in object initializers (default 'Undefined', 'Null').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetNullValue(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NullValue = null;
            return toolSettings;
        }
        #endregion
        #region OperationGenerationMode
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.OperationGenerationMode"/></em></p>
        ///   <p>The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetOperationGenerationMode(this NSwagSwaggerToTypeScriptClientSettings toolSettings, OperationGenerationMode operationGenerationMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationGenerationMode = operationGenerationMode;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.OperationGenerationMode"/></em></p>
        ///   <p>The operation generation mode ('SingleClientFromOperationId' or 'MultipleClientsFromPathSegments').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetOperationGenerationMode(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OperationGenerationMode = null;
            return toolSettings;
        }
        #endregion
        #region PromiseType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.PromiseType"/></em></p>
        ///   <p>The promise type ('Promise' or 'QPromise').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetPromiseType(this NSwagSwaggerToTypeScriptClientSettings toolSettings, PromiseType promiseType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PromiseType = promiseType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.PromiseType"/></em></p>
        ///   <p>The promise type ('Promise' or 'QPromise').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetPromiseType(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PromiseType = null;
            return toolSettings;
        }
        #endregion
        #region ProtectedMethods
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/> to a new list</em></p>
        ///   <p>List of methods with a protected access modifier ('classname.methodname').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetProtectedMethods(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] protectedMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProtectedMethodsInternal = protectedMethods.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/> to a new list</em></p>
        ///   <p>List of methods with a protected access modifier ('classname.methodname').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetProtectedMethods(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> protectedMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProtectedMethodsInternal = protectedMethods.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/></em></p>
        ///   <p>List of methods with a protected access modifier ('classname.methodname').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings AddProtectedMethods(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] protectedMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProtectedMethodsInternal.AddRange(protectedMethods);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/></em></p>
        ///   <p>List of methods with a protected access modifier ('classname.methodname').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings AddProtectedMethods(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> protectedMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProtectedMethodsInternal.AddRange(protectedMethods);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/></em></p>
        ///   <p>List of methods with a protected access modifier ('classname.methodname').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ClearProtectedMethods(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ProtectedMethodsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/></em></p>
        ///   <p>List of methods with a protected access modifier ('classname.methodname').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings RemoveProtectedMethods(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] protectedMethods)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(protectedMethods);
            toolSettings.ProtectedMethodsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToTypeScriptClientSettings.ProtectedMethods"/></em></p>
        ///   <p>List of methods with a protected access modifier ('classname.methodname').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings RemoveProtectedMethods(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> protectedMethods)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(protectedMethods);
            toolSettings.ProtectedMethodsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region QueryNullValue
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.QueryNullValue"/></em></p>
        ///   <p>The null value used for query parameters which are null (default: '').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetQueryNullValue(this NSwagSwaggerToTypeScriptClientSettings toolSettings, string queryNullValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueryNullValue = queryNullValue;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.QueryNullValue"/></em></p>
        ///   <p>The null value used for query parameters which are null (default: '').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetQueryNullValue(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.QueryNullValue = null;
            return toolSettings;
        }
        #endregion
        #region ResponseClass
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ResponseClass"/></em></p>
        ///   <p>The response class (default 'SwaggerResponse', may use '{controller}' placeholder).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetResponseClass(this NSwagSwaggerToTypeScriptClientSettings toolSettings, string responseClass)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseClass = responseClass;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.ResponseClass"/></em></p>
        ///   <p>The response class (default 'SwaggerResponse', may use '{controller}' placeholder).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetResponseClass(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResponseClass = null;
            return toolSettings;
        }
        #endregion
        #region RxJsVersion
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.RxJsVersion"/></em></p>
        ///   <p>The target RxJs version (default: 6.0).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetRxJsVersion(this NSwagSwaggerToTypeScriptClientSettings toolSettings, decimal? rxJsVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RxJsVersion = rxJsVersion;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.RxJsVersion"/></em></p>
        ///   <p>The target RxJs version (default: 6.0).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetRxJsVersion(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RxJsVersion = null;
            return toolSettings;
        }
        #endregion
        #region Template
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.Template"/></em></p>
        ///   <p>The type of the asynchronism handling ('JQueryCallbacks', 'JQueryPromises', 'AngularJS', 'Angular', 'Fetch', 'Aurelia').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetTemplate(this NSwagSwaggerToTypeScriptClientSettings toolSettings, TypeScriptTemplate template)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Template = template;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.Template"/></em></p>
        ///   <p>The type of the asynchronism handling ('JQueryCallbacks', 'JQueryPromises', 'AngularJS', 'Angular', 'Fetch', 'Aurelia').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetTemplate(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Template = null;
            return toolSettings;
        }
        #endregion
        #region TypeScriptVersion
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeScriptVersion"/></em></p>
        ///   <p>The target TypeScript version (default: 2.7).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetTypeScriptVersion(this NSwagSwaggerToTypeScriptClientSettings toolSettings, decimal? typeScriptVersion)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeScriptVersion = typeScriptVersion;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeScriptVersion"/></em></p>
        ///   <p>The target TypeScript version (default: 2.7).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetTypeScriptVersion(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeScriptVersion = null;
            return toolSettings;
        }
        #endregion
        #region TypeStyle
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeStyle"/></em></p>
        ///   <p>The type style (default: Class).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetTypeStyle(this NSwagSwaggerToTypeScriptClientSettings toolSettings, TypeScriptTypeStyle typeStyle)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeStyle = typeStyle;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeStyle"/></em></p>
        ///   <p>The type style (default: Class).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetTypeStyle(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeStyle = null;
            return toolSettings;
        }
        #endregion
        #region UseGetBaseUrlMethod
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod"/></em></p>
        ///   <p>Specifies whether to use the 'getBaseUrl(defaultUrl: string)' method from the base class (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetUseGetBaseUrlMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? useGetBaseUrlMethod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseGetBaseUrlMethod = useGetBaseUrlMethod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod"/></em></p>
        ///   <p>Specifies whether to use the 'getBaseUrl(defaultUrl: string)' method from the base class (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetUseGetBaseUrlMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseGetBaseUrlMethod = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod"/></em></p>
        ///   <p>Specifies whether to use the 'getBaseUrl(defaultUrl: string)' method from the base class (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableUseGetBaseUrlMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseGetBaseUrlMethod = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod"/></em></p>
        ///   <p>Specifies whether to use the 'getBaseUrl(defaultUrl: string)' method from the base class (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableUseGetBaseUrlMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseGetBaseUrlMethod = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.UseGetBaseUrlMethod"/></em></p>
        ///   <p>Specifies whether to use the 'getBaseUrl(defaultUrl: string)' method from the base class (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleUseGetBaseUrlMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseGetBaseUrlMethod = !toolSettings.UseGetBaseUrlMethod;
            return toolSettings;
        }
        #endregion
        #region UseSingletonProvider
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider"/></em></p>
        ///   <p>Specifies whether to use the Angular 6 Singleton Provider (Angular template only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetUseSingletonProvider(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? useSingletonProvider)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSingletonProvider = useSingletonProvider;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider"/></em></p>
        ///   <p>Specifies whether to use the Angular 6 Singleton Provider (Angular template only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetUseSingletonProvider(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSingletonProvider = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider"/></em></p>
        ///   <p>Specifies whether to use the Angular 6 Singleton Provider (Angular template only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableUseSingletonProvider(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSingletonProvider = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider"/></em></p>
        ///   <p>Specifies whether to use the Angular 6 Singleton Provider (Angular template only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableUseSingletonProvider(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSingletonProvider = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.UseSingletonProvider"/></em></p>
        ///   <p>Specifies whether to use the Angular 6 Singleton Provider (Angular template only, default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleUseSingletonProvider(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseSingletonProvider = !toolSettings.UseSingletonProvider;
            return toolSettings;
        }
        #endregion
        #region UseTransformOptionsMethod
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod"/></em></p>
        ///   <p>Call 'transformOptions' on the base class or extension class (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetUseTransformOptionsMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? useTransformOptionsMethod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseTransformOptionsMethod = useTransformOptionsMethod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod"/></em></p>
        ///   <p>Call 'transformOptions' on the base class or extension class (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetUseTransformOptionsMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseTransformOptionsMethod = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod"/></em></p>
        ///   <p>Call 'transformOptions' on the base class or extension class (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableUseTransformOptionsMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseTransformOptionsMethod = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod"/></em></p>
        ///   <p>Call 'transformOptions' on the base class or extension class (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableUseTransformOptionsMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseTransformOptionsMethod = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformOptionsMethod"/></em></p>
        ///   <p>Call 'transformOptions' on the base class or extension class (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleUseTransformOptionsMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseTransformOptionsMethod = !toolSettings.UseTransformOptionsMethod;
            return toolSettings;
        }
        #endregion
        #region UseTransformResultMethod
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod"/></em></p>
        ///   <p>Call 'transformResult' on the base class or extension class (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetUseTransformResultMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? useTransformResultMethod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseTransformResultMethod = useTransformResultMethod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod"/></em></p>
        ///   <p>Call 'transformResult' on the base class or extension class (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetUseTransformResultMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseTransformResultMethod = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod"/></em></p>
        ///   <p>Call 'transformResult' on the base class or extension class (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableUseTransformResultMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseTransformResultMethod = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod"/></em></p>
        ///   <p>Call 'transformResult' on the base class or extension class (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableUseTransformResultMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseTransformResultMethod = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.UseTransformResultMethod"/></em></p>
        ///   <p>Call 'transformResult' on the base class or extension class (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleUseTransformResultMethod(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UseTransformResultMethod = !toolSettings.UseTransformResultMethod;
            return toolSettings;
        }
        #endregion
        #region WrapDtoExceptions
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions"/></em></p>
        ///   <p>Specifies whether DTO exceptions are wrapped in a SwaggerException instance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetWrapDtoExceptions(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? wrapDtoExceptions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapDtoExceptions = wrapDtoExceptions;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions"/></em></p>
        ///   <p>Specifies whether DTO exceptions are wrapped in a SwaggerException instance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetWrapDtoExceptions(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapDtoExceptions = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions"/></em></p>
        ///   <p>Specifies whether DTO exceptions are wrapped in a SwaggerException instance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableWrapDtoExceptions(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapDtoExceptions = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions"/></em></p>
        ///   <p>Specifies whether DTO exceptions are wrapped in a SwaggerException instance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableWrapDtoExceptions(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapDtoExceptions = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapDtoExceptions"/></em></p>
        ///   <p>Specifies whether DTO exceptions are wrapped in a SwaggerException instance (default: false).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleWrapDtoExceptions(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapDtoExceptions = !toolSettings.WrapDtoExceptions;
            return toolSettings;
        }
        #endregion
        #region WrapResponseMethods
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/> to a new list</em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetWrapResponseMethods(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal = wrapResponseMethods.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/> to a new list</em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetWrapResponseMethods(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal = wrapResponseMethods.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings AddWrapResponseMethods(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal.AddRange(wrapResponseMethods);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings AddWrapResponseMethods(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal.AddRange(wrapResponseMethods);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ClearWrapResponseMethods(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponseMethodsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings RemoveWrapResponseMethods(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(wrapResponseMethods);
            toolSettings.WrapResponseMethodsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponseMethods"/></em></p>
        ///   <p>List of methods where responses are wrapped ('ControllerName.MethodName', WrapResponses must be true).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings RemoveWrapResponseMethods(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> wrapResponseMethods)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(wrapResponseMethods);
            toolSettings.WrapResponseMethodsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region WrapResponses
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access (experimental).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetWrapResponses(this NSwagSwaggerToTypeScriptClientSettings toolSettings, bool? wrapResponses)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = wrapResponses;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access (experimental).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetWrapResponses(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access (experimental).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings EnableWrapResponses(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access (experimental).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings DisableWrapResponses(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="NSwagSwaggerToTypeScriptClientSettings.WrapResponses"/></em></p>
        ///   <p>Specifies whether to wrap success responses to allow full response access (experimental).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ToggleWrapResponses(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WrapResponses = !toolSettings.WrapResponses;
            return toolSettings;
        }
        #endregion
        #region EnumNameGeneratorType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.EnumNameGeneratorType"/></em></p>
        ///   <p>The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetEnumNameGeneratorType(this NSwagSwaggerToTypeScriptClientSettings toolSettings, string enumNameGeneratorType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnumNameGeneratorType = enumNameGeneratorType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.EnumNameGeneratorType"/></em></p>
        ///   <p>The custom IEnumNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetEnumNameGeneratorType(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnumNameGeneratorType = null;
            return toolSettings;
        }
        #endregion
        #region PropertyNameGeneratorType
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.PropertyNameGeneratorType"/></em></p>
        ///   <p>The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetPropertyNameGeneratorType(this NSwagSwaggerToTypeScriptClientSettings toolSettings, string propertyNameGeneratorType)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PropertyNameGeneratorType = propertyNameGeneratorType;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.PropertyNameGeneratorType"/></em></p>
        ///   <p>The custom IPropertyNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetPropertyNameGeneratorType(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PropertyNameGeneratorType = null;
            return toolSettings;
        }
        #endregion
        #region TemplateDirectory
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.TemplateDirectory"/></em></p>
        ///   <p>The Liquid template directory (experimental).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetTemplateDirectory(this NSwagSwaggerToTypeScriptClientSettings toolSettings, string templateDirectory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TemplateDirectory = templateDirectory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.TemplateDirectory"/></em></p>
        ///   <p>The Liquid template directory (experimental).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetTemplateDirectory(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TemplateDirectory = null;
            return toolSettings;
        }
        #endregion
        #region TypeNameGenerator
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetTypeNameGenerator(this NSwagSwaggerToTypeScriptClientSettings toolSettings, string typeNameGenerator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = typeNameGenerator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.TypeNameGenerator"/></em></p>
        ///   <p>The custom ITypeNameGenerator implementation type in the form 'assemblyName:fullTypeName' or 'fullTypeName').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetTypeNameGenerator(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TypeNameGenerator = null;
            return toolSettings;
        }
        #endregion
        #region Input
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.Input"/></em></p>
        ///   <p>A file path or URL to the data or the JSON data itself.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetInput(this NSwagSwaggerToTypeScriptClientSettings toolSettings, string input)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = input;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.Input"/></em></p>
        ///   <p>A file path or URL to the data or the JSON data itself.</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetInput(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = null;
            return toolSettings;
        }
        #endregion
        #region ServiceHost
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web document (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetServiceHost(this NSwagSwaggerToTypeScriptClientSettings toolSettings, string serviceHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = serviceHost;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceHost"/></em></p>
        ///   <p>Overrides the service host of the web document (optional, use '.' to remove the hostname).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetServiceHost(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceHost = null;
            return toolSettings;
        }
        #endregion
        #region ServiceSchemes
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetServiceSchemes(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/> to a new list</em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetServiceSchemes(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal = serviceSchemes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings AddServiceSchemes(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings AddServiceSchemes(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.AddRange(serviceSchemes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ClearServiceSchemes(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceSchemesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings RemoveServiceSchemes(this NSwagSwaggerToTypeScriptClientSettings toolSettings, params string[] serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="NSwagSwaggerToTypeScriptClientSettings.ServiceSchemes"/></em></p>
        ///   <p>Overrides the allowed schemes of the web service (optional, comma separated, 'http', 'https', 'ws', 'wss').</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings RemoveServiceSchemes(this NSwagSwaggerToTypeScriptClientSettings toolSettings, IEnumerable<string> serviceSchemes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(serviceSchemes);
            toolSettings.ServiceSchemesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="NSwagSwaggerToTypeScriptClientSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings SetOutput(this NSwagSwaggerToTypeScriptClientSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="NSwagSwaggerToTypeScriptClientSettings.Output"/></em></p>
        ///   <p>The output file path (optional).</p>
        /// </summary>
        [Pure]
        public static NSwagSwaggerToTypeScriptClientSettings ResetOutput(this NSwagSwaggerToTypeScriptClientSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region SchemaType
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<SchemaType>))]
    public partial class SchemaType : Enumeration
    {
        public static SchemaType JsonSchema = (SchemaType) "JsonSchema";
        public static SchemaType Swagger2 = (SchemaType) "Swagger2";
        public static SchemaType OpenApi3 = (SchemaType) "OpenApi3";
        public static explicit operator SchemaType(string value)
        {
            return new SchemaType { Value = value };
        }
    }
    #endregion
    #region PropertyNameHandling
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<PropertyNameHandling>))]
    public partial class PropertyNameHandling : Enumeration
    {
        public static PropertyNameHandling Default = (PropertyNameHandling) "Default";
        public static PropertyNameHandling CamelCase = (PropertyNameHandling) "CamelCase";
        public static PropertyNameHandling SnakeCase = (PropertyNameHandling) "SnakeCase";
        public static explicit operator PropertyNameHandling(string value)
        {
            return new PropertyNameHandling { Value = value };
        }
    }
    #endregion
    #region ReferenceTypeNullHandling
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<ReferenceTypeNullHandling>))]
    public partial class ReferenceTypeNullHandling : Enumeration
    {
        public static ReferenceTypeNullHandling Null = (ReferenceTypeNullHandling) "Null";
        public static ReferenceTypeNullHandling NotNull = (ReferenceTypeNullHandling) "NotNull";
        public static explicit operator ReferenceTypeNullHandling(string value)
        {
            return new ReferenceTypeNullHandling { Value = value };
        }
    }
    #endregion
    #region EnumHandling
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<EnumHandling>))]
    public partial class EnumHandling : Enumeration
    {
        public static EnumHandling Integer = (EnumHandling) "Integer";
        public static EnumHandling String = (EnumHandling) "String";
        public static EnumHandling CamelCaseString = (EnumHandling) "CamelCaseString";
        public static explicit operator EnumHandling(string value)
        {
            return new EnumHandling { Value = value };
        }
    }
    #endregion
    #region OperationGenerationMode
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<OperationGenerationMode>))]
    public partial class OperationGenerationMode : Enumeration
    {
        public static OperationGenerationMode MultipleClientsFromOperationId = (OperationGenerationMode) "MultipleClientsFromOperationId";
        public static OperationGenerationMode MultipleClientsFromPathSegments = (OperationGenerationMode) "MultipleClientsFromPathSegments";
        public static OperationGenerationMode MultipleClientsFromFirstTagAndPathSegments = (OperationGenerationMode) "MultipleClientsFromFirstTagAndPathSegments";
        public static OperationGenerationMode MultipleClientsFromFirstTagAndOperationId = (OperationGenerationMode) "MultipleClientsFromFirstTagAndOperationId";
        public static OperationGenerationMode SingleClientFromOperationId = (OperationGenerationMode) "SingleClientFromOperationId";
        public static OperationGenerationMode SingleClientFromPathSegments = (OperationGenerationMode) "SingleClientFromPathSegments";
        public static explicit operator OperationGenerationMode(string value)
        {
            return new OperationGenerationMode { Value = value };
        }
    }
    #endregion
    #region CSharpClassStyle
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<CSharpClassStyle>))]
    public partial class CSharpClassStyle : Enumeration
    {
        public static CSharpClassStyle Poco = (CSharpClassStyle) "Poco";
        public static CSharpClassStyle Inpc = (CSharpClassStyle) "Inpc";
        public static CSharpClassStyle Prism = (CSharpClassStyle) "Prism";
        public static CSharpClassStyle Record = (CSharpClassStyle) "Record";
        public static explicit operator CSharpClassStyle(string value)
        {
            return new CSharpClassStyle { Value = value };
        }
    }
    #endregion
    #region CSharpControllerStyle
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<CSharpControllerStyle>))]
    public partial class CSharpControllerStyle : Enumeration
    {
        public static CSharpControllerStyle Partial = (CSharpControllerStyle) "Partial";
        public static CSharpControllerStyle Abstract = (CSharpControllerStyle) "Abstract";
        public static explicit operator CSharpControllerStyle(string value)
        {
            return new CSharpControllerStyle { Value = value };
        }
    }
    #endregion
    #region CSharpControllerTarget
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<CSharpControllerTarget>))]
    public partial class CSharpControllerTarget : Enumeration
    {
        public static CSharpControllerTarget AspNet = (CSharpControllerTarget) "AspNet";
        public static CSharpControllerTarget AspNetCore = (CSharpControllerTarget) "AspNetCore";
        public static explicit operator CSharpControllerTarget(string value)
        {
            return new CSharpControllerTarget { Value = value };
        }
    }
    #endregion
    #region CSharpControllerRouteNamingStrategy
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<CSharpControllerRouteNamingStrategy>))]
    public partial class CSharpControllerRouteNamingStrategy : Enumeration
    {
        public static CSharpControllerRouteNamingStrategy None = (CSharpControllerRouteNamingStrategy) "None";
        public static CSharpControllerRouteNamingStrategy OperationId = (CSharpControllerRouteNamingStrategy) "OperationId";
        public static explicit operator CSharpControllerRouteNamingStrategy(string value)
        {
            return new CSharpControllerRouteNamingStrategy { Value = value };
        }
    }
    #endregion
    #region TypeScriptTemplate
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<TypeScriptTemplate>))]
    public partial class TypeScriptTemplate : Enumeration
    {
        public static TypeScriptTemplate JQueryCallbacks = (TypeScriptTemplate) "JQueryCallbacks";
        public static TypeScriptTemplate JQueryPromises = (TypeScriptTemplate) "JQueryPromises";
        public static TypeScriptTemplate AngularJS = (TypeScriptTemplate) "AngularJS";
        public static TypeScriptTemplate Angular = (TypeScriptTemplate) "Angular";
        public static TypeScriptTemplate Fetch = (TypeScriptTemplate) "Fetch";
        public static TypeScriptTemplate Aurelia = (TypeScriptTemplate) "Aurelia";
        public static TypeScriptTemplate Axios = (TypeScriptTemplate) "Axios";
        public static explicit operator TypeScriptTemplate(string value)
        {
            return new TypeScriptTemplate { Value = value };
        }
    }
    #endregion
    #region PromiseType
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<PromiseType>))]
    public partial class PromiseType : Enumeration
    {
        public static PromiseType Promise = (PromiseType) "Promise";
        public static PromiseType QPromise = (PromiseType) "QPromise";
        public static explicit operator PromiseType(string value)
        {
            return new PromiseType { Value = value };
        }
    }
    #endregion
    #region HttpClass
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<HttpClass>))]
    public partial class HttpClass : Enumeration
    {
        public static HttpClass Http = (HttpClass) "Http";
        public static HttpClass HttpClient = (HttpClass) "HttpClient";
        public static explicit operator HttpClass(string value)
        {
            return new HttpClass { Value = value };
        }
    }
    #endregion
    #region InjectionTokenType
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<InjectionTokenType>))]
    public partial class InjectionTokenType : Enumeration
    {
        public static InjectionTokenType OpaqueToken = (InjectionTokenType) "OpaqueToken";
        public static InjectionTokenType InjectionToken = (InjectionTokenType) "InjectionToken";
        public static explicit operator InjectionTokenType(string value)
        {
            return new InjectionTokenType { Value = value };
        }
    }
    #endregion
    #region TypeScriptDateTimeType
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<TypeScriptDateTimeType>))]
    public partial class TypeScriptDateTimeType : Enumeration
    {
        public static TypeScriptDateTimeType Date = (TypeScriptDateTimeType) "Date";
        public static TypeScriptDateTimeType MomentJS = (TypeScriptDateTimeType) "MomentJS";
        public static TypeScriptDateTimeType String = (TypeScriptDateTimeType) "String";
        public static TypeScriptDateTimeType OffsetMomentJS = (TypeScriptDateTimeType) "OffsetMomentJS";
        public static explicit operator TypeScriptDateTimeType(string value)
        {
            return new TypeScriptDateTimeType { Value = value };
        }
    }
    #endregion
    #region TypeScriptNullValue
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<TypeScriptNullValue>))]
    public partial class TypeScriptNullValue : Enumeration
    {
        public static TypeScriptNullValue Null = (TypeScriptNullValue) "Null";
        public static TypeScriptNullValue Undefined = (TypeScriptNullValue) "Undefined";
        public static explicit operator TypeScriptNullValue(string value)
        {
            return new TypeScriptNullValue { Value = value };
        }
    }
    #endregion
    #region TypeScriptTypeStyle
    /// <summary>
    ///   Used within <see cref="NSwagTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<TypeScriptTypeStyle>))]
    public partial class TypeScriptTypeStyle : Enumeration
    {
        public static TypeScriptTypeStyle Interface = (TypeScriptTypeStyle) "Interface";
        public static TypeScriptTypeStyle Class = (TypeScriptTypeStyle) "Class";
        public static TypeScriptTypeStyle KnockoutClass = (TypeScriptTypeStyle) "KnockoutClass";
        public static explicit operator TypeScriptTypeStyle(string value)
        {
            return new TypeScriptTypeStyle { Value = value };
        }
    }
    #endregion
}
